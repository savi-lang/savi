:class val Bytes
  :is BinaryReadable
  :is Comparable(Bytes'box)
  :is Indexable(U8)

  :var _size USize
  :var _space USize
  :var _ptr CPointer(U8)'ref
  :new ref from_cpointer(@_ptr, @_size, @_space)
  :new iso iso_from_cpointer(@_ptr, @_size, @_space) // TODO: remove this and use recover instead?
  :new val val_from_cpointer(@_ptr, @_size, @_space) // TODO: remove this and use recover instead?
  :fun hash: @_ptr._hash(@_size)
  :fun size: @_size
  :fun space: @_space
  :fun cpointer(offset = 0) CPointer(U8)'tag: @_ptr._offset(offset)

  :fun ref _ptr_set_null
    @_space = 0
    @_ptr = CPointer(U8)._null

  :fun ref _ptr_allocate(space USize)
    @_space = space.next_pow2.at_least(space).at_least(8)
    @_ptr = CPointer(U8)._alloc(@_space)

  :fun ref _ptr_reallocate(space USize)
    @_space = space.next_pow2.at_least(space).at_least(8)
    @_ptr = @_ptr._realloc(@_space)

  :new ref (space USize = 0)
    @_size = 0
    if space > 0 (@_ptr_allocate(space) | @_ptr_set_null)

  :new iso new_iso(space USize = 0) // TODO: use recover instead of this hack
    @_size = 0
    if space > 0 (@_ptr_allocate(space) | @_ptr_set_null)

  :new val from_array(data Array(U8)'val)
    @_size = data.size
    @_space = data.space
    @_ptr = data.cpointer._unsafe

  :new val from_string(data String)
    @_size = data.size
    @_space = data.space
    @_ptr = data.cpointer._unsafe

  :fun val as_array: Array(U8).val_from_cpointer(@_ptr._unsafe, @_size, @_space)
  :fun val as_string: String.from_bytes(@)

  :: Take the underlying buffer and return a new isolated `Bytes`,
  :: leaving this original `Bytes` instance empty.
  :fun ref take_buffer Bytes'iso
    new = @iso_from_cpointer(@_ptr, @_size, @_space)
    @_size = 0
    @_ptr_set_null
    --new

  :is TraceData
  :fun trace_data(trace TraceData.Observer)
    trace.primitive_bytes(@)

  :fun "=="(other Bytes'box)
    (@_size == other._size) && (@_ptr._compare(other._ptr, @_size) == 0)

  :: Returns True if this Bytes starts with a substring equal to the other.
  :: Otherwise, returns False.
  :fun starts_with(other Bytes'box)
    (@_size >= other.size) && (@_ptr._compare(other._ptr, other.size) == 0)

  :: Returns True if this Bytes ends with a substring equal to the other.
  :: Otherwise, returns False.
  :fun ends_with(other Bytes'box)
    (@_size >= other.size) && (
      @_ptr._offset(@_size - other.size)._compare(other._ptr, other.size) == 0
    )

  :: Returns True if this Bytes at the given offset is equivalent to
  :: the given other Bytes at the given other_offset, for at least as long
  :: as the given number of bytes to be compared.
  :fun is_slice_equal(
    offset USize
    other (Bytes'box | String'box)
    other_offset USize
    num_bytes USize
  )
    (num_bytes <= (@size - offset))
    && (num_bytes <= (other.size - other_offset))
    && (
      ptr = @_ptr._offset(offset)
      other_ptr = other._ptr._offset(other_offset)
      ptr._compare(other_ptr, num_bytes) == 0
    )

  :fun is_empty:     @size == 0
  :fun is_not_empty: @size != 0

  :fun ref clear: @_size = 0, @

  :: Fill all or part of the buffer with a repetition of the given `byte` value.
  ::
  :: If specified, the fill range starts with the `from` parameter (inclusive)
  :: and goes up to the `to` parameter (exclusive). If not specified, then all
  :: currently populated bytes will be overwritten with the given `byte` value.
  ::
  :: If `to` is beyond the end of the currently populated bytes, the buffer
  :: will be expanded as needed to that new size. If `from` is beyond the end
  :: of the currently populated bytes, it will be silently moved to that point
  :: such that all bytes added to the buffer will have the given `byte` value.
  :: If `to` is less than `from`, this operation will have no effect.
  ::
  :: For the common case of filling with zeros, use `fill_with_zeros` instead.
  :fun ref fill_with(byte U8, from USize = 0, to USize = @_size)
    // Ensure that we won't leave a "hole" of undefined bytes.
    from = from.at_most(@_size)

    // If the fill range size is empty or negative, we have nothing to do.
    return @ if to <= from

    // We may need to expand the buffer, if the fill range goes beyond it.
    if @_size < to (

      // We may need to allocate a new pointer, if the fill range goes past it.
      if @_space < to (
        // If we're not filling the entire buffer, we need to reallocate the
        // pointer so that existing data is copied. Otherwise we will allocate
        // a new pointer with undefined data, because all of it will be memset.
        if from > 0 (@_ptr_reallocate(to) | @_ptr_allocate(to))
      )
      // The extended buffer has the size extended to include the fill range.
      @_size = to
    )

    // Finally, fill the range.
    _FFI.memset(@_ptr._offset(from), byte.i32, to - from)

    @

  :: Fill all or part of the buffer with zero-valued bytes.
  ::
  :: If specified, the fill range starts with the `from` parameter (inclusive)
  :: and goes up to the `to` parameter (exclusive). If not specified, then all
  :: currently populated bytes will be overwritten with the given `byte` value.
  ::
  :: If `to` is beyond the end of the currently populated bytes, the buffer
  :: will be expanded as needed to that new size. If `from` is beyond the end
  :: of the currently populated bytes, it will be silently moved to that point
  :: such that all bytes added to the buffer will have the given `byte` value.
  :: If `to` is less than `from`, this operation will have no effect.
  ::
  :: To fill with a byte value other than zero, use `fill_with` instead.
  :fun ref fill_with_zeros(from USize = 0, to USize = @_size)
    @fill_with(0, from, to)

  :: Copy all or some of the bytes from the `source` buffer into this buffer.
  :: Returns this buffer.
  ::
  :: The `dest_offset`, if specified, will determine where in the buffer
  :: the source range will be copied into. If not specified, the content will be
  :: appended to the end of the buffer, growing the size of the buffer, so
  :: specifying a `dest_offset` is only necessary to copy to an earlier offset.
  :: If too high of a `dest_offset` is given it will be silently truncated
  :: to the highest allowed offset (appending to the end of the buffer).
  ::
  :: The `from` and `to` parameters, if given, specify the range in the source
  :: buffer to copy (and indirectly determine how many bytes will be copied).
  :: If these are out of bounds in the source buffer, they will be silently
  :: trimmed to the buffer bounds, and if the range is zero sized then the
  :: overall operation will have no effect.
  :fun ref copy_from(
    source Bytes'box
    from USize = 0
    to USize = USize.max_value
    dest_offset USize = USize.max_value
  )
    // Silently truncate the ranges to the respective bounds.
    // Return early if the source range is zero-sized.
    dest_offset = dest_offset.at_most(@_size)
    to = to.at_most(source.size)
    return @ if from >= to

    // Reserve space in the buffer and copy into it.
    copy_size = to - from
    dest_end = dest_offset + copy_size
    @reserve(dest_end)
    source._ptr._offset(from)._copy_to(@_ptr._offset(dest_offset), copy_size)
    if @_size < dest_end (@_size = dest_end)

    @

  :fun format: Bytes.Format._new(@)

  :fun clone @'iso
    copy = @new_iso(@size)
    _ptr_tag CPointer(U8)'tag = @_ptr // TODO: this indirection shouldn't be needed
    copy._clone_from(_ptr_tag, @size)
    copy._size = @size
    --copy // TODO: auto-consume at end of the function?

  :fun ref _clone_from(other_ptr CPointer(U8), size USize)
    other_ptr._unsafe._copy_to(@_ptr, size)

  :fun includes(other): try (@offset_of!(other), True | False)

  :fun offset_of!(other Bytes'box, start_offset USize = 0)
    found Bool = False
    offset = start_offset
    other_first = other[0]! // cache here and error out if the other is empty
    while !found && offset < @_size (
      if @_ptr._get_at(offset) == other_first (
        found = (@_ptr._offset(offset)._compare(other._ptr, other._size) == 0)
      )
      offset = offset + 1
    )
    if !found error!
    offset - 1

  :: Returns true if the string is null-terminated and safe to pass to an FFI
  :: function that doesn't accept a size argument, expecting a null-terminator.
  ::
  :: This method checks that there is a null byte just after the final position
  :: of populated bytes in the string, but does not check for other null bytes
  :: which may be present earlier in the content of the string.
  ::
  :: Use the cstring method to get a null-terminated version of the string.

  :fun is_null_terminated: (@_space > @_size) && (@_ptr._get_at(@_size) == 0)

  :: Returns a CPointer to a null-terminated version of this string,
  :: copying the string if necessary to get a null-terminated pointer.
  ::
  :: Call the cpointer method instead when you don't need a null terminator
  :: (that is, when the FFI function you are calling has a size argument).

  :fun cstring CPointer(U8)
    ret CPointer(U8)'tag = @_ptr
    if @is_null_terminated (return ret)

    ptr = @_ptr._alloc(@_size + 1)
    @_ptr._copy_to(ptr._unsafe, @_size)
    ptr._assign_at(@_size, 0)
    ret = ptr // TODO: remove this type hint - it shouldn't be needed
    ret

  :: Ensure enough capacity is allocated for the given space, in bytes.
  :: The size (number of actual bytes present in the string) does not change.

  :fun ref reserve(space USize)
    if @_space < space @_ptr_reallocate(space)
    @

  :: Ensure enough capacity is allocated for the given added space, in bytes.
  :: The size (number of actual bytes present in the string) does not change.
  :: This is equivalent to calling `reserve` with the same number plus the size.
  :fun ref reserve_additional(additional_space USize)
    @reserve(@_size + additional_space)

  :: Expand to the given size, filling the added space with unitialized memory.
  :: The given size will be silently truncated to the maximum space available
  :: within the current allocation if it is greater than the available space.
  :: To avoid truncation, call reserve at some point prior to this call.
  ::
  :: This method is intended to be called after an FFI-based operation which
  :: fills the underlying memory up to the given size, so that the bytes are
  :: actually already initialized before expanding size on the Pony side.
  :: Note that reserve should be called prior to such an FFI operation
  :: to ensure there is enough room in the allocation for the intended bytes.
  ::
  :: For security purposes, please ensure the added bytes are initialized
  :: prior to allowing any operation that can read from this memory.
  :: Otherwise data from previously garbage-collected objects may be seen.
  :: The name of this method is obnoxiously verbose as a kind of warning
  :: to the programmer to carefully scrutinize the way this method is used,
  :: and prefer other patterns of working wherever possible.
  ::
  :: However, please note that this method is at least safe enough to prevent
  :: expanding beyond the allocated space into territory of other allocations,
  :: so this method cannot violate memory safety in terms of address space.

  :fun ref resize_possibly_including_uninitialized_memory(size USize)
    @_size = size.at_most(@_space)
    @

  :fun "[]!"(index): @byte_at!(index)

  :fun ref "[]=!"(index, value): @set_byte_at!(index, value)

  :fun byte_at!(index USize)
    if @size <= index error!
    @_ptr._get_at(index)

  :fun ref set_byte_at!(index USize, byte U8)
    if @size <= index error!
    @_ptr._assign_at(index, byte)

  :: Return a shared portion of this string, covering `from` until `to`,
  :: with negative values in `from` and `to` representing indexes counting
  :: backward from the end of the string.
  ::
  :: Both the original and the new string are immutable, as they share memory.
  :: The operation does not allocate a new string pointer nor copy elements.

  :fun val trim(from USize = 0, to = USize.max_value)
    start = from
    finish = to.at_most(@size)

    if start < @_size && start < finish (
      size = finish - start
      @val_from_cpointer(
        @_ptr._offset(start)
        size
        size
      )
    |
      @val_from_cpointer(@_ptr._null, 0, 0)
    )

  :fun ref trim_in_place(from USize = 0, to = USize.max_value)
    start = from
    finish = to.at_most(@size)

    if start < @_size && start < finish (
      @_size = finish - start
      @_ptr = @_ptr._offset(start)
    |
      @_size = 0
    )
    @

  :fun ref push(byte U8)
    @reserve(@_size + 1)
    @_ptr._assign_at(@_size, byte)
    @_size += 1
    @

  :fun each_with_index(
    from USize = 0
    to = USize.max_value
    stride USize = 1
  )
    index = from
    while index < to.at_most(@_size) (
      yield (@_ptr._get_at(index), index)
      index += stride
    )
    None

  :fun reverse_each_with_index(
    from = USize.max_value
    to USize = 0
    stride USize = 1
  )
    try (
      index USize = from.at_most(@_size) -! 1
      while index >= to (
        yield (@_ptr._get_at(index), index)
        index = index.at_most(@_size) -! stride
      )
    )
    None

  :fun ref "<<"(other Bytes'box)
    if other._size > 0 (
      new_size = @_size + other._size
      if other.is_null_terminated (
        @reserve(new_size + 1)
        other._ptr._copy_to(@_ptr._offset(@_size), other.size + 1)
      |
        @reserve(new_size)
        other._ptr._copy_to(@_ptr._offset(@_size), other.size)
      )
      @_size = new_size
    )
    @

  :: An alias for `<<` that works better with method chaining.
  :fun ref push_bytes(other Bytes'box)
    @ << other

  :fun ref concat_byte_slice(
    other Bytes'box
    from USize = 0
    to = USize.max_value
  )
    start = from
    finish = to.at_most(other.size)

    if start < other._size && start < finish (
      size = finish - start
      other._ptr._offset(start)._copy_to(@_ptr._offset(@_size), size)
      @_size += size
    )

  :fun ref push_utf8(value U32)
    _UTF8Encoder.encode(value) -> (byte_count, byte_1, byte_2, byte_3, byte_4 |
      i = @_size
      @_size = @_size + byte_count
      @reserve(@_size)
      @_ptr._assign_at(i, byte_1)
      if byte_count > 1 (
        @_ptr._assign_at(i + 1, byte_2)
        if byte_count > 2 (
          @_ptr._assign_at(i + 2, byte_3)
          if byte_count > 3 (
            @_ptr._assign_at(i + 3, byte_4)
          )
        )
      )
    )
    @

  :: Return a new string consisting of the original string copied `n` times.
  :fun "*"(times USize)
    if times > 0 (
      ptr = @_ptr._alloc(@size * times)
      size USize = 0

      while times > 0 (times -= 1
        @_ptr._copy_to(ptr._offset(size), @size)
        size += @size
      )

      @val_from_cpointer(ptr, size, size)
    |
      @val_from_cpointer(@_ptr._null, 0, 0)
    )

  :fun val split(split_byte U8) // TODO: a byte shouldn't be the only thing we can split by...
    result Array(Bytes) = []
    @each_split(split_byte) -> (s | result << s)
    result

  :fun val each_split(split_byte U8) // TODO: a byte shouldn't be the only thing we can split by...
    :yields Bytes
    finish USize = 0
    start = finish
    while finish < @_size (
      byte = @_ptr._get_at(finish)
      if byte == split_byte (
        yield @val_from_cpointer(
          @_ptr._offset(start)
          finish - start
          @_space - start
        )
        finish = finish + 1
        start = finish
      |
        finish = finish + 1
      )
    )
    yield @val_from_cpointer(
      @_ptr._offset(start)
      finish - start
      @_space - start
    )
    @

  :fun "<"(other Bytes'box)
    shared_size = @size.at_most(other.size)
    index USize = 0
    result = False
    try (
      while index < shared_size (
        a = @_ptr._get_at(index)
        b = other._ptr._get_at(index)
        case (
        | a < b | result = True,  error! // TODO: use break or early return instead of error
        | a > b | result = False, error! // TODO: use break or early return instead of error
        )
        index = index + 1
      )
      result = @size < other.size
    )
    result

  :fun "<="(other Bytes'box)
    shared_size = @size.at_most(other.size)
    index USize = 0
    result = False
    try (
      while index < shared_size (
        a = @_ptr._get_at(index)
        b = other._ptr._get_at(index)
        case (
        | a < b | result = True,  error! // TODO: use break or early return instead of error
        | a > b | result = False, error! // TODO: use break or early return instead of error
        )
        index = index + 1
      )
      result = @size <= other.size
    )
    result

  :fun slice(from USize, to USize = 0) Bytes'iso
    if to == 0 || to > @_size (
      to = @_size
    )
    if from < to (
      new_size = to - from
      new_alloc = new_size.next_pow2
      new_ptr = @_ptr._alloc(new_alloc)
      @_ptr._offset(from)._unsafe._copy_to(new_ptr, new_size)
      @iso_from_cpointer(new_ptr, new_size, new_alloc)
    |
      Bytes.new_iso
    )

  :: Discard all bytes after the given offset.
  ::
  :: If there isn't enough filled data in the buffer, the truncate offset will
  :: be silently reduced to match the size of the buffer, making the remaining
  :: data still in the buffer shorter than expected. If you'd prefer to
  :: raise an error for this case instead, use the `truncate!` method.
  :fun ref truncate(offset USize)
    offset = offset.at_most(@_size)
    @_size = offset
    @

  :: Discard all bytes after the given offset.
  ::
  :: Raises an error if the offset is beyond the filled data of the buffer.
  :: If you'd prefer in this case that the truncate offset be silently reduced
  :: to match the size of the buffer, use the `truncate` method instead.
  :fun ref truncate!(offset USize)
    error! if offset > @_size
    @_size = offset
    @

  :: Discard all bytes to the left of the given offset.
  ::
  :: If there isn't enough filled data in the buffer, the truncate offset will
  :: be silently reduced to match the size of the buffer, making the remaining
  :: data still in the buffer shorter than expected. If you'd prefer to
  :: raise an error for this case instead, use the `truncate_left!` method.
  :fun ref truncate_left(offset USize)
    offset = offset.at_most(@_size)
    @_ptr = @_ptr._offset(offset)
    @_size -= offset
    @_space -= offset
    @

  :: Discard all bytes to the left of the given offset.
  ::
  :: Raises an error if the offset is beyond the filled data of the buffer.
  :: If you'd prefer in this case that the truncate offset be silently reduced
  :: to match the size of the buffer, use the `truncate_left` method instead.
  :fun ref truncate_left!(offset USize)
    error! if offset > @_size
    @_ptr = @_ptr._offset(offset)
    @_size -= offset
    @_space -= offset
    @

  :: Split this byte buffer at the given offset, leaving the right side here
  :: but chopping the left side off to return it as an isolated buffer.
  ::
  :: This method does not copy, and the existing allocation will be shared,
  :: with the two buffers occupying adjacent memory in the same allocation.
  ::
  :: Both buffers remain mutable because they cannot access each other's bytes.
  ::
  :: If the left side later expands its size, it will then reallocate and copy,
  :: because the right side has retained claim over the right-adjacent memory.
  ::
  :: If there isn't enough filled data in the buffer, the chop offset will
  :: be silently reduced to match the size of the buffer, making the left side
  :: shorter than expected (and the right side empty). If you'd prefer to
  :: raise an error for this case instead, use the `chop_left!` method.
  :fun ref chop_left(offset USize) Bytes'iso
    offset = offset.at_most(@_size)
    chopped = Bytes.iso_from_cpointer(@_ptr, offset, offset)
    @_size -= offset
    @_space -= offset
    @_ptr = if @_space > 0 (@_ptr._offset(offset) | @_ptr._null)
    --chopped

  :: Split this byte buffer at the given offset, leaving the right side here
  :: but chopping the left side off to return it as an isolated buffer.
  ::
  :: This method does not copy, and the existing allocation will be shared,
  :: with the two buffers occupying adjacent memory in the same allocation.
  ::
  :: Both buffers remain mutable because they cannot access each other's bytes.
  ::
  :: If the left side later expands its size, it will then reallocate and copy,
  :: because the right side has retained claim over the right-adjacent memory.
  ::
  :: Raises an error if the offset is beyond the filled data of the buffer.
  :: If you'd prefer in this case that the chop offset be silently reduced
  :: to match the size of the buffer, use the `chop_left` method instead.
  :fun ref chop_left!(offset USize) Bytes'iso
    error! if offset > @_size
    chopped = Bytes.iso_from_cpointer(@_ptr, offset, offset)
    @_size -= offset
    @_space -= offset
    @_ptr = if @_space > 0 (@_ptr._offset(offset) | @_ptr._null)
    --chopped

  :: Split this byte buffer at the given offset, leaving the left side here
  :: but chopping the right side off to return it as an isolated buffer.
  ::
  :: This method does not copy, and the existing allocation will be shared,
  :: with the two buffers occupying adjacent memory in the same allocation.
  ::
  :: Both buffers remain mutable because they cannot access each other's bytes.
  ::
  :: If the left side later expands its size, it will then reallocate and copy,
  :: because the right side has retained claim over the right-adjacent memory.
  ::
  :: If there isn't enough filled data in the buffer, the chop offset will
  :: be silently reduced to match the size of the buffer, making the left side
  :: shorter than expected (and the right side empty). If you'd prefer to
  :: raise an error for this case instead, use the `chop_right!` method.
  :fun ref chop_right(offset USize) Bytes'iso
    offset = offset.at_most(@_size)
    chopped = Bytes.iso_from_cpointer(
      if @_space > offset (@_ptr._offset(offset) | @_ptr._null)
      @_size - offset
      @_space - offset
    )
    @_size = offset
    @_space = offset
    --chopped

  :: Split this byte buffer at the given offset, leaving the left side here
  :: but chopping the right side off to return it as an isolated buffer.
  ::
  :: This method does not copy, and the existing allocation will be shared,
  :: with the two buffers occupying adjacent memory in the same allocation.
  ::
  :: Both buffers remain mutable because they cannot access each other's bytes.
  ::
  :: If the left side later expands its size, it will then reallocate and copy,
  :: because the right side has retained claim over the right-adjacent memory.
  ::
  :: Raises an error if the offset is beyond the filled data of the buffer.
  :: If you'd prefer in this case that the chop offset be silently reduced
  :: to match the size of the buffer, use the `chop_right` method instead.
  :fun ref chop_right!(offset USize) Bytes'iso
    error! if offset > @_size
    chopped = Bytes.iso_from_cpointer(
      if @_space > offset (@_ptr._offset(offset) | @_ptr._null)
      @_size - offset
      @_space - offset
    )
    @_size = offset
    @_space = offset
    --chopped

  :fun read_byte!(offset USize) U8
    @byte_at!(offset)

  :: Read a U16 from the bytes at the given offset, with native byte order.
  :: Raises an error if there aren't enough bytes at that offset to fill a U16.
  :fun read_native_u16!(offset USize) U16
    if (offset + U16.byte_width.usize) > @_size error!
    result U16 = 0
    result_ptr = _FFI.Cast(CPointer(U16), CPointer(U8)'ref)
      .pointer(stack_address_of_variable result)
    // (we use memcpy here because it gracefully handles unaligned addresses)
    @_ptr._offset(offset)._copy_to(result_ptr, U16.byte_width.usize)
    result

  :: Write a U16 as bytes starting at the given offset, in native byte order.
  :: Raises an error if there aren't enough bytes at that offset to fit a U16.
  :: Use push_native_u16 instead if writing past the end is needed.
  :fun ref write_native_u16!(offset USize, value U16)
    if (offset + U16.byte_width.usize) > @_size error!
    // (we use memcpy here because it gracefully handles unaligned addresses)
    _FFI.Cast(CPointer(U16), CPointer(U8)'box)
      .pointer(stack_address_of_variable value)
      ._copy_to(@_ptr._offset(offset), U16.byte_width.usize)
    @

  :: Add a U16 as bytes onto the end of the buffer, in native byte order.
  :: Use write_native_u16 instead if overwriting existing data is needed.
  :fun ref push_native_u16(value U16)
    @reserve(@_size + U16.byte_width.usize)
    // (we use memcpy here because it gracefully handles unaligned addresses)
    _FFI.Cast(CPointer(U16), CPointer(U8)'box)
      .pointer(stack_address_of_variable value)
      ._copy_to(@_ptr._offset(@_size), U16.byte_width.usize)
    @_size += U16.byte_width.usize
    @

  :: Read a U32 from the bytes at the given offset, with native byte order.
  :: Raises an error if there aren't enough bytes at that offset to fill a U32.
  :fun read_native_u32!(offset USize) U32
    if (offset + U32.byte_width.usize) > @_size error!
    result U32 = 0
    result_ptr = _FFI.Cast(CPointer(U32), CPointer(U8)'ref)
      .pointer(stack_address_of_variable result)
    // (we use memcpy here because it gracefully handles unaligned addresses)
    @_ptr._offset(offset)._copy_to(result_ptr, U32.byte_width.usize)
    result

  :: Write a U32 as bytes starting at the given offset, in native byte order.
  :: Raises an error if there aren't enough bytes at that offset to fit a U32.
  :: Use push_native_u32 instead if writing past the end is needed.
  :fun ref write_native_u32!(offset USize, value U32)
    if (offset + U32.byte_width.usize) > @_size error!
    // (we use memcpy here because it gracefully handles unaligned addresses)
    _FFI.Cast(CPointer(U32), CPointer(U8)'box)
      .pointer(stack_address_of_variable value)
      ._copy_to(@_ptr._offset(offset), U32.byte_width.usize)
    @

  :: Add a U32 as bytes onto the end of the buffer, in native byte order.
  :: Use write_native_u32 instead if overwriting existing data is needed.
  :fun ref push_native_u32(value U32)
    @reserve(@_size + U32.byte_width.usize)
    // (we use memcpy here because it gracefully handles unaligned addresses)
    _FFI.Cast(CPointer(U32), CPointer(U8)'box)
      .pointer(stack_address_of_variable value)
      ._copy_to(@_ptr._offset(@_size), U32.byte_width.usize)
    @_size += U32.byte_width.usize
    @

  :: Read a U64 from the bytes at the given offset, with native byte order.
  :: Raises an error if there aren't enough bytes at that offset to fill a U64.
  :fun read_native_u64!(offset USize) U64
    if (offset + U64.byte_width.usize) > @_size error!
    result U64 = 0
    result_ptr = _FFI.Cast(CPointer(U64), CPointer(U8)'ref)
      .pointer(stack_address_of_variable result)
    // (we use memcpy here because it gracefully handles unaligned addresses)
    @_ptr._offset(offset)._copy_to(result_ptr, U64.byte_width.usize)
    result

  :: Write a U64 as bytes starting at the given offset, in native byte order.
  :: Raises an error if there aren't enough bytes at that offset to fit a U64.
  :: Use push_native_u64 instead if writing past the end is needed.
  :fun ref write_native_u64!(offset USize, value U64)
    if (offset + U64.byte_width.usize) > @_size error!
    // (we use memcpy here because it gracefully handles unaligned addresses)
    _FFI.Cast(CPointer(U64), CPointer(U8)'box)
      .pointer(stack_address_of_variable value)
      ._copy_to(@_ptr._offset(offset), U64.byte_width.usize)
    @

  :: Add a U64 as bytes onto the end of the buffer, in native byte order.
  :: Use write_native_u64 instead if overwriting existing data is needed.
  :fun ref push_native_u64(value U64)
    @reserve(@_size + U64.byte_width.usize)
    // (we use memcpy here because it gracefully handles unaligned addresses)
    _FFI.Cast(CPointer(U64), CPointer(U8)'box)
      .pointer(stack_address_of_variable value)
      ._copy_to(@_ptr._offset(@_size), U64.byte_width.usize)
    @_size += U64.byte_width.usize
    @

  :fun non join(others Array(Bytes), separator = b"") Bytes'iso
    res = Bytes.new_iso
    others.each_with_index -> (other, index |
      res << other
      if index != others.size - 1 res << separator
    )
    --res
