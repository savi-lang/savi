:: A trait that defines a standard way to trace data inside of an object.
::
:: Implementing this trait makes it easy to integrate with various observers,
:: such as those that print data, measure data, or serialize to various formats.
:trait box TraceData
  :fun box trace_data(trace TraceData.Observer) None

:: A placeholder to be used while tracing a value that cannot be traced;
:: that is, a value that cannot be represented by traceable data primitives.
::
:: This makes it possible to meanigfully implement tracing for a data structure
:: that may sometimes contain an untraceable value.
:module TraceData.Untraceable
  :is TraceData
  :fun box trace_data(trace TraceData.Observer)
    trace.primitive_name("untraceable")

:: A convenience type for handling a possibly untraceable value. See `[]`.
:module TraceData.Untraceable.Maybe
  :: A convenience function for handling a possibly untraceable value.
  ::
  :: If the given value is a `TraceData`, it will be returned as-is.
  :: Otherwise, `TraceData.Untraceable` will be returned in its place.
  :fun "[]"(value Any'box) TraceData
    if value <: TraceData (value | TraceData.Untraceable)

:: A trait that defines a standard for observing a data structure being traced.
:: The data structure being traced is one that implements the `TraceData` trait.
::
:: The observer is mutable, as most useful observers are expected to accumulate
:: some state (or produce side effects, but accumulated state is preferable).
::
:: The observer must implement all of the relevant methods, even if some of
:: them are not meaningful to the purpose of the observer, or happen to be
:: redundant with each other insofar as the particular observer is concerned.
:trait ref TraceData.Observer
  :: Trace an object - a data structure that may have some named properties.
  ::
  :: The call yields, and named properties should be traced inside the block.
  ::
  :: Do not interrupt the yield block, lest the observer be left in an
  :: inconsistent state due to not getting to finish tracing the object.
  ::
  :: An id must be supplied as the argument for the purpose of breaking infinite
  :: recursion - the observer is expected to observe the id and refuse to yield
  :: for an id that has already been seen by it in the current "stack".
  :: Most classes should use `identity_digest_of @` as the recursion id.
  :: Where recursion is not possible (such as for a struct), use zero as the id.
  :: The observer is expected to treat zero as a special case, indicating that
  :: recursion should always be allowed without checking if it has been seen.
  :fun ref object(recurse_id USize) None
    :yields None for None // TODO: add a "without interruption" enforcement to the yield signature to ensure that the yield block isn't allowed to jump away.

  :: Trace a named property of an object.
  ::
  :: This is expected to only be called from within the yield block of a call
  :: to the `object` method - that is, only while tracing an object.
  ::
  :: The `name` is expected to be a unique string within the object.
  ::
  :: The `value` must be something that can be traced. If you need to trace a
  :: property whose value cannot be traced, it is conventional to use the
  :: special value `TraceData.Untraceable` as a placeholder traced value.
  :fun ref property(name String, value TraceData) None

  :: Trace an array-like sequence which may contain some elements.
  ::
  :: The call yields, and array elements should be traced inside the block.
  ::
  :: Do not interrupt the yield block, lest the observer be left in an
  :: inconsistent state due to not getting to finish tracing the array.
  ::
  :: An id must be supplied as the argument for the purpose of breaking infinite
  :: recursion - the observer is expected to observe the id and refuse to yield
  :: for an id that has already been seen by it in the current "stack".
  :: Most classes should use `identity_digest_of @` as the recursion id.
  :: Where recursion is not possible (such as for a struct), use zero as the id.
  :: The observer is expected to treat zero as a special case, indicating that
  :: recursion should always be allowed without checking if it has been seen.
  :fun ref array(recurse_id USize) None
    :yields None for None // TODO: add a "without interruption" enforcement to the yield signature to ensure that the yield block isn't allowed to jump away.

  :: Trace a sequential array element of an array.
  ::
  :: This is expected to only be called from within the yield block of a call
  :: to the `array` method - that is, only while tracing an array.
  ::
  :: The `value` must be something that can be traced. If you need to trace an
  :: element whose value cannot be traced, it is conventional to use the
  :: special value `TraceData.Untraceable` as a placeholder traced value.
  :fun ref array_element(value TraceData) None

  :: Trace a primitive value indicating the absence of a value (i.e. `None`).
  :fun ref primitive_none None

  :: Trace a primitive value indicating truth or falsehood (i.e. `Bool`).
  :fun ref primitive_bool(value Bool) None

  :: Trace a primitive 64-bit unsigned integer value (i.e. `U64`).
  :fun ref primitive_u64(value U64) None

  :: Trace a primitive 32-bit unsigned integer value (i.e. `U32`).
  :fun ref primitive_u32(value U32) None

  :: Trace a primitive 16-bit unsigned integer value (i.e. `U16`).
  :fun ref primitive_u16(value U16) None

  :: Trace a primitive 8-bit unsigned integer value (i.e. `U8`).
  :fun ref primitive_u8(value U8) None

  :: Trace a primitive 64-bit signed integer value (i.e. `I64`).
  :fun ref primitive_i64(value I64) None

  :: Trace a primitive 32-bit signed integer value (i.e. `I32`).
  :fun ref primitive_i32(value I32) None

  :: Trace a primitive 16-bit signed integer value (i.e. `I16`).
  :fun ref primitive_i16(value I16) None

  :: Trace a primitive 8-bit signed integer value (i.e. `I8`).
  :fun ref primitive_i8(value I8) None

  :: Trace a primitive 64-bit floating-point value (i.e. `F64`).
  :fun ref primitive_f64(value F64) None

  :: Trace a primitive 32-bit floating-point value (i.e. `F32`).
  :fun ref primitive_f32(value F32) None

  :: Trace a primitive named value (such as a member of an enum).
  :fun ref primitive_name(value String'box) None

  :: Trace a primitive UTF-8 string value (i.e. `String`).
  :fun ref primitive_string(value String'box) None

  :: Trace a primitive sequence of arbitrary bytes (i.e. `Bytes`).
  :fun ref primitive_bytes(value Bytes'box) None

:: A trait that defines a standard way to mutate data inside of an object.
::
:: Implementing this trait makes it easy to integrate with various mutators,
:: such as those that populate config data or deserialize from various formats.
:trait ref TraceData.Mutable
  :fun ref trace_data_mutable(trace TraceData.Mutator) None

:: A trait that defines a standard for mutating a data structure being traced.
:: The data structure being traced is one that implements `TraceData.Mutable`.
::
:: The mutator is itself mutable, as it will need to track state during tracing.
::
:: The mutator must implement all of the relevant methods, even if some of
:: them are not meaningful to the purpose of the mutator, or happen to be
:: redundant with each other insofar as the particular mutator is concerned.
:trait ref TraceData.Mutator
  :: Trace an object - a data structure that may have some named properties.
  ::
  :: The call yields for each key that the observer desires to mutate,
  :: expecting that the yield block will respond appropriately with
  :: additional relevant mutation tracing call for that key. For example,
  :: if the key points to a string field, calling either `replace_string`
  :: (if an existing value is known) or `set_string` (if no value is yet known),
  :: each of which would possibly produce a new string to assign.
  ::
  :: Do not interrupt the yield block, lest the mutator be left in an
  :: inconsistent state due to not getting to finish tracing the object.
  ::
  :: An id must be supplied as the argument for the purpose of breaking infinite
  :: recursion - the mutator is expected to observe the id and refuse to yield
  :: for an id that has already been seen by it in the current "stack".
  :: Most classes should use `identity_digest_of @` as the recursion id.
  :: Where recursion is not possible (such as for a struct), use zero as the id.
  :: The mutator is expected to treat zero as a special case, indicating that
  :: recursion should always be allowed without checking if it has been seen.
  :fun ref object(recurse_id USize) None
    :yields String for None // TODO: add a "without interruption" enforcement to the yield signature to ensure that the yield block isn't allowed to jump away.

  :: Indicate that the currently requested object key is not a valid key
  :: reachable in the current object (for example, no field has that name).
  ::
  :: This should only be called within the yield block of an `object` call,
  :: as it refers to the key yielded by the mutator to that block.
  :fun ref object_key_is_invalid None

  :: Indicate that the currently requested object key is not of a traceable
  :: mutable type or a replaceable type.
  ::
  :: This should only be called within the yield block of an `object` call,
  :: as it refers to the key yielded by the mutator to that block.
  :fun ref object_key_cannot_be_modified None

  :: Trace an array-like sequence which may contain some elements.
  ::
  :: The call yields for each array index that the observer desires to mutate,
  :: expecting that the yield block will respond appropriately with
  :: additional relevant mutation tracing call for that index. For example,
  :: if the index points to a string element, calling either `replace_string`
  :: (if an existing value is known) or `set_string` (if no value is yet known),
  :: each of which would possibly produce a new string to assign.
  ::
  :: Do not interrupt the yield block, lest the observer be left in an
  :: inconsistent state due to not getting to finish tracing the array.
  ::
  :: An id must be supplied as the argument for the purpose of breaking infinite
  :: recursion - the observer is expected to observe the id and refuse to yield
  :: for an id that has already been seen by it in the current "stack".
  :: Most classes should use `identity_digest_of @` as the recursion id.
  :: Where recursion is not possible (such as for a struct), use zero as the id.
  :: The observer is expected to treat zero as a special case, indicating that
  :: recursion should always be allowed without checking if it has been seen.
  :fun ref array(recurse_id USize, size USize) None
    :yields USize for None // TODO: add a "without interruption" enforcement to the yield signature to ensure that the yield block isn't allowed to jump away.

  :: Allow the mutator the option to truncate the size of the array to a
  :: smaller size, if it yields a new size to the yield block.
  :: Truncate the array to the new size if the mutator yields one.
  ::
  :: This should be called before the `array` call, such that the mutator
  :: can choose to truncate first before writing its desired elements.
  :fun ref array_truncate(recurse_id USize, size USize) None
    :yields USize for None // TODO: add a "without interruption" enforcement to the yield signature to ensure that the yield block isn't allowed to jump away.

  :: Indicate that the currently requested array index is not a valid index
  :: reachable in the current array (for example, the index is out of bounds,
  :: or the given value is not mutable, or not of a replaceable type).
  ::
  :: This should only be called within the yield block of an `array` call,
  :: as it refers to the index yielded by the mutator to that block.
  :fun ref array_index_is_invalid None

  :: Indicate that the currently requested array index is not of a traceable
  :: mutable type or a replaceable type.
  ::
  :: This should only be called within the yield block of an `array` call,
  :: as it refers to the index yielded by the mutator to that block.
  :fun ref array_index_cannot_be_modified None

  :: Allow the mutator the option to assign `None` to the current location.
  :: Only set it to `None` if the mutator decides to call the yield block.
  :fun ref set_none None
    :yields None for None // TODO: add a "without interruption" enforcement to the yield signature to ensure that the yield block isn't allowed to jump away.
    None

  :: Allow the mutator the option to assign a `Bool` to the current location.
  :: Set it to the value in the yield block (if the mutator decides to call it).
  :fun ref set_bool None
    :yields Bool for None // TODO: add a "without interruption" enforcement to the yield signature to ensure that the yield block isn't allowed to jump away.
    None

  :: Allow the mutator the option to assign a `U64` to the current location.
  :: Set it to the value in the yield block (if the mutator decides to call it).
  :fun ref set_u64 None
    :yields U64 for None // TODO: add a "without interruption" enforcement to the yield signature to ensure that the yield block isn't allowed to jump away.
    None

  :: Allow the mutator the option to assign a `U32` to the current location.
  :: Set it to the value in the yield block (if the mutator decides to call it).
  :fun ref set_u32 None
    :yields U32 for None // TODO: add a "without interruption" enforcement to the yield signature to ensure that the yield block isn't allowed to jump away.
    None

  :: Allow the mutator the option to assign a `U16` to the current location.
  :: Set it to the value in the yield block (if the mutator decides to call it).
  :fun ref set_u16 None
    :yields U16 for None // TODO: add a "without interruption" enforcement to the yield signature to ensure that the yield block isn't allowed to jump away.
    None

  :: Allow the mutator the option to assign a `U8` to the current location.
  :: Set it to the value in the yield block (if the mutator decides to call it).
  :fun ref set_u8 None
    :yields U8 for None // TODO: add a "without interruption" enforcement to the yield signature to ensure that the yield block isn't allowed to jump away.
    None

  :: Allow the mutator the option to assign an `I64` to the current location.
  :: Set it to the value in the yield block (if the mutator decides to call it).
  :fun ref set_i64 None
    :yields I64 for None // TODO: add a "without interruption" enforcement to the yield signature to ensure that the yield block isn't allowed to jump away.
    None

  :: Allow the mutator the option to assign an `I32` to the current location.
  :: Set it to the value in the yield block (if the mutator decides to call it).
  :fun ref set_i32 None
    :yields I32 for None // TODO: add a "without interruption" enforcement to the yield signature to ensure that the yield block isn't allowed to jump away.
    None

  :: Allow the mutator the option to assign an `I16` to the current location.
  :: Set it to the value in the yield block (if the mutator decides to call it).
  :fun ref set_i16 None
    :yields I16 for None // TODO: add a "without interruption" enforcement to the yield signature to ensure that the yield block isn't allowed to jump away.
    None

  :: Allow the mutator the option to assign an `I8` to the current location.
  :: Set it to the value in the yield block (if the mutator decides to call it).
  :fun ref set_i8 None
    :yields I8 for None // TODO: add a "without interruption" enforcement to the yield signature to ensure that the yield block isn't allowed to jump away.
    None

  :: Allow the mutator the option to assign an `F64` to the current location.
  :: Set it to the value in the yield block (if the mutator decides to call it).
  :fun ref set_f64 None
    :yields F64 for None // TODO: add a "without interruption" enforcement to the yield signature to ensure that the yield block isn't allowed to jump away.
    None

  :: Allow the mutator the option to assign an `F32` to the current location.
  :: Set it to the value in the yield block (if the mutator decides to call it).
  :fun ref set_f32 None
    :yields F32 for None // TODO: add a "without interruption" enforcement to the yield signature to ensure that the yield block isn't allowed to jump away.
    None

  :: Allow the mutator the option to assign a named value (e.g. an enum member).
  :: Set it to the value in the yield block (if the mutator decides to call it).
  :fun ref set_name None
    :yields String for None // TODO: add a "without interruption" enforcement to the yield signature to ensure that the yield block isn't allowed to jump away.
    None

  :: Allow the mutator the option to assign a UTF-8 string.
  :: Set it to the value in the yield block (if the mutator decides to call it).
  :fun ref set_string None
    :yields String for None // TODO: add a "without interruption" enforcement to the yield signature to ensure that the yield block isn't allowed to jump away.
    None

  :: Allow the mutator the option to assign a sequence of arbitrary bytes.
  :: Set it to the value in the yield block (if the mutator decides to call it).
  :fun ref set_bytes None
    :yields Bytes for None // TODO: add a "without interruption" enforcement to the yield signature to ensure that the yield block isn't allowed to jump away.
    None

  :: Allow the mutator the option to replace a `Bool` at the current location,
  :: passing it the current value as an argument (to use as a reference).
  :: Set the new value from the yield block (if the mutator decides to call it).
  :fun ref replace_bool(value Bool) None
    :yields Bool for None // TODO: add a "without interruption" enforcement to the yield signature to ensure that the yield block isn't allowed to jump away.
    None

  :: Allow the mutator the option to replace a `U64` at the current location,
  :: passing it the current value as an argument (to use as a reference).
  :: Set the new value from the yield block (if the mutator decides to call it).
  :fun ref replace_u64(value U64) None
    :yields U64 for None // TODO: add a "without interruption" enforcement to the yield signature to ensure that the yield block isn't allowed to jump away.
    @set_u64 -> (v | yield v)

  :: Allow the mutator the option to replace a `U32` at the current location,
  :: passing it the current value as an argument (to use as a reference).
  :: Set the new value from the yield block (if the mutator decides to call it).
  :fun ref replace_u32(value U32) None
    :yields U32 for None // TODO: add a "without interruption" enforcement to the yield signature to ensure that the yield block isn't allowed to jump away.
    @set_u32 -> (v | yield v)

  :: Allow the mutator the option to replace a `U16` at the current location,
  :: passing it the current value as an argument (to use as a reference).
  :: Set the new value from the yield block (if the mutator decides to call it).
  :fun ref replace_u16(value U16) None
    :yields U16 for None // TODO: add a "without interruption" enforcement to the yield signature to ensure that the yield block isn't allowed to jump away.
    @set_u16 -> (v | yield v)

  :: Allow the mutator the option to replace a `U8` at the current location,
  :: passing it the current value as an argument (to use as a reference).
  :: Set the new value from the yield block (if the mutator decides to call it).
  :fun ref replace_u8(value U8) None
    :yields U8 for None // TODO: add a "without interruption" enforcement to the yield signature to ensure that the yield block isn't allowed to jump away.
    @set_u8 -> (v | yield v)

  :: Allow the mutator the option to replace an `I64` at the current location,
  :: passing it the current value as an argument (to use as a reference).
  :: Set the new value from the yield block (if the mutator decides to call it).
  :fun ref replace_i64(value I64) None
    :yields I64 for None // TODO: add a "without interruption" enforcement to the yield signature to ensure that the yield block isn't allowed to jump away.
    @set_i64 -> (v | yield v)

  :: Allow the mutator the option to replace an `I32` at the current location,
  :: passing it the current value as an argument (to use as a reference).
  :: Set the new value from the yield block (if the mutator decides to call it).
  :fun ref replace_i32(value I32) None
    :yields I32 for None // TODO: add a "without interruption" enforcement to the yield signature to ensure that the yield block isn't allowed to jump away.
    @set_i32 -> (v | yield v)

  :: Allow the mutator the option to replace an `I16` at the current location,
  :: passing it the current value as an argument (to use as a reference).
  :: Set the new value from the yield block (if the mutator decides to call it).
  :fun ref replace_i16(value I16) None
    :yields I16 for None // TODO: add a "without interruption" enforcement to the yield signature to ensure that the yield block isn't allowed to jump away.
    @set_i16 -> (v | yield v)

  :: Allow the mutator the option to replace an `I8` at the current location,
  :: passing it the current value as an argument (to use as a reference).
  :: Set the new value from the yield block (if the mutator decides to call it).
  :fun ref replace_i8(value I8) None
    :yields I8 for None // TODO: add a "without interruption" enforcement to the yield signature to ensure that the yield block isn't allowed to jump away.
    @set_i8 -> (v | yield v)

  :: Allow the mutator the option to replace an `F64` at the current location,
  :: passing it the current value as an argument (to use as a reference).
  :: Set the new value from the yield block (if the mutator decides to call it).
  :fun ref replace_f64(value F64) None
    :yields F64 for None // TODO: add a "without interruption" enforcement to the yield signature to ensure that the yield block isn't allowed to jump away.
    @set_f64 -> (v | yield v)

  :: Allow the mutator the option to replace an `F32` at the current location,
  :: passing it the current value as an argument (to use as a reference).
  :: Set the new value from the yield block (if the mutator decides to call it).
  :fun ref replace_f32(value F32) None
    :yields F32 for None // TODO: add a "without interruption" enforcement to the yield signature to ensure that the yield block isn't allowed to jump away.
    @set_f32 -> (v | yield v)

  :: Allow the mutator the option to replace a named value (e.g. an enum member)
  :: by passing it the current value as an argument (to use as a reference).
  :: Set the new value from the yield block (if the mutator decides to call it).
  :fun ref replace_name(value String) None
    :yields String for None // TODO: add a "without interruption" enforcement to the yield signature to ensure that the yield block isn't allowed to jump away.
    @set_name -> (v | yield v)

  :: Allow the mutator the option to replace a UTF-8 string value,
  :: passing it the current value as an argument (to use as a reference).
  :: Set the new value from the yield block (if the mutator decides to call it).
  :fun ref replace_string(value String) None
    :yields String for None // TODO: add a "without interruption" enforcement to the yield signature to ensure that the yield block isn't allowed to jump away.
    @set_string -> (v | yield v)

  :: Allow the mutator the option to replace a sequence of arbitrary bytes,
  :: passing it the current value as an argument (to use as a reference).
  :: Set the new value from the yield block (if the mutator decides to call it).
  :fun ref replace_bytes(value Bytes) None
    :yields Bytes for None // TODO: add a "without interruption" enforcement to the yield signature to ensure that the yield block isn't allowed to jump away.
    @set_bytes -> (v | yield v)
