:class ref Array(A)
  :copies Indexable(A) // TODO: should be `:is` instead of `:copies`

  :var _size USize
  :var _space USize
  :var _ptr CPointer(A)'ref
  :new ref from_cpointer(@_ptr, @_size, @_space)
  :new iso iso_from_cpointer(@_ptr, @_size, @_space) // TODO: remove this and use recover instead?
  :new val val_from_cpointer(@_ptr, @_size, @_space) // TODO: remove this and use recover instead?

  :fun ref _ptr_set_null
    @_space = 0
    @_ptr = CPointer(A)._null

  :fun ref _ptr_allocate(space USize)
    @_space = space.next_pow2.at_least(space).at_least(8)
    @_ptr = CPointer(A)._alloc(@_space)

  :fun ref _ptr_reallocate(space USize)
    @_space = space.next_pow2.at_least(space).at_least(8)
    @_ptr = @_ptr._realloc(@_space)

  :new (space USize = 0)
    @_size = 0
    if space > 0 (@_ptr_allocate(space) | @_ptr_set_null)

  :new iso new_iso(space USize = 0) // TODO: use recover instead of this hack
    @_size = 0
    if space > 0 (@_ptr_allocate(space) | @_ptr_set_null)

  :fun size: @_size
  :fun space: @_space
  :fun cpointer(offset = 0) CPointer(A)'tag: @_ptr._offset(offset) // TODO: simply tag as return type; infer CPointer(A) part of it

  :fun is_empty: @_size == 0
  :fun is_not_empty: @_size != 0
  :fun ref clear: @_size = 0, @

  :fun ref truncate(size): @_size = @_size.at_most(size)

  :fun val trim(from USize, to USize = -1)
    to = to.at_most(@_size)
    from = from.at_most(to)
    size = to - from

    space = if to == @_size (
      // If our new final address lines up with the current final address,
      // then we can keep any extra bytes allocated beyond the current size.
      // We'll only trim off the left side.
      @_space - from
    |
      // Otherwise, we can't keep the extra allocated bytes, and therefore
      // the new allocation size is the same as the new occupied size
      size
    )

    ptr = if space == 0 (
      // If the new allocation space is zero, use a null pointer to avoid issue.
      CPointer(A)._null
    |
      // Otherwise, use a pointer offset from the original one to trim the left.
      @_ptr._offset(from)
    )

    @val_from_cpointer(ptr, size, space)

  :fun ref trim_in_place(from USize, to USize = -1)
    to = to.at_most(@_size)
    from = from.at_most(to)
    size = to - from

    if to == @_size (
      // If our new final address lines up with the current final address,
      // then we can keep any extra bytes allocated beyond the current size.
      // We'll only trim off the left side.
      @_space -= from
    |
      // Otherwise, we can't keep the extra allocated bytes, and therefore
      // the new allocation size is the same as the new occupied size
      @_space = size
    )

    @_size = size

    if @_space == 0 (
      // If the new allocation space is zero, use a null pointer to avoid issue.
      @_ptr = CPointer(A)._null
    |
      // Otherwise, use a pointer offset from the original one to trim the left.
      @_ptr = @_ptr._offset(from)
    )

    @

  :: Reserve enough total space for the given number of elements.
  :: The size (number of actual elements present in the array) does not change.

  :fun ref reserve(space USize)
    if @_space < space \
      @_ptr_reallocate(space)
    @

  :: Create a clone of this array, containing references to the same elements
  :: that are held by this array. This is only safe if the references are
  :: aliasable as themselves (with non-unique reference capabilities), so
  :: if the element type isn't aliasable, the cloned array will be empty.

  :fun clone @'iso
    if A <: alias (
      array = @new_iso(@size)
      _ptr_tag CPointer(A)'tag = @_ptr // TODO: this indirection shouldn't be needed
      array._clone_from(_ptr_tag, @size)
      array._size = @size
      --array
    |
      @new_iso(0)
    )

  :fun ref _clone_from(other_ptr CPointer(A), size USize)
    other_ptr._unsafe._copy_to(@_ptr, size)

  :fun "[]!"(index) @->(A'aliased)
    if @size <= index error!
    @_ptr._get_at(index)

  :fun ref "[]=!"(index, value)
    if @size <= index error!
    @_ptr._assign_at(index, --value)

  :fun ref "[]<<=!"(index, value)
    if @size <= index error!
    @_ptr._displace_at(index, --value)

  :fun ref "<<"(value): @push(--value)
  :fun ref push(value)
    @reserve(@_size + 1)
    @_ptr._assign_at(@_size, --value)
    @_size = @_size + 1
    @

  :fun ref pop! A
    @_size = @_size -! 1
    @_ptr._get_at_no_alias(@_size)

  :: Return the first element in the array.
  :: Raises an error if the array is empty.
  :fun first! @->(A'aliased)
    error! if @size == 0
    @_ptr._get_at(0)

  :: Assign the given value to replace the first element in the array.
  :: Raises an error if the array is empty.
  :fun ref "first=!"(value A)
    error! if @size == 0
    @_ptr._assign_at(0, --value)

  :: Return the last element in the array.
  :: Raises an error if the array is empty.
  :fun last! @->(A'aliased)
    @_ptr._get_at(@size -! 1)

  :: Assign the given value to replace the last element in the array.
  :: Raises an error if the array is empty.
  :fun ref "last=!"(value A)
    @_ptr._assign_at(@size -! 1, --value)

  :fun "!="(other): (@ == other).is_false // TODO: move this to the Equatable trait?
  :fun "=="(other Array(A)'box)
    // TODO: optimize for cases when the elements can be pointer-compared by
    // value/identity instead of structural equality (e.g. Array(U8))
    equal_so_far = (@size == other.size)
    index USize = 0
    while equal_so_far && index < @_size (
      equal_so_far = if A <: Equatable(A)'read (
        @_ptr._get_at(index) == other._ptr._get_at(index)
      |
        @_ptr._get_at(index) === other._ptr._get_at(index)
      )
      index = index + 1
    )
    equal_so_far

  :fun ref replace_at!(index)
    :yields A for A
    error! if @size <= index

    new_value = yield @_ptr._get_at_no_alias(index)
    new_value_alias = new_value
    @_ptr._assign_at(index, --new_value)

    new_value_alias

  :: Private implementation of `insert_at!` without the bounds check that
  :: confirms that the insertion index is a valid one.
  ::
  :: Can be called internally by functions which have already proven the
  :: validity of the insertion index.
  :fun ref _insert_at_without_bounds_check(index, value)
    // Make sure the buffer is large enough to hold another element.
    @reserve(@_size + 1)

    // Copy the tail of later elements forward, to make room for the element.
    if @_size > index (
      tail_size = @size - index
      @_ptr._offset(index)._copy_to(@_ptr._offset(index + 1), tail_size)
    )

    // Insert the element and return its alias.
    value_alias = value
    @_ptr._assign_at(index, --value)
    @_size += 1
    value_alias

  :: Insert an element with the given `value` at the given `index`.
  :: Returns an alias of the `value`.
  :: Raises an error if the given `index` is beyond the size of the array.
  ::
  :: Elements at all later indexes will be shifted one index to make room
  :: for the insertion of the new element.
  :fun ref insert_at!(index, value)
    error! if @_size < index
    @_insert_at_without_bounds_check(index, --value)

  :: Delete the element at the given `index`, discarding it.
  :: Raises an error if the given `index` is beyond the size of the array.
  ::
  :: Elements at all later indexes will be shifted one index to fill the hole
  :: left by the element that was deleted.
  ::
  :: If you want to return the removed element, use `remove_at!` instead.
  :fun ref delete_at!(index)
    error! if @size <= index
    tail_size = @size - index - 1

    if tail_size > 0 (
      @_ptr._offset(index + 1)._copy_to(@_ptr._offset(index), tail_size)
    )

    @_size -= 1
    @

  :: Remove the element at the given `index`, returning it.
  :: Raises an error if the given `index` is beyond the size of the array.
  ::
  :: Elements at all later indexes will be shifted one index to fill the hole
  :: left by the element that was removed.
  ::
  :: If you want to discard the removed element, use `delete_at!` instead.
  :fun ref remove_at!(index) A
    error! if @size <= index
    element = @_ptr._get_at_no_alias(index)
    tail_size = @size - index - 1

    if tail_size > 0 (
      @_ptr._offset(index + 1)._copy_to(@_ptr._offset(index), tail_size)
    )

    @_size -= 1
    --element

  :: Remove the first element, returning it.
  :: Raises an error if the array is empty.
  ::
  :: Elements at all later indexes will be shifted one index.
  :fun ref shift!: @remove_at!(0)

  :: Insert an element at the beginning of the array.
  ::
  :: Elements at all later indexes will be shifted one index to make room.
  :fun ref unshift(value)
    // An index of zero is never out of bounds for insertion
    @_insert_at_without_bounds_check(0, --value)

  :fun each_with_index(
    from USize = 0
    to = USize.max_value
    stride USize = 1
  )
    index = from
    while index < to.at_most(@_size) (
      yield (@_ptr._get_at(index), index)
      index += stride
    )
    None

  :fun reverse_each_with_index(
    from = USize.max_value
    to USize = 0
    stride USize = 1
  )
    try (
      index USize = from.at_most(@_size) -! 1
      while index >= to (
        yield (@_ptr._get_at(index), index)
        index = index.at_most(@_size) -! stride
      )
    )
    None

  :fun includes(expected A)
    // TODO: Move to Indexable trait and implement in terms of `each` or `find!`
    // This currently doesn't work due to a bug in type refinement logic.
    // @each -> (value |
    //   if (A <: Equatable(A)'read) (
    //     return True if value == expected
    //   |
    //     return True if value === expected
    //   )
    // )
    // False
    is_found = False
    index USize = 0
    while !is_found && index < @_size (
      is_found = if A <: Equatable(A)'read (
        @_ptr._get_at(index) == expected
      |
        @_ptr._get_at(index) === expected
      )
      index += 1
    )
    is_found

  :is TraceData
  :fun trace_data(trace TraceData.Observer)
    trace.array(identity_digest_of @) -> (
      @each -> (item |
        case A <: (
        | TraceData'read |
          trace.array_element(item)
        | Any'read |
          trace.array_element(TraceData.Untraceable.Maybe[item])
        |
          trace.array_element(TraceData.Untraceable)
        )
      )
    )

  :is TraceData.Mutable
  :fun ref trace_data_mutable(trace TraceData.Mutator)
    trace.array_truncate(identity_digest_of @, @size) -> (s | @truncate(s))
    trace.array(identity_digest_of @, @size) -> (i |
      case (
      | i < @size |
        // If it's within the existing bounds of the array, allow the mutator
        // the option to replace the current value at that index.
        case A <: (
        | Bool | trace.replace_bool(@_ptr._get_at(i)) -> (v | @_ptr._assign_at(i, v))
        | U64 | trace.replace_u64(@_ptr._get_at(i)) -> (v | @_ptr._assign_at(i, v))
        | U32 | trace.replace_u32(@_ptr._get_at(i)) -> (v | @_ptr._assign_at(i, v))
        | U16 | trace.replace_u16(@_ptr._get_at(i)) -> (v | @_ptr._assign_at(i, v))
        | U8 | trace.replace_u8(@_ptr._get_at(i)) -> (v | @_ptr._assign_at(i, v))
        | I64 | trace.replace_i64(@_ptr._get_at(i)) -> (v | @_ptr._assign_at(i, v))
        | I32 | trace.replace_i32(@_ptr._get_at(i)) -> (v | @_ptr._assign_at(i, v))
        | I16 | trace.replace_i16(@_ptr._get_at(i)) -> (v | @_ptr._assign_at(i, v))
        | I8 | trace.replace_i8(@_ptr._get_at(i)) -> (v | @_ptr._assign_at(i, v))
        | F64 | trace.replace_f64(@_ptr._get_at(i)) -> (v | @_ptr._assign_at(i, v))
        | F32 | trace.replace_f32(@_ptr._get_at(i)) -> (v | @_ptr._assign_at(i, v))
        | String'val | trace.replace_string(@_ptr._get_at(i)) -> (v | @_ptr._assign_at(i, v))
        | Bytes'val | trace.replace_bytes(@_ptr._get_at(i)) -> (v | @_ptr._assign_at(i, v))
        | String'box | trace.set_string -> (v | @_ptr._assign_at(i, v.clone))
        | Bytes'box | trace.set_bytes -> (v | @_ptr._assign_at(i, v.clone))
        | TraceData.Mutable | @_ptr._get_at(i).trace_data_mutable(trace)
        | trace.array_index_cannot_be_modified
        )
      | i == @size |
        // If it's just one element beyond the bounds of the array, allow the
        // mutator the option to set a new value to push onto the end.
        case A <: (
        | None | trace.set_none -> (v | @ << None)
        | Bool | trace.set_bool -> (v | @ << Bool[v])
        | U64 | trace.set_u64 -> (v | @ << U64[v])
        | U32 | trace.set_u32 -> (v | @ << U32[v])
        | U16 | trace.set_u16 -> (v | @ << U16[v])
        | U8 | trace.set_u8 -> (v | @ << U8[v])
        | I64 | trace.set_i64 -> (v | @ << I64[v])
        | I32 | trace.set_i32 -> (v | @ << I32[v])
        | I16 | trace.set_i16 -> (v | @ << I16[v])
        | I8 | trace.set_i8 -> (v | @ << I8[v])
        | F64 | trace.set_f64 -> (v | @ << F64[v])
        | F32 | trace.set_f32 -> (v | @ << F32[v])
        | String'val | trace.set_string -> (v | @ << v)
        | Bytes'val | trace.set_bytes -> (v | @ << v)
        | String'box | trace.set_string -> (v | @ << v.clone)
        | Bytes'box | trace.set_bytes -> (v | @ << v.clone)
        | TraceData.Mutable |
          if A <: _EmptyConstructableRef (
            // If the element is constructable with no arguments, that's the
            // only case where we can make a new one and push it onto the array.
            new = A.new
            @ << new
            new.trace_data_mutable(trace)
          |
            // Otherwise we can't mutate there.
            trace.array_index_is_invalid
          )
        |
          // If it's not an element type we can support, report that.
          trace.array_index_cannot_be_modified
        )
      |
        // If it's well beyond the bounds of the array, we can't mutate there.
        trace.array_index_is_invalid
      )
    )

  :: Return a copy of the array that has its elements sorted by value.
  :: If the element type is not aliasable, or not Comparable, it will be empty.

  :fun sort: @clone.sort_in_place

  :: Mutate the array to sort its elements by value.
  :: If the element type is not Comparable, there is no way to sort the values,
  :: so the array will be emptied of all elements, in order to make the
  :: issue as obvious as possible while not penalizing proper usage.

  :fun ref sort_in_place
    if @_sort_in_place(0, @size.isize - 1) (@ | @clear)

  :fun ref _sort_in_place(lo_pivot ISize, hi_pivot ISize) Bool // TODO: should be actually private
    if A <: Comparable(A)'read (
      if lo_pivot < hi_pivot (
        // Choose the outermost elements as pivots, ensuring that the higher
        // of the two is on the right, swapping to make it so if needed.
        lo_pivot_value = @_ptr._get_at(lo_pivot.usize)
        hi_pivot_value = @_ptr._get_at(hi_pivot.usize)
        if lo_pivot_value > hi_pivot_value (
          @_ptr._assign_at(lo_pivot.usize, hi_pivot_value)
          @_ptr._assign_at(hi_pivot.usize, lo_pivot_value)
          lo_pivot_value = @_ptr._get_at(lo_pivot.usize)
          hi_pivot_value = @_ptr._get_at(hi_pivot.usize)
        )

        // Create our three moving cursors inside the pivot range:
        // `lo` moves upward starting from the bottom of the range
        // `hi` moves downward starting from the top of the range
        // `scan` moves upward between the two
        lo = lo_pivot + 1, hi = hi_pivot - 1
        scan = lo

        // Scan the range, swapping as necessary.
        while scan <= hi (scan_value = @_ptr._get_at(scan.usize)
          case (
          // When we scan a value less than our pivot, swap the value downward.
          | scan_value < lo_pivot_value |
            @_ptr_swap(scan.usize, lo.usize) // TODO: these swap operations can be optimized by leveraging earlier pointer reads, though it will be more verbose
            lo += 1

          // When we scan a value greater than our pivot, swap the value upward.
          | scan_value >= hi_pivot_value |
            // First move `hi` cursor until it's greater than the `hi_pivot`.
            while @_ptr._get_at(hi.usize) > hi_pivot_value && scan < hi (
              hi -= 1
            )

            // Swap the scanned value upward.
            @_ptr_swap(scan.usize, hi.usize) // TODO: these swap operations can be optimized by leveraging earlier pointer reads, though it will be more verbose
            hi -= 1

            // Possibly swap the just-swapped value downward if it needs to be.
            // Note that `scan_value` here is the previous `hi` value.
            scan_value = @_ptr._get_at(scan.usize)
            if scan_value < lo_pivot_value (
              @_ptr_swap(scan.usize, lo.usize) // TODO: these swap operations can be optimized by leveraging earlier pointer reads, though it will be more verbose
              lo += 1
            )
          )
          scan += 1
        )

        // Re-expand to the true range now that we've finished scanning.
        lo -= 1
        hi += 1

        // Swap the pivots to their final positions.
        @_ptr_swap(lo_pivot.usize, lo.usize) // TODO: these swap operations can be optimized by leveraging earlier pointer reads, though it will be more verbose
        @_ptr_swap(hi_pivot.usize, hi.usize) // TODO: these swap operations can be optimized by leveraging earlier pointer reads, though it will be more verbose

        // Recursively sort the three sub-ranges left inside this range.
        @_sort_in_place(lo_pivot, lo - 1)
        @_sort_in_place(lo + 1, hi - 1)
        @_sort_in_place(hi + 1, hi_pivot)
      )
      True
    |
      False // return false if the elements are not Comparable
    )

  :fun ref swap!(index_1, index_2)
    error! if @size <= index_1
    error! if @size <= index_2
    @_ptr_swap(index_1, index_2)

  :fun ref _ptr_swap(index_1 USize, index_2 USize)
    value_1 = @_ptr._get_at_no_alias(index_1)
    value_2 = @_ptr._get_at_no_alias(index_2)
    @_ptr._assign_at(index_1, --value_2)
    @_ptr._assign_at(index_2, --value_1)
    None
