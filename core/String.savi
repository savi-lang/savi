:class val String
  :is Comparable(String'box)
  :is IntoString

  :var _size USize
  :var _space USize
  :var _ptr CPointer(U8)'ref
  :new ref from_cpointer(@_ptr, @_size, @_space)
  :new iso iso_from_cpointer(@_ptr, @_size, @_space) // TODO: remove this and use recover instead?
  :new val val_from_cpointer(@_ptr, @_size, @_space) // TODO: remove this and use recover instead?
  :fun cpointer CPointer(U8): @_ptr
  :fun hash: _Unsafe.RapidHash._run(@_ptr, @_size)
  :fun size: @_size
  :fun space: @_space

  :fun ref clear: @_size = 0, @

  :fun ref _ptr_set_null
    @_space = 0
    @_ptr = CPointer(U8)._null

  :fun ref _ptr_allocate(space USize)
    @_space = space.next_pow2.at_least(space).at_least(8)
    @_ptr = CPointer(U8)._alloc(@_space)

  :fun ref _ptr_reallocate(space USize)
    @_space = space.next_pow2.at_least(space).at_least(8)
    @_ptr = @_ptr._realloc(@_space)

  :new ref (space USize = 0)
    @_size = 0
    if space > 0 (@_ptr_allocate(space) | @_ptr_set_null)

  :new iso new_iso(space USize = 0) // TODO: use recover instead of this hack
    @_size = 0
    if space > 0 (@_ptr_allocate(space) | @_ptr_set_null)

  :new val from_array(data Array(U8)'val)
    @_size = data.size
    @_space = data.space
    @_ptr = data.cpointer._unsafe

  :new val from_bytes(data Bytes)
    @_size = data.size
    @_space = data.space
    @_ptr = data.cpointer._unsafe

  :fun val as_array: Array(U8).val_from_cpointer(@_ptr._unsafe, @_size, @_space)
  :fun val as_bytes: Bytes.from_string(@)

  :: Take the underlying buffer and return a new isolated `String`,
  :: leaving this original `String` instance empty.
  :fun ref take_buffer String'iso
    new = @iso_from_cpointer(@_ptr, @_size, @_space)
    @_size = 0
    @_ptr_set_null
    --new

  :is TraceData
  :fun trace_data(trace TraceData.Observer)
    trace.primitive_string(@)

  :fun into_string_space: @space

  :fun into_string(out String'ref) None
    if @_size > 0 (
      new_size = out._size + @_size
      out.reserve(new_size)
      out._clone_from(@_ptr._unsafe_val, @_size, out._size)
      out._size = new_size
    )

  :fun "=="(other String'box)
    (@_size == other._size) && (@_ptr._compare(other._ptr, @_size) == 0)

  :: Returns True if this String starts with a substring equal to the other.
  :: Otherwise, returns False.
  :fun starts_with(other String'box)
    (@_size >= other.size) && (@_ptr._compare(other._ptr, other.size) == 0)

  :: Returns True if this String ends with a substring equal to the other.
  :: Otherwise, returns False.
  :fun ends_with(other String'box)
    (@_size >= other.size) && (
      @_ptr._offset(@_size - other.size)._compare(other._ptr, other.size) == 0
    )

  :: Returns True if this String at the given offset is equivalent to
  :: the given other String at the given other_offset, for at least as long
  :: as the given number of bytes to be compared.
  :fun is_byte_slice_equal(
    offset USize
    other Bytes'box
    other_offset USize
    num_bytes USize
  )
    (num_bytes <= (@size - offset))
    && (num_bytes <= (other.size - other_offset))
    && (
      ptr = @_ptr._offset(offset)
      other_ptr = other._ptr._offset(other_offset)
      ptr._compare(other_ptr, num_bytes) == 0
    )

  :fun is_empty:     @size == 0
  :fun is_not_empty: @size != 0

  :fun format: String.Format._new(@)

  :fun clone @'iso
    copy = @new_iso(@size)
    _ptr_tag CPointer(U8)'tag = @_ptr // TODO: this indirection shouldn't be needed
    copy._clone_from(_ptr_tag, @size)
    copy._size = @size
    --copy // TODO: auto-consume at end of the function?

  :fun ref _clone_from(other_ptr CPointer(U8), size USize, to_offset = 0)
    other_ptr._unsafe._copy_to(@_ptr._offset(to_offset), size)

  :fun includes(other): try (@offset_of!(other), True | False)

  :fun offset_of!(other String'box, start_offset USize = 0)
    found Bool = False
    offset = start_offset
    other_first = other.byte_at!(0) // cache and error out if the other is empty
    while !found && offset < @_size (
      if @_ptr._get_at(offset) == other_first (
        found = (@_ptr._offset(offset)._compare(other._ptr, other._size) == 0)
      )
      offset = offset + 1
    )
    if !found error!
    offset - 1

  :: Returns true if the string is null-terminated and safe to pass to an FFI
  :: function that doesn't accept a size argument, expecting a null-terminator.
  ::
  :: This method checks that there is a null byte just after the final position
  :: of populated bytes in the string, but does not check for other null bytes
  :: which may be present earlier in the content of the string.
  ::
  :: Use the cstring method to get a null-terminated version of the string.

  :fun is_null_terminated: (@_space > @_size) && (@_ptr._get_at(@_size) == 0)

  :: Returns a CPointer to a null-terminated version of this string,
  :: copying the string if necessary to get a null-terminated pointer.
  ::
  :: Call the cpointer method instead when you don't need a null terminator
  :: (that is, when the FFI function you are calling has a size argument).

  :fun cstring CPointer(U8)
    ret CPointer(U8)'tag = @_ptr
    if @is_null_terminated (return ret)

    ptr = @_ptr._alloc(@_size + 1)
    @_ptr._copy_to(ptr._unsafe, @_size)
    ptr._assign_at(@_size, 0)
    ret = ptr // TODO: remove this type hint - it shouldn't be needed
    ret

  :: Ensure enough capacity is allocated for the given space, in bytes.
  :: The size (number of actual bytes present in the string) does not change.

  :fun ref reserve(space USize)
    if @_space < space @_ptr_reallocate(space)
    @

  :fun byte_at!(index USize) U8
    if @size <= index error!
    @_ptr._get_at(index)

  :fun "[]!"(index): @char_at!(index)

  :: Return the UTF8-encoded Unicode codepoint starting at the given byte index.
  :: Raises an error if the given index is out of bounds.
  :: Returns 0xfffd (Unicode "Replacement Character") if the given byte index
  :: is not pointing to the start of a well-formed UTF-8-encoded codepoint.
  :fun char_at!(index USize) U32
    if @size <= index error!

    state = String.DecodeUTF8.State.new
    try (
      @each_byte(index, index + 4) -> (byte |
        state = String.DecodeUTF8.read_byte!(byte, state)
        return state.codepoint if state.is_done
      )
      0xfffd
    |
      0xfffd
    )

  :: Return a shared portion of this string, covering `from` until `to`,
  :: with negative values in `from` and `to` representing indexes counting
  :: backward from the end of the string.
  ::
  :: Both the original and the new string are immutable, as they share memory.
  :: The operation does not allocate a new string pointer nor copy elements.

  :fun val trim(from USize = 0, to = USize.max_value)
    start = from
    finish = to.at_most(@size)

    if start < @_size && start < finish (
      @_slice(start, finish)
    |
      @val_from_cpointer(@_ptr._null, 0, 0)
    )

  :fun ref trim_in_place(from USize = 0, to = USize.max_value)
    start = from
    finish = to.at_most(@size)

    if start < @_size && start < finish (
      @_size = finish - start
      @_ptr = @_ptr._offset(start)
    |
      @_size = 0
    )
    @

  :fun ref push_byte(byte U8)
    @reserve(@_size + 1)
    @_ptr._assign_at(@_size, byte)
    @_size += 1
    @

  :fun each_byte(from USize = 0, to = USize.max_value, stride USize = 1)
    @each_byte_with_index(from, to, stride) -> (value, index |
      yield value
    )

  // TODO: Move to be on a new `Indexable.Bytes` trait?
  :fun each_byte_with_index(from USize = 0, to = USize.max_value, stride USize = 1)
    index = from
    while index < to.at_most(@_size) (
      yield (@_ptr._get_at(index), index)
      index += stride
    )
    None

  // TODO: Move to be on a new `Indexable.Bytes` trait?
  :fun reverse_each_byte_with_index(
    from = USize.max_value
    to USize = 0
    stride USize = 1
  )
    try (
      index USize = from.at_most(@_size) -! 1
      while index >= to (
        yield (@_ptr._get_at(index), index)
        index = index.at_most(@_size) -! stride
      )
    )
    None

  :: Starting from the given byte index and continuing up to the given end,
  :: yield each UTF8-encoded Unicode codepoint, its starting byte index,
  :: and its byte width (the number of bytes that were used to encode it).
  ::
  :: When multibyte codepoints are observed, the yielded byte index will skip
  :: some sequential numbers and the yielded byte width will be greater than 1.
  ::
  :: When invalid UTF8 encoded bytes are observed, (whether because the String
  :: is invalid UTF8, or the starting byte index was pointing to the middle
  :: of a multibyte codepoint rather than its start), the value 0xfffd,
  :: known as a Unicode "Replacement character" will be yielded for those bytes.
  ::
  :: If the given byte range is outside of the bounds of the actual byte buffer,
  :: then the start and/or end will be silently truncated to the nearest bound.
  ::
  :: If no byte range parameters are given, the entire String will be read.
  :fun each_char_with_index_and_width(from USize = 0, to = USize.max_value)
    index = from
    start_index = index
    state = String.DecodeUTF8.State.new

    while index < to.at_most(@_size) (
      byte = @_ptr._get_at(index)
      index = index + 1

      try (
        state = String.DecodeUTF8.read_byte!(byte, state)

        if state.is_done (
          yield (state.codepoint, start_index, index - start_index)
          start_index = index
        )
      |
        yield (U32[0xfffd], start_index, index - start_index)
        start_index = index
        state = String.DecodeUTF8.State.new
      )
    )
    if !state.is_done (
      yield (U32[0xfffd], start_index, index - start_index)
    )
    @

  :: Starting from the given byte index and going backwards to the given end,
  :: yield each UTF8-encoded Unicode codepoint, its starting byte index,
  :: and its byte width (the number of bytes that were used to encode it).
  ::
  :: When multibyte codepoints are observed, the yielded byte index will skip
  :: some sequential numbers and the yielded byte width will be greater than 1.
  ::
  :: When invalid UTF8 encoded bytes are observed, (whether because the String
  :: is invalid UTF8, or the starting byte index was pointing to the middle
  :: of a multibyte codepoint rather than its start), the value 0xfffd,
  :: known as a Unicode "Replacement character" will be yielded for those bytes.
  ::
  :: If the given byte range is outside of the bounds of the actual byte buffer,
  :: then the start and/or end will be silently truncated to the nearest bound.
  ::
  :: If no byte range parameters are given, the entire String will be read.
  :fun reverse_each_char_with_index_and_width(from USize = USize.max_value, to = 0)
    index = from.at_most(@_size)
    finish_index = index
    state = String.DecodeUTF8.ReverseState.new

    while index > 0 (
      index -= 1
      byte = @_ptr._get_at(index)

      try (
        state = String.DecodeUTF8.reverse_read_byte!(byte, state)

        if state.is_done (
          yield (state.codepoint, index, finish_index - index)
          index = index.at_most(@_size)
          finish_index = index
        )
      |
        yield (U32[0xfffd], index, finish_index - index)
        index = index.at_most(@_size)
        finish_index = index
        state = String.DecodeUTF8.ReverseState.new
      )
    )
    if !state.is_done (
      yield (U32[0xfffd], index, finish_index - index)
    )
    @

  :fun ref "<<"(other String'box)
    if other._size > 0 (
      new_size = @_size + other._size
      if other.is_null_terminated (
        @reserve(new_size + 1)
        other._ptr._copy_to(@_ptr._offset(@_size), other.size + 1)
      |
        @reserve(new_size)
        other._ptr._copy_to(@_ptr._offset(@_size), other.size)
      )
      @_size = new_size
    )
    @

  :fun ref concat_byte_slice(
    other String'box
    from USize = 0
    to = USize.max_value
  )
    start = from
    finish = to.at_most(other.size)

    if start < other._size && start < finish (
      size = finish - start
      other._ptr._offset(start)._copy_to(@_ptr._offset(@_size), size)
      @_size += size
    )

  :fun ref push_utf8(value U32)
    _UTF8Encoder.encode(value) -> (byte_count, byte_1, byte_2, byte_3, byte_4 |
      i = @_size
      @_size = @_size + byte_count
      @reserve(@_size)
      @_ptr._assign_at(i, byte_1)
      if byte_count > 1 (
        @_ptr._assign_at(i + 1, byte_2)
        if byte_count > 2 (
          @_ptr._assign_at(i + 2, byte_3)
          if byte_count > 3 (
            @_ptr._assign_at(i + 3, byte_4)
          )
        )
      )
    )
    @

  :: Return a new string consisting of the original string copied `n` times.
  :fun "*"(times USize)
    if times > 0 (
      ptr = @_ptr._alloc(@size * times)
      size USize = 0

      while times > 0 (times -= 1
        @_ptr._copy_to(ptr._offset(size), @size)
        size += @size
      )

      @val_from_cpointer(ptr, size, size)
    |
      @val_from_cpointer(@_ptr._null, 0, 0)
    )

  :fun val split(split_byte U8) Array(String)'iso // TODO: a byte shouldn't be the only thing we can split by...
    result Array(String)'iso = []
    @each_split(split_byte) -> (s | result << s)
    --result

  :fun val each_split(split_byte U8) // TODO: a byte shouldn't be the only thing we can split by...
    :yields String
    start USize = 0
    while start < @_size (
      try (
        split_pos = @_index_of!(split_byte, start)
        yield @_slice(start, split_pos)
        start = split_pos + 1
      |
        yield @_slice(start, @_size)
        break
      )
    )
    @

  :fun val split2!(split_byte U8) Pair(String)
    pos = @_index_of!(split_byte)
    Pair(String).new(@_slice(0, pos), @_slice(pos + 1, @_size))

  :: Returns the integer index of the first occurence of the given character `char`.
  :fun val _index_of!(char U8, offset USize = 0) USize
    idx = offset
    while idx < @_size (
      return idx if @_ptr._get_at(idx) == char
      idx += 1
    )
    error!

  :fun val _slice(start USize, finish USize)
    size = finish - start
    @val_from_cpointer(@_ptr._offset(start), size, size)

  :fun "<"(other String'box)
    shared_size = @size.at_most(other.size)
    index USize = 0
    result = False
    try (
      while index < shared_size (
        a = @_ptr._get_at(index)
        b = other._ptr._get_at(index)
        case (
        | a < b | result = True,  error! // TODO: use break or early return instead of error
        | a > b | result = False, error! // TODO: use break or early return instead of error
        )
        index = index + 1
      )
      result = @size < other.size
    )
    result

  :fun "<="(other String'box)
    shared_size = @size.at_most(other.size)
    index USize = 0
    result = False
    try (
      while index < shared_size (
        a = @_ptr._get_at(index)
        b = other._ptr._get_at(index)
        case (
        | a < b | result = True,  error! // TODO: use break or early return instead of error
        | a > b | result = False, error! // TODO: use break or early return instead of error
        )
        index = index + 1
      )
      result = @size <= other.size
    )
    result

  :fun parse_i64! I64 // TODO: Use something like Crystal's Char::Reader instead?
    output I64 = 0
    possible_negation I64 = 1
    @each_byte_with_index -> (byte, index |
      case (
      | byte == '+' && index == 0 | // do nothing
      | byte == '-' && index == 0 | possible_negation = -1
      | byte >= '0' && byte <= '9' | output = output * 10 + (byte - '0').i64
      | error!
      )
    )
    output * possible_negation

  :fun parse_f64! F64 // TODO: Use something like Crystal's Char::Reader instead?
    // TODO: Avoid FFI and use a pure Savi `strtod` implementation.
    start_pointer = @cstring
    end_pointer = CPointer(U8).null
    value = _FFI.strtod(start_pointer, stack_address_of_variable end_pointer)
    error! if value == 0 && end_pointer.address == start_pointer.address
    error! if end_pointer.address != start_pointer.address + @size
    value

  :fun substring(from USize, to USize = 0) String'iso
    if to == 0 || to > @_size (
      to = @_size
    )
    if from < to (
      new_size = to - from
      new_alloc = new_size.next_pow2
      new_ptr = @_ptr._alloc(new_alloc)
      @_ptr._offset(from)._unsafe._copy_to(new_ptr, new_size)
      @iso_from_cpointer(new_ptr, new_size, new_alloc)
    |
      String.new_iso
    )

  :: Replace every occurrence of the given `old` substring with the given `new`.
  :: The existing string is modified in-place.
  ::
  :: No new internal buffer is allocated if the length of the `new` substring
  :: is less than or equal to the length of the `old` substring.
  :fun ref replace_all(old String'box, new String'box) @
    // Get the offsets of all occurrences of the old string.
    // TODO: It should be possible to avoid allocating this array (and lazily
    // find each offset one at a time), at least in the particular cases
    // where the `new` substring is equal or less than the `old` one.
    // For now we keep it here just to keep things easier to read,
    // but if somebody's hot path needed this to be faster we could try it.
    offsets Array(USize) = []
    try (
      last_offset USize = 0
      while True (
        found_offset = @offset_of!(old, last_offset)
        offsets << found_offset
        last_offset = found_offset + old.size
      )
    )
    return @ if offsets.is_empty

    case (
    | new.size == old.size |
      // If the new string is the same size as the old string, we can
      // just replace each occurrence of the old string with the new string.
      // We don't need to move any surrounding chunks around.
      if new.is_not_empty (
        offsets.each -> (offset |
          new._ptr._unsafe._copy_to(@_ptr._offset(offset), new.size)
        )
      )
    | new.size < old.size |
      // If the new string is shorter than the old string, we need to
      // shift chunks toward the left, starting from the left side.
      new_size_delta = new.size - old.size
      offsets.each_with_index -> (source_offset, index |
        // Compensate for the size difference between the old and new string.
        offset_delta = new_size_delta * index
        dest_offset = source_offset + offset_delta

        // Replace (part of) the old string with the new string.
        if new.is_not_empty (
          new._ptr._unsafe._copy_to(@_ptr._offset(dest_offset), new.size)
        )

        // Shift the chunk to the left.
        chunk_source_offset = source_offset + old.size
        chunk_source_offset_final = try (offsets[index + 1]! | @_size)
        chunk_size = chunk_source_offset_final - chunk_source_offset
        if chunk_size.is_nonzero (
          chunk_dest_offset = dest_offset + new.size
          @_ptr._offset(chunk_source_offset)._unsafe._copy_to(
            @_ptr._offset(chunk_dest_offset)
            chunk_size
          )
        )
      )
      @_size += new_size_delta * offsets.size

    | // Otherwise, we know that `new.size > old.size`.
      // The overall string is going to get larger, so we need to reserve space.
      new_size_delta = new.size - old.size
      @reserve(@_size + new_size_delta * offsets.size)

      // If the new string is longer than the old string, we need to
      // shift the data to the right to make room for the new string, starting
      // from the right side (so we don't overwrite data we haven't copied yet).
      offsets.reverse_each_with_index -> (source_offset, index |
        // Compensate for the size difference between the old and new string.
        offset_delta = new_size_delta * index
        dest_offset = source_offset + offset_delta

        // Shift the chunk to the right.
        chunk_source_offset = source_offset + old.size
        chunk_source_offset_final = try (offsets[index + 1]! | @_size)
        chunk_size = chunk_source_offset_final - chunk_source_offset
        if chunk_size.is_nonzero (
          chunk_dest_offset = dest_offset + new.size
          @_ptr._offset(chunk_source_offset)._unsafe._copy_to(
            @_ptr._offset(chunk_dest_offset)
            chunk_size
          )
        )

        // Copy the new string into its place, before the chunk.
        if new.is_not_empty (
          new._ptr._unsafe._copy_to(@_ptr._offset(dest_offset), new.size)
        )
      )
      @_size += new_size_delta * offsets.size
    )
    @

  :fun non join(others Array(String)'box, separator = "") String'iso
    res = String.new_iso
    others.each_with_index -> (other, index |
      res << other
      if index != others.size - 1 res << separator
    )
    --res

  :: Return the index of the first non-whitespace character in the string,
  :: starting from the given `start` index (zero if none given).
  :: If the string is empty or contains only whitespace, returns the total size.
  ::
  :: Use this as an argument for a call to `trim` or `trim_in_place`
  :: to help trim leading whitespace from the string.
  :fun leading_whitespace_index(start USize = 0) USize
    @each_byte_with_index(start) -> (byte, index |
      if (byte > '\r' || byte < '\t') && byte != ' ' (
        return index
      )
    )
    @_size

  :: Return the index just after the first non-whitespace character before
  :: the end of the string (or the given `end` index, if given)
  :: If the string is empty or contains only whitespace, returns zero.
  ::
  :: Use this as an argument for a call to `trim` or `trim_in_place`
  :: to help trim trailing whitespace from the string.
  :fun trailing_whitespace_index(end = USize.max_value) USize
    @reverse_each_byte_with_index(end) -> (char, index |
      if (char > '\r' || char < '\t') && char != ' ' (
        return index + 1
      )
    )
    0

:: Encode the code point into UTF-8. It returns a tuple with the size of the
:: encoded data and then the data.
:module _UTF8Encoder
  :fun encode(value U32)
    :yields (USize, U8, U8, U8, U8)
    case value < (
    | 0x80 |
      yield (1, value.u8, 0, 0, 0)
    | 0x800 |
      yield (2
        value.bit_shr(6).bit_or(0xc0).u8
        value.bit_and(0x3f).bit_or(0x80).u8
        0
        0
      )
    | 0xd800 |
      yield (3
        value.bit_shr(12).bit_or(0xe0).u8
        value.bit_shr(6).bit_and(0x3f).bit_or(0x80).u8
        value.bit_and(0x3f).bit_or(0x80).u8
        0
      )
    | 0xe000 |
      // UTF-16 surrogate pairs are not allowed.
      yield (3, 0xef, 0xbf, 0xbd, 0)
    | 0x10000 |
      yield (3
        value.bit_shr(12).bit_or(0xe0).u8
        value.bit_shr(6).bit_and(0x3f).bit_or(0x80).u8
        value.bit_and(0x3f).bit_or(0x80).u8
        0
      )
    | 0x110000 |
      yield (4
        value.bit_shr(18).bit_or(0xf0).u8
        value.bit_shr(12).bit_and(0x3f).bit_or(0x80).u8
        value.bit_shr(6).bit_and(0x3f).bit_or(0x80).u8
        value.bit_and(0x3f).bit_or(0x80).u8
      )
    |
      // Code points beyond 0x10ffff are not allowed.
      yield (3, 0xef, 0xbf, 0xbd, 0)
    )
