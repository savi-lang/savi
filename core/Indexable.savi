:: An collection of elements of type A that can be accessed via numeric index.
:trait box Indexable(A)
  :fun size USize
  :fun "[]!"(index USize) (@->A)'aliased

  //--

  :fun each_with_index(
    from USize = 0
    to = USize.max_value
    stride USize = 1
  ) None
    :yields ((@->A)'aliased, USize)
    index = from
    to = to.at_most(@size)
    stride = stride.at_least(1)
    while index < to (
      try (
        value = @[index]!
        yield (--value, index)
      )
      index = try (index +! stride | return)
    )

  :fun each(
    from USize = 0
    to = USize.max_value
    stride USize = 1
  )
    @each_with_index(from, to, stride) -> (value, index |
      yield value
    )

  :fun has_any(
    from USize = 0
    to = USize.max_value
    stride USize = 1
  ) Bool
    :yields for Bool // TODO: this type hint shouldn't be needed
    @each(from, to, stride) -> (value |
      return True if (yield value)
    )
    False

  :fun has_all(
    from USize = 0
    to = USize.max_value
    stride USize = 1
  ) Bool
    :yields for Bool // TODO: this type hint shouldn't be needed
    @each(from, to, stride) -> (value |
      return False unless (yield value)
    )
    True

  :fun find!(
    from USize = 0
    to = USize.max_value
    stride USize = 1
  ) (@->A)'aliased
    :yields for Bool // TODO: this type hint shouldn't be needed
    @each(from, to, stride) -> (value |
      return value if (yield value)
    )
    error!

  :fun find_index!(
    from USize = 0
    to = USize.max_value
    stride USize = 1
  ) USize
    :yields for Bool // TODO: this type hint shouldn't be needed
    @each_with_index(from, to, stride) -> (value, index |
      return index if (yield value)
    )
    error!

  //--

  :fun reverse_each_with_index(
    from = USize.max_value
    to USize = 0
    stride USize = 1
  ) None
    :yields ((@->A)'aliased, USize)
    index = from.at_most(try (@size -! 1 | return))
    stride = stride.at_least(1)
    while index >= to (
      try (
        value = @[index]!
        yield (--value, index)
      )
      index = try (index -! stride | return)
    )

  :fun reverse_each(
    from = USize.max_value
    to USize = 0
    stride USize = 1
  )
    @reverse_each_with_index(from, to, stride) -> (value, index |
      yield value
    )

  :fun reverse_find!(
    from = USize.max_value
    to USize = 0
    stride USize = 1
  ) (@->A)'aliased
    :yields for Bool // TODO: this type hint shouldn't be needed
    @reverse_each(from, to, stride) -> (value |
      return value if (yield value)
    )
    error!

  :fun reverse_find_index!(
    from = USize.max_value
    to USize = 0
    stride USize = 1
  ) USize
    :yields for Bool // TODO: this type hint shouldn't be needed
    @reverse_each_with_index(from, to, stride) -> (value, index |
      return index if (yield value)
    )
    error!

  //--

  :fun first! @->(A'aliased)
    @[0]!

  :fun last! @->(A'aliased)
    @reverse_each_with_index -> (value, index |
      return value
      None // TODO: this should not be needed
    )
    error!

  //--

  :fun select(
    from USize = 0
    to = USize.max_value
    stride USize = 1
  )
    :yields for Bool // TODO: this type hint shouldn't be needed
    // TODO: allow collecting into an externally supplied object?
    // TODO: allow the caller to specify space?
    new_array = Array((@->A)'aliased).new
    @each(from, to, stride) -> (value |
      if (yield value) new_array << value
    )
    new_array

  :fun reject(
    from USize = 0
    to = USize.max_value
    stride USize = 1
  )
    :yields for Bool // TODO: this type hint shouldn't be needed
    // TODO: allow collecting into an externally supplied object?
    // TODO: allow the caller to specify space?
    new_array = Array((@->A)'aliased).new
    @each(from, to, stride) -> (value |
      if (yield value).is_false new_array << value
    )
    new_array
