:class val Env
  :let out: Env.OutStream._out
  :let err: Env.OutStream._err
  :let args Array(String'val)
  :let vars Env.Vars
  :let root: Env.Root._new

  :: Create an instance of `Env`. This is private for security reasons.
  ::
  :: That is, the `Env` object capability is the root of trust and authority
  :: for an application, and the trust model relies on it being unforgeable,
  :: with the only instance of it being given out to the `Main` actor,
  :: which can then use it or distribute it (or as a better pattern,
  :: distribute more limited authority objects derived from it) as needed.
  :new val _create(
    argc I32
    argv CPointer(CPointer(U8)'ref)'ref
    envp CPointer(CPointer(U8)'ref)'ref
  )
    @args = []
    i = USize[0]
    while argc > 0 (
      arg = argv._get_at(i)
      len = _FFI.strlen(arg).usize
      @args.push(String.val_from_cpointer(arg, len, len))
      argc -= 1
      i += 1
    )

    @vars = Env.Vars._from_envp(envp)

  :fun "exit_code="(value)
    _FFI.pony_exitcode(value)

:struct val Env.Root
  :let ticket_issuer Env.Root.TicketIssuer
  :new val _new // private constructor for security
    @ticket_issuer = Env.Root.TicketIssuer._new

:struct val Env.Vars
  :let _vars Array(Pair(String))

  :new val _from_envp(envp CPointer(CPointer(U8)'ref)'ref)
    @_vars = []
    if envp.is_not_null (
      while True (
        arg = envp._get_at(0)
        break if arg.is_null

        try (
          len = _FFI.strlen(arg).usize
          pair = String.val_from_cpointer(arg, len, len).split2!('=')
          @_vars.push(pair)
        )

        envp = envp._offset(1)
      )
    )

  :fun each_pair
    :yields (String'val, String'val) for None
    @_vars.each_with_index -> (pair, _i |
      yield (pair.key, pair.value)
    )

  :fun "[]"(needle String) (String | None)
    @each_pair -> (key, value |
      return value if needle == key
    )
    None

  :fun "[]!"(needle String) String
    @[needle].as!(String)

:actor Env.OutStream
  :let _stream CPointer(None)'ref
  :new _out: @_stream = _FFI.pony_os_stdout
  :new _err: @_stream = _FFI.pony_os_stderr

  :: Write the given string to the stream, followed by a newline character.
  :be print(data String)
    _FFI.pony_os_std_print(@_stream, data.cpointer, data.size)

  :: Write the given string to the stream, without a newline character.
  :be write(data String)
    _FFI.pony_os_std_write(@_stream, data.cpointer, data.size)

  :: Write all of the given byte chunks to the stream.
  :be write_chunks(chunks Array(Bytes)'val)
    chunks.each -> (data |
      _FFI.pony_os_std_write(@_stream, data.cpointer, data.size)
    )

  :: Ensure that all buffered data is flushed to the output stream.
  :be flush
    _FFI.pony_os_std_flush(@_stream)
