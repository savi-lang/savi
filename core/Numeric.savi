:: A type that can be used as a numeric type, usually having been declared
:: with a `:numeric` type declaration, corresponding to a bounded range of
:: real numbers, being represented as either integer or floating-point values
:: with a fixed bit-width representation.
::
:: The standard floating-point types are `F32` and `F64`, with the "F" prefix
:: indicating "floating-point", and the 32 or 64 indicating the bit width.
::
:: The standard integer types have similar names, such as `U8` or `I32`, with
:: an "I" prefix indicating "integer", or "U" indicating "unsigned integer".
::
:: Beyond the standard numeric types, user-defined custom numeric types can
:: be declared with the `:numeric` declaration, but such types will always
:: have the same bit-width and machine representation as one of the standard
:: types, making this option useful mainly in the case of wanting to define.
::
:: For standard numeric types, the type parameter T is the same as the `@` type,
:: but this less restrictive definition allows more exotic types to conform,
:: and also makes the trait play nicely as a generic constraint, wherever
:: "F-bounded polymorphism" is needed to ensure both subtyping and supertyping.
::
:: You don't really need to understand the details of the preceding statements.
:: All you really need to know is that you can write generic code that takes
:: a given type T as a type parameter, if you use `Numeric(T)'val` as the
:: constraint for the type parameter, such as in this example:
::
:: > :module Adder(T Numeric(T)'val)
:: >   :fun add(number_1 T, number_2 T) T
:: >     number_1 + number_2
::
:: Basically, it helps to guarantee that T is a type which is numeric and can
:: be used with other arguments of type T and to produce results of type T.
:trait val Numeric(T Numeric(T)'val)
  :is Numeric.Representable
  :is Numeric.Convertible
  :is Numeric.Bounded(T)
  :is Numeric.Arithmetic(T)
  :is Numeric.Comparable(T)
  :is TraceData

:: A type which conveys information about the machine-level representation
:: of a numeric type, including both the width and the kind of representation.
:trait val Numeric.Representable
  :: The number of bits that are used to represent values of this numeric type.
  :: The number of distinct representable values is thus 2 to the width's power.
  :const bit_width U8

  :: The number of bytes that are used to represent values of this numeric type.
  :: For types smaller than a byte (like `Bool`), a full byte is pretended.
  :const byte_width U8

  :: When true, values are signed, represented using "two's complement",
  ::
  :: allowing both negative and positive values (and zero) to be represented.
  :: When false, values are unsigned, allowing only positive numbers (and zero).
  ::
  :: This constant has meaning only for integer types, not floating-point types.
  :const is_signed Bool

  :: When true, values are floating-point numbers rather than integers,
  :: allowing the representation of fractional values, as well as values
  :: which are very great in magnitude (though with loss of precision).
  ::
  :: Floating-point types follow the typical IEEE 754 standard in their
  :: representation and operational semantics.
  :const is_floating_point Bool

:: A type that can be converted to one of the standard numeric types.
:trait val Numeric.Convertible
  :: Convert this value to a corresponding `U8` value.
  ::
  :: If converting from an integer type with a range that extends beyond that
  :: of the `U8` type, any out-of-range values will be truncated. That is,
  :: they will overflow with wrap-around semantics.
  :: Use `u8!` instead if raising an error overflow/underflow is desired.
  ::
  :: If converting from a floating-point type, the result will be the nearest
  :: `U8` integer (rounding toward zero). If the floating-point value is
  :: beyond the bounds of the `max_value` and `min_value` of `U8`, the
  :: result value will be either the `max_value` or `min_value`, respectively.
  :: If the floating-point value is NaN, the result value will be zero.
  :: Use `u8!` instead if raising an error for these cases is desired.
  :fun u8 U8

  :: Convert this value to a corresponding `U8` value, or error on overflow.
  ::
  :: If converting from an integer type with a range that extends beyond that
  :: of the `U8` type, any out-of-range values will raise an error.
  :: Use `u8` instead if wrap-around semantics for overflow are desired.
  ::
  :: If converting from a floating-point type, the result will be the nearest
  :: `U8` integer (rounding toward zero). If the floating-point value is
  :: beyond the bounds of the `max_value` and `min_value` of `U8`, or if the
  :: floating-point value is NaN, an error will be raised.
  :: Use `u8` instead if silently handling those edge cases is desired.
  :fun u8! U8

  :: Convert this value to a corresponding `U16` value.
  ::
  :: If converting from an integer type with a range that extends beyond that
  :: of the `U16` type, any out-of-range values will be truncated. That is,
  :: they will overflow with wrap-around semantics.
  :: Use `u16!` instead if raising an error overflow/underflow is desired.
  ::
  :: If converting from a floating-point type, the result will be the nearest
  :: `U16` integer (rounding toward zero). If the floating-point value is
  :: beyond the bounds of the `max_value` and `min_value` of `U16`, the
  :: result value will be either the `max_value` or `min_value`, respectively.
  :: If the floating-point value is NaN, the result value will be zero.
  :: Use `u16!` instead if raising an error for these cases is desired.
  :fun u16 U16

  :: Convert this value to a corresponding `U16` value, or error on overflow.
  ::
  :: If converting from an integer type with a range that extends beyond that
  :: of the `U16` type, any out-of-range values will raise an error.
  :: Use `u16` instead if wrap-around semantics for overflow are desired.
  ::
  :: If converting from a floating-point type, the result will be the nearest
  :: `U16` integer (rounding toward zero). If the floating-point value is
  :: beyond the bounds of the `max_value` and `min_value` of `U16`, or if the
  :: floating-point value is NaN, an error will be raised.
  :: Use `u16` instead if silently handling those edge cases is desired.
  :fun u16! U16

  :: Convert this value to a corresponding `U32` value.
  ::
  :: If converting from an integer type with a range that extends beyond that
  :: of the `U32` type, any out-of-range values will be truncated. That is,
  :: they will overflow with wrap-around semantics.
  :: Use `u32!` instead if raising an error overflow/underflow is desired.
  ::
  :: If converting from a floating-point type, the result will be the nearest
  :: `U32` integer (rounding toward zero). If the floating-point value is
  :: beyond the bounds of the `max_value` and `min_value` of `U32`, the
  :: result value will be either the `max_value` or `min_value`, respectively.
  :: If the floating-point value is NaN, the result value will be zero.
  :: Use `u32!` instead if raising an error for these cases is desired.
  :fun u32 U32

  :: Convert this value to a corresponding `U32` value, or error on overflow.
  ::
  :: If converting from an integer type with a range that extends beyond that
  :: of the `U32` type, any out-of-range values will raise an error.
  :: Use `u32` instead if wrap-around semantics for overflow are desired.
  ::
  :: If converting from a floating-point type, the result will be the nearest
  :: `U32` integer (rounding toward zero). If the floating-point value is
  :: beyond the bounds of the `max_value` and `min_value` of `U32`, or if the
  :: floating-point value is NaN, an error will be raised.
  :: Use `u32` instead if silently handling those edge cases is desired.
  :fun u32! U32

  :: Convert this value to a corresponding `U64` value.
  ::
  :: If converting from an integer type with a range that extends beyond that
  :: of the `U64` type, any out-of-range values will be truncated. That is,
  :: they will overflow with wrap-around semantics.
  :: Use `u64!` instead if raising an error overflow/underflow is desired.
  ::
  :: If converting from a floating-point type, the result will be the nearest
  :: `U64` integer (rounding toward zero). If the floating-point value is
  :: beyond the bounds of the `max_value` and `min_value` of `U64`, the
  :: result value will be either the `max_value` or `min_value`, respectively.
  :: If the floating-point value is NaN, the result value will be zero.
  :: Use `u64!` instead if raising an error for these cases is desired.
  :fun u64 U64

  :: Convert this value to a corresponding `U64` value, or error on overflow.
  ::
  :: If converting from an integer type with a range that extends beyond that
  :: of the `U64` type, any out-of-range values will raise an error.
  :: Use `u64` instead if wrap-around semantics for overflow are desired.
  ::
  :: If converting from a floating-point type, the result will be the nearest
  :: `U64` integer (rounding toward zero). If the floating-point value is
  :: beyond the bounds of the `max_value` and `min_value` of `U64`, or if the
  :: floating-point value is NaN, an error will be raised.
  :: Use `u64` instead if silently handling those edge cases is desired.
  :fun u64! U64

  :: Convert this value to a corresponding `U128` value.
  ::
  :: If converting from an integer type with a range that extends beyond that
  :: of the `U128` type, any out-of-range values will be truncated. That is,
  :: they will overflow with wrap-around semantics.
  :: Use `u128!` instead if raising an error overflow/underflow is desired.
  ::
  :: If converting from a floating-point type, the result will be the nearest
  :: `U128` integer (rounding toward zero). If the floating-point value is
  :: beyond the bounds of the `max_value` and `min_value` of `U128`, the
  :: result value will be either the `max_value` or `min_value`, respectively.
  :: If the floating-point value is NaN, the result value will be zero.
  :: Use `u128!` instead if raising an error for these cases is desired.
  :fun u128 U128

  :: Convert this value to a corresponding `U128` value, or error on overflow.
  ::
  :: If converting from an integer type with a range that extends beyond that
  :: of the `U128` type, any out-of-range values will raise an error.
  :: Use `u128` instead if wrap-around semantics for overflow are desired.
  ::
  :: If converting from a floating-point type, the result will be the nearest
  :: `U128` integer (rounding toward zero). If the floating-point value is
  :: beyond the bounds of the `max_value` and `min_value` of `U128`, or if the
  :: floating-point value is NaN, an error will be raised.
  :: Use `u128` instead if silently handling those edge cases is desired.
  :fun u128! U128

  :: Convert this value to a corresponding `USize` value.
  ::
  :: If converting from an integer type with a range that extends beyond that
  :: of the `USize` type, any out-of-range values will be truncated. That is,
  :: they will overflow with wrap-around semantics.
  :: Use `usize!` instead if raising an error overflow/underflow is desired.
  ::
  :: If converting from a floating-point type, the result will be the nearest
  :: `USize` integer (rounding toward zero). If the floating-point value is
  :: beyond the bounds of the `max_value` and `min_value` of `USize`, the
  :: result value will be either the `max_value` or `min_value`, respectively.
  :: If the floating-point value is NaN, the result value will be zero.
  :: Use `usize!` instead if raising an error for these cases is desired.
  :fun usize USize

  :: Convert this value to a corresponding `USize` value, or error on overflow.
  ::
  :: If converting from an integer type with a range that extends beyond that
  :: of the `USize` type, any out-of-range values will raise an error.
  :: Use `usize` instead if wrap-around semantics for overflow are desired.
  ::
  :: If converting from a floating-point type, the result will be the nearest
  :: `USize` integer (rounding toward zero). If the floating-point value is
  :: beyond the bounds of the `max_value` and `min_value` of `USize`, or if the
  :: floating-point value is NaN, an error will be raised.
  :: Use `usize` instead if silently handling those edge cases is desired.
  :fun usize! USize

  :: Convert this value to a corresponding `I8` value.
  ::
  :: If converting from an integer type with a range that extends beyond that
  :: of the `I8` type, any out-of-range values will be truncated. That is,
  :: they will overflow with wrap-around semantics.
  :: Use `i8!` instead if raising an error overflow/underflow is desired.
  ::
  :: If converting from a floating-point type, the result will be the nearest
  :: `I8` integer (rounding toward zero). If the floating-point value is
  :: beyond the bounds of the `max_value` and `min_value` of `I8`, the
  :: result value will be either the `max_value` or `min_value`, respectively.
  :: If the floating-point value is NaN, the result value will be zero.
  :: Use `i8!` instead if raising an error for these cases is desired.
  :fun i8 I8

  :: Convert this value to a corresponding `I8` value, or error on overflow.
  ::
  :: If converting from an integer type with a range that extends beyond that
  :: of the `I8` type, any out-of-range values will raise an error.
  :: Use `i8` instead if wrap-around semantics for overflow are desired.
  ::
  :: If converting from a floating-point type, the result will be the nearest
  :: `I8` integer (rounding toward zero). If the floating-point value is
  :: beyond the bounds of the `max_value` and `min_value` of `I8`, or if the
  :: floating-point value is NaN, an error will be raised.
  :: Use `i8` instead if silently handling those edge cases is desired.
  :fun i8! I8

  :: Convert this value to a corresponding `I16` value.
  ::
  :: If converting from an integer type with a range that extends beyond that
  :: of the `I16` type, any out-of-range values will be truncated. That is,
  :: they will overflow with wrap-around semantics.
  :: Use `i16!` instead if raising an error overflow/underflow is desired.
  ::
  :: If converting from a floating-point type, the result will be the nearest
  :: `I16` integer (rounding toward zero). If the floating-point value is
  :: beyond the bounds of the `max_value` and `min_value` of `I16`, the
  :: result value will be either the `max_value` or `min_value`, respectively.
  :: If the floating-point value is NaN, the result value will be zero.
  :: Use `i16!` instead if raising an error for these cases is desired.
  :fun i16 I16

  :: Convert this value to a corresponding `I16` value, or error on overflow.
  ::
  :: If converting from an integer type with a range that extends beyond that
  :: of the `I16` type, any out-of-range values will raise an error.
  :: Use `i16` instead if wrap-around semantics for overflow are desired.
  ::
  :: If converting from a floating-point type, the result will be the nearest
  :: `I16` integer (rounding toward zero). If the floating-point value is
  :: beyond the bounds of the `max_value` and `min_value` of `I16`, or if the
  :: floating-point value is NaN, an error will be raised.
  :: Use `i16` instead if silently handling those edge cases is desired.
  :fun i16! I16

  :: Convert this value to a corresponding `I32` value.
  ::
  :: If converting from an integer type with a range that extends beyond that
  :: of the `I32` type, any out-of-range values will be truncated. That is,
  :: they will overflow with wrap-around semantics.
  :: Use `i32!` instead if raising an error overflow/underflow is desired.
  ::
  :: If converting from a floating-point type, the result will be the nearest
  :: `I32` integer (rounding toward zero). If the floating-point value is
  :: beyond the bounds of the `max_value` and `min_value` of `I32`, the
  :: result value will be either the `max_value` or `min_value`, respectively.
  :: If the floating-point value is NaN, the result value will be zero.
  :: Use `i32!` instead if raising an error for these cases is desired.
  :fun i32 I32

  :: Convert this value to a corresponding `I32` value, or error on overflow.
  ::
  :: If converting from an integer type with a range that extends beyond that
  :: of the `I32` type, any out-of-range values will raise an error.
  :: Use `i32` instead if wrap-around semantics for overflow are desired.
  ::
  :: If converting from a floating-point type, the result will be the nearest
  :: `I32` integer (rounding toward zero). If the floating-point value is
  :: beyond the bounds of the `max_value` and `min_value` of `I32`, or if the
  :: floating-point value is NaN, an error will be raised.
  :: Use `i32` instead if silently handling those edge cases is desired.
  :fun i32! I32

  :: Convert this value to a corresponding `I64` value.
  ::
  :: If converting from an integer type with a range that extends beyond that
  :: of the `I64` type, any out-of-range values will be truncated. That is,
  :: they will overflow with wrap-around semantics.
  :: Use `i64!` instead if raising an error overflow/underflow is desired.
  ::
  :: If converting from a floating-point type, the result will be the nearest
  :: `I64` integer (rounding toward zero). If the floating-point value is
  :: beyond the bounds of the `max_value` and `min_value` of `I64`, the
  :: result value will be either the `max_value` or `min_value`, respectively.
  :: If the floating-point value is NaN, the result value will be zero.
  :: Use `i64!` instead if raising an error for these cases is desired.
  :fun i64 I64

  :: Convert this value to a corresponding `I64` value, or error on overflow.
  ::
  :: If converting from an integer type with a range that extends beyond that
  :: of the `I64` type, any out-of-range values will raise an error.
  :: Use `i64` instead if wrap-around semantics for overflow are desired.
  ::
  :: If converting from a floating-point type, the result will be the nearest
  :: `I64` integer (rounding toward zero). If the floating-point value is
  :: beyond the bounds of the `max_value` and `min_value` of `I64`, or if the
  :: floating-point value is NaN, an error will be raised.
  :: Use `i64` instead if silently handling those edge cases is desired.
  :fun i64! I64

  :: Convert this value to a corresponding `I128` value.
  ::
  :: If converting from an integer type with a range that extends beyond that
  :: of the `I128` type, any out-of-range values will be truncated. That is,
  :: they will overflow with wrap-around semantics.
  :: Use `i128!` instead if raising an error overflow/underflow is desired.
  ::
  :: If converting from a floating-point type, the result will be the nearest
  :: `I128` integer (rounding toward zero). If the floating-point value is
  :: beyond the bounds of the `max_value` and `min_value` of `I128`, the
  :: result value will be either the `max_value` or `min_value`, respectively.
  :: If the floating-point value is NaN, the result value will be zero.
  :: Use `i128!` instead if raising an error for these cases is desired.
  :fun i128 I128

  :: Convert this value to a corresponding `I128` value, or error on overflow.
  ::
  :: If converting from an integer type with a range that extends beyond that
  :: of the `I128` type, any out-of-range values will raise an error.
  :: Use `i128` instead if wrap-around semantics for overflow are desired.
  ::
  :: If converting from a floating-point type, the result will be the nearest
  :: `I128` integer (rounding toward zero). If the floating-point value is
  :: beyond the bounds of the `max_value` and `min_value` of `I128`, or if the
  :: floating-point value is NaN, an error will be raised.
  :: Use `i128` instead if silently handling those edge cases is desired.
  :fun i128! I128

  :: Convert this value to a corresponding `ISize` value.
  ::
  :: If converting from an integer type with a range that extends beyond that
  :: of the `ISize` type, any out-of-range values will be truncated. That is,
  :: they will overflow with wrap-around semantics.
  :: Use `isize!` instead if raising an error overflow/underflow is desired.
  ::
  :: If converting from a floating-point type, the result will be the nearest
  :: `ISize` integer (rounding toward zero). If the floating-point value is
  :: beyond the bounds of the `max_value` and `min_value` of `ISize`, the
  :: result value will be either the `max_value` or `min_value`, respectively.
  :: If the floating-point value is NaN, the result value will be zero.
  :: Use `isize!` instead if raising an error for these cases is desired.
  :fun isize ISize

  :: Convert this value to a corresponding `ISize` value, or error on overflow.
  ::
  :: If converting from an integer type with a range that extends beyond that
  :: of the `ISize` type, any out-of-range values will raise an error.
  :: Use `isize` instead if wrap-around semantics for overflow are desired.
  ::
  :: If converting from a floating-point type, the result will be the nearest
  :: `ISize` integer (rounding toward zero). If the floating-point value is
  :: beyond the bounds of the `max_value` and `min_value` of `ISize`, or if the
  :: floating-point value is NaN, an error will be raised.
  :: Use `isize` instead if silently handling those edge cases is desired.
  :fun isize! ISize

  :: Convert this value to a corresponding `F32` value.
  ::
  :: If converting from an integer type or a wider floating-point type,
  :: the result will be the nearest representable `F32` number, which may
  :: not be exactly the same number. That is, there may be a loss in precision.
  ::
  :: If converting from a wider floating-point type (such as `F64`),
  :: values which are too great in magnitude to represent in `F32` will be
  :: converted to positive or negative infinity, depending on the original sign.
  :: If raising an error on overflow is desired instead, use the `f32!` method.
  :fun f32 F32

  :: Convert this value to a corresponding `F32` value, or error on overflow.
  ::
  :: If converting from an integer type or a wider floating-point type,
  :: the result will be the nearest representable `F32` number, which may
  :: not be exactly the same number. That is, there may be a loss in precision.
  ::
  :: If converting from a wider floating-point type (such as `F64`),
  :: values which are too great in magnitude to represent in `F32` will
  :: raise an error, forcing the caller to handle that case explicitly.
  :: If silently coercing to positive or negative infinity on overflow/underflow
  :: is desired instead, use the `f32` method, which cannot raise an error.
  :fun f32! F32

  :: Convert this value to a corresponding `F64` value.
  ::
  :: If converting from an integer type that is 32 bits wide or wider,
  :: the result will be the nearest representable `F64` number, which may
  :: not be exactly the same number. That is, there may be a loss in precision.
  ::
  :: Note that there is no `f64!` method because there doesn't currently exist
  :: any numeric type in the language whose conversion to `F64` could overflow.
  :fun f64 F64

:: A type that can return minimum, maximum, and zero numeric values.
:trait val Numeric.Bounded(T Numeric(T)'val)
  :: The zero value for this type (the additive identity value).
  :fun non zero T

  :: The one value for this type (the multiplicative identity value).
  :fun non one T

  :: The minimum representable numeric value for this type.
  ::
  :: For unsigned integer types, it is zero.
  :: For signed integer types, it is the greatest-magnitude negative number.
  :: For floating-point types, it is negative infinity.
  :fun non min_value T

  :: The maximum representable numeric value for this type.
  ::
  :: For integer types, it is the greatest-magnitude positive number.
  :: For floating-point types, it is positive infinity.
  :fun non max_value T

:: A type which can do arithmetic operations of the given type T,
:: each operation producing a result of that same type T.
::
:: Please note that due to limitations of the efficient machine-level
:: representations of numeric value, some of these operations may produce
:: results which deviate from the expected values in pure arithmetic theory.
::
:: That is, all of these methods are guaranteed not to raise errors, and they
:: have well-defined documented semantics, but they may not return the values
:: that you expected (unless you read the documentation and understand it).
::
:: Take special care to read and understand the behavior of each operation,
:: and for integer types, understand when it may be appropriate to use one of
:: the error-raising methods from the `Integer.SafeArithmetic` trait instead.
:trait val Numeric.Arithmetic(T Numeric(T)'val)
  :: Add this value to another value, resulting in a sum value.
  ::
  :: For integer types, if this operation overflows the maximum representable
  :: value, the result is defined to use wrap-around semantics.
  :: Use the `+!` method instead if raising an error on overflow is desired.
  :fun val "+"(other T) T

  :: Subtract another value from this value, resulting in a difference value.
  ::
  :: For integer types, if this operation underflows the minimum representable
  :: value, the result is defined to use wrap-around semantics.
  :: Use the `-!` method instead if raising an error on underflow is desired.
  :fun val "-"(other T) T

  :: Multiply this value with another value, resulting in a product value.
  ::
  :: For integer types, if this operation overflows past the maximum or minimum
  :: representable values, the result is defined to use wrap-around semantics.
  :: Use the `*!` method instead if raising an error on overflow is desired.
  :fun val "*"(other T) T

  :: Divide this value by another value, resulting in a quotient value.
  ::
  :: For integer types, this operation uses floored division, meaning that
  :: the result will be the nearest integer that is less than or equal to
  :: the true quotient, with some "remainder" value left unaccounted for.
  :: If the remainder value is desired, use the `%` method to get that value,
  :: or use the `wide_divide` method to get both the quotient and remainder.
  ::
  :: For integer types, if this operation results in an undefined quotient
  :: (i.e. if the divisor is zero), the result is defined to be zero,
  :: because integer representations have no value for "NaN", as floats do.
  :: This is contrary to many other programming languages, wherein an integer
  :: divide by zero results in an exception or panic that unwinds the program.
  :: Use the `/!` method instead if raising an error for this case is desired.
  :fun val "/"(other T) T

  :: Get the "remainder" value of the floored division of this value by another.
  :: That is, this method gives the number from the dividend that was
  :: unaccounted for in what would be the integer-truncated quotient value.
  :fun val "%"(other T) T

:: A numeric type which is comparable to other instances of the same type,
:: and can have its sign tested to determine whether it is positive or negative.
:trait Numeric.Comparable(T Numeric(T)'val)
  :is Comparable(T)

  :: Return `True` if the value is equal to zero.
  :fun val is_zero Bool

  :: Return `True` if the value is not equal to zero.
  :fun val is_nonzero Bool: @is_zero.not

  :: If this value is greater than the given minimum value, return it.
  :: Otherwise return the given minimum value.
  :fun val at_least(minimum T) T

  :: DEPRECATED: use the `at_least` method instead.
  :fun val max(other T) T

  :: If this value is less than the given maximum value, return it.
  :: Otherwise return the given maximum value.
  :fun val at_most(maximum T) T

  :: DEPRECATED: use the `at_most` method instead.
  :fun val min(other T) T

  :: Return the result of subtracting this value from zero, which will usually
  :: return a negative value of the same magnitude as the original positive,
  :: or return a positive value of the same magnitude as the original negative.
  ::
  :: However, for unsigned integer types (which have no negative values), the
  :: result will always be positive, using wrap-around underflow subtraction.
  :: For example, the negation of one would be the same value as `max_value`.
  ::
  :: Similarly, for signed integer types (which have a greatest positive value
  :: whose magnitude is greater than the greatest negative value), the `negate`
  :: of the `max_value` will be `zero`, and vice versa.
  :fun val negate T

  :: Return a positive value of the same magnitude as this value.
  :fun val abs T

:: This trait isn't meant to be used externally. It's just a base implementation
:: of methods to be copied into every new type declared as `:numeric`.
:trait val Numeric.BaseImplementation // TODO: don't use :trait for this... `common`?
  :: Return the given numeric value.
  ::
  :: This method exists only to aid in type inference of numeric literal values.
  :: For example, the expression `U32[99]` passes the numeric value 99 to the
  :: `[]` method of the `U32` type as a way of explicitly notating the type
  :: of the numeric value, which would otherwise be unknown to the compiler.
  :fun non "[]"(value @'val) @'val: value

  :is Numeric.Representable
  :const bit_width U8: 8
  :const is_signed Bool: False
  :const is_floating_point Bool: False

  :is Numeric.Convertible
  :fun u8 U8: compiler intrinsic
  :fun u8! U8: compiler intrinsic
  :fun u16 U16: compiler intrinsic
  :fun u16! U16: compiler intrinsic
  :fun u32 U32: compiler intrinsic
  :fun u32! U32: compiler intrinsic
  :fun u64 U64: compiler intrinsic
  :fun u64! U64: compiler intrinsic
  :fun u128 U128: compiler intrinsic
  :fun u128! U128: compiler intrinsic
  :fun usize USize: compiler intrinsic
  :fun usize! USize: compiler intrinsic
  :fun i8 I8: compiler intrinsic
  :fun i8! I8: compiler intrinsic
  :fun i16 I16: compiler intrinsic
  :fun i16! I16: compiler intrinsic
  :fun i32 I32: compiler intrinsic
  :fun i32! I32: compiler intrinsic
  :fun i64 I64: compiler intrinsic
  :fun i64! I64: compiler intrinsic
  :fun i128 I128: compiler intrinsic
  :fun i128! I128: compiler intrinsic
  :fun isize ISize: compiler intrinsic
  :fun isize! ISize: compiler intrinsic
  :fun f32 F32: compiler intrinsic
  :fun f32! F32: compiler intrinsic
  :fun f64 F64: compiler intrinsic
  :fun f64! F64: compiler intrinsic

  :is Numeric.Bounded(@)
  // The implementation for `Numeric.Bounded` is intentionally omitted here,
  // and left to be implemented in `Integer.BaseImplementation`,
  // `FloatingPoint.BaseImplementation32`, and
  // `FloatingPoint.BaseImplementation64`.

  :is Numeric.Arithmetic(@)
  :fun val "+"(other @) @: compiler intrinsic
  :fun val "-"(other @) @: compiler intrinsic
  :fun val "*"(other @) @: compiler intrinsic
  :fun val "/"(other @) @: compiler intrinsic
  :fun val "%"(other @) @: compiler intrinsic

  :is Numeric.Comparable(@)
  :fun "=="(other @'box) Bool: compiler intrinsic
  :fun "!="(other @'box) Bool: compiler intrinsic
  :fun "<"(other @'box) Bool: compiler intrinsic
  :fun "<="(other @'box) Bool: compiler intrinsic
  :fun ">"(other @'box) Bool: compiler intrinsic
  :fun ">="(other @'box) Bool: compiler intrinsic
  :fun val negate: @zero - @
  :fun val is_zero Bool: @ == @zero
  :fun val at_least(minimum @) @: if (@ > minimum) (@ | minimum)
  :fun val at_most(maximum @) @: if (@ < maximum) (@ | maximum)
  :fun val max(other @) @: @at_least(other)
  :fun val min(other @) @: @at_most(other)
  :fun val abs: if (@is_signed && @ < @zero) (@zero - @ | @)

:: The standard 8-bit unsigned integer numeric type.
:: This type is often used to represent a byte.
:numeric U8
  :bit_width 8

:: The standard 16-bit unsigned integer numeric type.
:numeric U16
  :bit_width 16

:: The standard 32-bit unsigned integer numeric type.
:numeric U32
  :bit_width 32

:: The standard 64-bit unsigned integer numeric type.
:numeric U64
  :bit_width 64

:: The standard 128-bit unsigned integer numeric type.
:numeric U128
  :bit_width 128

:: The standard platform-specific unsigned "size" numeric type.
:: This type is often used for counting and indexing collections.
::
:: Specifically, it refers to the size of the platform's pointer address space.
:: It is the same size as `U64` on 64-bit platforms, and `U32` on 32-bit.
::
:: However, please note that on some platforms, there is a distinction between
:: the size of a pointer's address space and the size of a pointer itself.
:: For example, on the CHERI platform, the address space is 64-bit, but the
:: size of a pointer is 128-bit, since the pointer contains extra information
:: that is not just encoding the location in the address space.
:: On such a platform, `USize` is 64-bit - the size of the address space.
::
:: To put it another way, `USize` is equivalent to the `size_t` type in C,
:: but it is not guaranteed to be equivalent to the `uintptr_t` type in C.
:numeric USize
  :bit_width of C size_t

:: The standard 8-bit signed integer numeric type.
:numeric I8
  :signed
  :bit_width 8

:: The standard 16-bit signed integer numeric type.
:numeric I16
  :signed
  :bit_width 16

:: The standard 32-bit signed integer numeric type.
:numeric I32
  :signed
  :bit_width 32

:: The standard 64-bit signed integer numeric type.
:numeric I64
  :signed
  :bit_width 64

:: The standard 128-bit signed integer numeric type.
:numeric I128
  :signed
  :bit_width 128

:: The standard platform-specific signed "size" numeric type.
:: This is the signed type corresponding to the unsigned type `USize`.
::
:: Specifically, it refers to the size of the platform's pointer address space.
:: It is the same size as `I64` on 64-bit platforms, and `I32` on 32-bit.
::
:: However, please note that on some platforms, there is a distinction between
:: the size of a pointer's address space and the size of a pointer itself.
:: For example, on the CHERI platform, the address space is 64-bit, but the
:: size of a pointer is 128-bit, since the pointer contains extra information
:: that is not just encoding the location in the address space.
:: On such a platform, `ISize` is 64-bit - the size of the address space.
::
:: To put it another way, `ISize` is equivalent to the `ssize_t` type in C,
:: but it is not guaranteed to be equivalent to the `intptr_t` type in C.
:numeric ISize
  :signed
  :bit_width of C size_t

:: The standard 32-bit floating-point numeric type.
:numeric F32
  :floating_point
  :bit_width 32

:: The standard 64-bit floating-point numeric type.
:numeric F64
  :floating_point
  :bit_width 64
