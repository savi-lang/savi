:module Day2
  :fun has_duo(line): @has_target_count(line, 2)
  :fun has_trio(line): @has_target_count(line, 3)
  :fun has_target_count(line String, target_count I64)
    letters = Map(U8, I64).new
    line.each_byte -> (letter |
      try ( // TODO: use an upsert method instead?
        letters[letter] = letters[letter]! + 1
      |
        letters[letter] = 1
      )
    )
    letters.has_any -> (letter, count | count == target_count)

  :fun a(input String)
    // Find the number of lines that have a byte repeated exactly twice,
    // and the number of lines that have a byte repeated exactly thrice,
    // and multiply these two counts together to get the checksum.
    count_duo I64 = count_trio = I64[0] // TODO: type of count_duo should be inferred
    input.each_split('\n') -> (line |
      if @has_duo(line)  (count_duo  += 1)
      if @has_trio(line) (count_trio += 1)
    )
    count_duo * count_trio

  :fun b(input String)
    found_l = ""
    found_r = ""
    diff USize = -1
    // In a loop, compare each line in the list to each line in the list,
    // exiting early from the loop when we find two that differ by exactly
    // one byte being different in the same position of the two strings.
    try (
      input.each_split('\n') -> (line_l |
        input.each_split('\n') -> (line_r |
          diff = -1
          // Scan through the bytes in the lines, breaking early if more than
          // two different byte indexes between the two strings are found.
          try (
            line_l.each_byte_with_index -> (byte_l, index |
              if (byte_l != line_r.byte_at!(index)) (
                if (diff != -1) (
                  // We already found a difference, but this is another one,
                  // so we know this isn't the pair we wanted. Error out.
                  diff = -1
                  error!
                |
                  // This is the first difference we've found! Take note.
                  diff = index
                )
              )
            )
          )
          // If diff is not -1 here, it means that we found a line pair with
          // exactly one difference, which means we can exit early from the
          // outer two loops with an "error" - we fulfilled the mission.
          if (diff != -1) (
            found_l = line_l
            found_r = line_r
            error! // TODO: use double-break? or early return?
          )
        )
      )
    )
    // Now that we found our matching pair, create a new string that contains
    // only the bytes that are the same between the two strings found.
    result = String.new
    found_l.each_byte_with_index -> (byte, index |
      if (diff != index && diff != -1) result.push_byte(byte)
    )
    result

:class Day2Spec
  :is Spec
  :const describes: "Day2"

  :it "passes the A test cases"
    assert: Day2.has_duo("abcdef").is_false, assert: Day2.has_trio("abcdef").is_false
    assert: Day2.has_duo("bababc"),          assert: Day2.has_trio("bababc")
    assert: Day2.has_duo("abbcde"),          assert: Day2.has_trio("abbcde").is_false
    assert: Day2.has_duo("abcccd").is_false, assert: Day2.has_trio("abcccd")
    assert: Day2.has_duo("aabcdd"),          assert: Day2.has_trio("aabcdd").is_false
    assert: Day2.has_duo("abcdee"),          assert: Day2.has_trio("abcdee").is_false
    assert: Day2.has_duo("ababab").is_false, assert: Day2.has_trio("ababab")

    input = <<<
      abcdef
      bababc
      abbcde
      abcccd
      aabcdd
      abcdee
      ababab
    >>>
    assert: Day2.a(input) == 12

  :it "solves the A puzzle"
    assert: Day2.a(@puzzle_input) == 8296

  :it "passes the B test case"
    input = <<<
      abcde
      fghij
      klmno
      pqrst
      fguij
      axcye
      wvxyz
    >>>
    assert: Day2.b(input) == "fgij"

  :it "solves the B puzzle"
    assert: Day2.b(@puzzle_input) == "pazvmqbftrbeosiecxlghkwud"

  :const puzzle_input
    <<<
      bazvmqthjtrnlosiecxyghkwud
      pazvmqbijirzlosiecxyghkwud
      pazvtqbmjtrnlosiecxyghkwzd
      pazvmqbfjtrjlosnlcxyghkwud
      pazvkqbfjtrtlosiecjyghkwud
      paztmqbfjtrnbosiecxyglkwud
      pazvmqbfjtunlosievxmghkwud
      pazvmqbfjtmngosiecyyghkwud
      jazvmqbfjtrnlosiecxygikpud
      pazvqqbfctrnlosimcxyghkwud
      pazvmqbfjtrnwogiecxyihkwud
      pazvmqbfjtrqlojiecxeghkwud
      payvmqbfjtrzlosiecxyghkwuk
      pkzvmqnfjtrnlosieciyghkwud
      pazvmqqfjtrnldsiecxyghkwui
      pazvmqbfttrqlosiecxywhkwud
      gazvmybfjthnlosiecxyghkwud
      pazvmqbfjtrnlasiecxygptwud
      pktvmqbfjtrnwosiecxyghkwud
      pazvmqwfjtrnlosiecxgghkkud
      pazvmzkbjtrnlosiecxyghkwud
      pazvmqbfjtrnloslecxyghuwui
      pezvmqbfjtrnlesieyxyghkwud
      cazvmqbfjrrnlosiecxyghkmud
      pazvmqrfjjrnlosiecxyghkwnd
      pazvmqbgjtrnlosiecxyphtwud
      pazvmqbvmtrnlosiecxyghkpud
      pazdmqbfjtrnlosiecxyuhkpud
      pazvmqbflnrnloshecxyghkwud
      pazvvqbfjprilosiecxyghkwud
      pazvwqbfjtrllosiecxyghknud
      pazvmqbfjtrnloniecxdghkaud
      pazvmqbfjtrnlvsuecxynhkwud
      ptzvmqwfjtrnlosieccyghkwud
      pkzvmqbjjtrnlosiecryghkwud
      pazvmqqfjtrexosiecxyghkwud
      pazgmqbfjtrneoyiecxyghkwud
      paznmqbfjtrnlosiecxydhkwzd
      pazvmqbfjtrnaosiwcxsghkwud
      pazomqbfjxrnlosiewxyghkwud
      pazsmqbfjprnlosiecxrghkwud
      pazvmqbfqtrnoosiecxygmkwud
      aazvmqbfjtrnlosiacxyghjwud
      pazviqbfjtrnlobiecxygrkwud
      qazwmqbfjhrnlosiecxyghkwud
      pazvmqbfftrnlosiqcxygfkwud
      patvmqbfjtonlosircxyghkwud
      pazvmqbfjtrnlomaecxyghkpud
      paztmqbfjtrulossecxyghkwud
      pazvmqbijtrnlobiecxyghkwkd
      pazvsqbfjtrnlospecxyghkqud
      pbzmmqbfjtrnlosiecxyghkwhd
      pezvkqbfjtenlosiecxyghkwud
      razvmqbfjkrnlosiecxeghkwud
      pazcmqbfjtrnloriecxyghkgud
      pazvmqbfftfnlosiecvyghkwud
      pazvmqpujtrnlosiepxyghkwud
      patvgqbfjtrnloslecxyghkwud
      pazvmqbfltrnlosibcxyghswud
      pazvmebfjtrnlosaecxyehkwud
      pazdmqbejtrnlosiecxyghrwud
      pazvmcbfntrplosiecxyghkwud
      pszvmqbfjtrnlosivcfyghkwud
      puzvmqbfjtrnloeiecxyxhkwud
      pazvmqbfjtrivooiecxyghkwud
      pazvyqbfjtrngosiwcxyghkwud
      pauvmqbfjtrnlosimexyghkwud
      pazvmqbfjtrnwoshecxeghkwud
      dazvmqbfjtrnloshecxygxkwud
      pazvmqbfjtrtdosiecxyghvwud
      pazxmqbfjtrnlosieceyghjwud
      pazvmqbfjtrnlosihexjghkwud
      pazvmqbfjsrnlosiecxughiwud
      phzvcqbfjtrqlosiecxyghkwud
      pazvmibfjtrnlosjecxxghkwud
      pazvmqbfjtrbeosiecxlghkwud
      pazvmqyfjttolosiecxyghkwud
      fawvmqbfjtrnlosiecxyghkwhd
      pazvmqbfjprnxosiecxyghkbud
      macvmqbfjtrnlosiesxyghkwud
      pazsmqbfjtrflouiecxyghkwud
      pacvmqbfjtrnltsiecxyghcwud
      pazvmqbfjtymlosiecxygykwud
      pazvmqbfjtrclosiecxygukwmd
      pazvmqbfjtrnlobiecxphhkwud
      mazvmqbhitrnlosiecxyghkwud
      pazvmqdtjtrnlrsiecxyghkwud
      pazvmqbfjgrnllsieczyghkwud
      pazvmqbfjtrilosiecxxgikwud
      pazvmqbjjtrnlosreceyghkwud
      paxvmmbfjtrilosiecxyghkwud
      pazqmwbfjtrnlowiecxyghkwud
      pazvmqbfjfrnqosiecxyghkwui
      pazvmqbfjtrrgosiecxyghswud
      pazvmqnfjtrnlosiecsyghkwmd
      paiemqbmjtrnlosiecxyghkwud
      pazvmqbfdtqnlosiecxyjhkwud
      pazvmxbfjthndosiecxyghkwud
      pqzvmqbfjtrnlosiecxbghkzud
      pagrmqbfjtrnlosiecxygskwud
      pazamqtfjtrnsosiecxyghkwud
      pazvmqbfjtrnldshecxyzhkwud
      pazvmnbfjtrllosieclyghkwud
      snzvmqbfjnrnlosiecxyghkwud
      pazvsqbfjdrnlosiecxyghswud
      pazvmqnfjfrnlosiecsyghkwud
      pazvmqbfjtrnlosiecxjghowum
      pazvmqbfjtjnlosieczygfkwud
      pazvmqbsjtrnloziecxyghkeud
      pazvxqbgjtrnlooiecxyghkwud
      pazvmqbfjtrnlooiecxmyhkwud
      pazvmqbyftrnlosgecxyghkwud
      pazvmqbfjtrnlosiwcxyqhksud
      pazvmqkyjtrnlokiecxyghkwud
      pazfmqbfjtrnlosijcxyohkwud
      pazvmqbfjtrnlociecxygikcud
      fazvmqbfjtrnlosiecxyjhkuud
      pazvmqbojtknlohiecxyghkwud
      pazvmqbfjtgnlosbecxyghkwux
      pazvmqbfjtrnlocieckoghkwud
      pazvdqbfjtrlltsiecxyghkwud
      pazvmqbfjtsnlfsiecxyglkwud
      przvpqbfjtrnyosiecxyghkwud
      pazvmbrfjtrnlosiecxmghkwud
      dazvmqbfttrnlostecxyghkwud
      pazvmqbfttdnlosiecxygwkwud
      pazvmqbvitrnlosieexyghkwud
      pazvmqbfjhrnlosjecxyvhkwud
      pazvmqbfstrnlosiecxyggkwpd
      bazvmqbfjtrnlmsiecxyohkwud
      patmmqbfjtrnlosizcxyghkwud
      pazvmqbfwtrglosieqxyghkwud
      pazvmqbfjtrnlosiecxdhhkwmd
      pazvmqbfjdrnlosnexxyghkwud
      oazrrqbfjtrnlosiecxyghkwud
      pazvmqbfjcrnlosiecxygakwjd
      pazvmqbfjtrnlosifcxfghkwyd
      pazvmnbfjtrnlosiecxyahzwud
      pazvmqbfgtrnlojiecxyghkgud
      pazvmqbfjtrnlaliecxyghkwuy
      pazvmqbfjtrnlfsiecrtghkwud
      pazvmqbkjtrnloswecxdghkwud
      pazvtqbfjtdnlosiecxyghkwuu
      pozvmqbfrtrnlosiesxyghkwud
      payvmqbfjornlossecxyghkwud
      pazvuqbfjtrnlosiscxyghkpud
      pgzcmqbfjtrnlotiecxyghkwud
      pazvvqbfjtrnlobieyxyghkwud
      pazycqbfjtrnlosiecxyzhkwud
      pizvdqbfjtrnlosiecxbghkwud
      pazvmqbfjtrnloqiecxmgtkwud
      gazvmqbfjtrnlusiecxpghkwud
      pazvmqdfjtralosiecxyghkwmd
      pazvmqbfjtmnlosiecxywhawud
      pazvlqbfjtrnlosqecxyghqwud
      pazvmqbfjtrnlhsneixyghkwud
      kazvmqbfjtrqlosimcxyghkwud
      pazvmwbfjtrclosiecxyghkuud
      pazvmqjfjtrnlosieckyghpwud
      pezvmqbgjtrnloseecxyghkwud
      pazvqqbfjtfnlosvecxyghkwud
      oazvmqbfjtunlosiecxyghkwad
      pazvmqbfjtrncoswecxyghfwud
      pazvyqbfjtrnlosqecxygtkwud
      pazvmqbfjtrvlzsiecxygwkwud
      pazvmqbfjjrnlosiekxylhkwud
      madvmqbfjtrnlosircxyghkwud
      pazvmybfjtrnlisiecxyghkwbd
      pazvmqbjjixnlosiecxyghkwud
      pazvmqefjtrnloqiecxyghhwud
      pazveqbfjtrnlosiecgygzkwud
      pazvmqbfjtrxlosiecxmgwkwud
      uazvmqufjtrnlosiecxyghkwuo
      pasymqbfjtrnlosiecxyghowud
      pazvmqbfjtlnlpsiecxyghswud
      pnzvmqbfjprnloszecxyghkwud
      pafjmqcfjtrnlosiecxyghkwud
      pazvmqxfbtrnloqiecxyghkwud
      pazvmzbfjtrnposiccxyghkwud
      pazvmqbfjotulosiecxyghkwud
      pazvmqbfotrnlosgecxykhkwud
      przvmqbfjtrnlosiecxyqhkwcd
      pazvmqbfjtsnlogiecxyyhkwud
      pazvmqbfrtrnlzsiecxyghkwug
      pazvmqbfjtrnlosiecxzgukwuo
      pqzvmqbqjtrnlosdecxyghkwud
      pazvmqbfjtqqlosiecxughkwud
      pazvmqbfjtrnlosiedhyphkwud
      pazsmqbcutrnlosiecxyghkwud
      pazvmqbgrtrnlosiecxyghpwud
      pazemqbfjtznlosiecxyghkvud
      pazvkqbfjtrilosiecxyghkwod
      pfzvmqbfjtrnlopiecxygjkwud
      pazvmqvfjtreloniecxyghkwud
      pazvmqbfjernljsiecxgghkwud
      pazvmqikjtrnlosiecxyghqwud
      pazvmqbfjtrnpesoecxyghkwud
      fazvmqbfjtrnlosihchyghkwud
      pazvmqbfjtgnloanecxyghkwud
      pazvmqsfjqrnlosiecxychkwud
      parvmqbfjtrnlosiecxygfuwud
      przvmqbfjtrhlosihcxyghkwud
      pazvmqbcjtrnlosimcxgghkwud
      pazvmqbfjtrnlosceciyjhkwud
      pazvkqbfjtrylosivcxyghkwud
      pazvmqbfjtrnlgsieoxyghdwud
      pazvmqnfstrnlowiecxyghkwud
      pazvmqbfdtrnlosieumyghkwud
      pazvmqbfjtrnlosyecxfghkwul
      pazvmqbfjtrclosivcxyghkcud
      pazjmqbfjtrnlosiecxygokwkd
      hazvmqbfjtrflosiecxzghkwud
      wazvmqbfjtrnlomiecxyphkwud
      yazvmqbfjirnkosiecxyghkwud
      pczvmqbfjtrnlohiecxyghkwpd
      pazvmqbfotrbeosiecxlghkwud
      pazvmqbfjtrplosiecxynhzwud
      paxvbqbwjtrnlosiecxyghkwud
      pazvmqvfjtrnlosiecbyghqwud
      pazjmqbfjtrnlosiecxoghkwed
      pazvmqbfjtreljsitcxyghkwud
      mazamqbfjtrnlosiecxoghkwud
      pazvmqbfjjrnposiscxyghkwud
      pbrvmqbfjtrnloliecxyghkwud
      pazvmqbfjtrnlosiecxgghkyyd
      pmzvmqbfntrnlosiecxyghkwuw
      pazvzqbfjtrnlosienxyghzwud
      pazvmqifjtvnlosrecxyghkwud
      tazvmqbhjtjnlosiecxyghkwud
      pazvmqbfjtlnxosiecxyghkwuo
      pazvmqbfjennlosiecxyghkwxd
      pahvmqbfjhrnlosiecxythkwud
      pazvmlkfjtrnlxsiecxyghkwud
      pfzvmqbojtrnlosieciyghkwud
      pazvbqbfjtrollsiecxyghkwud
      eazvmqbfjtrnlosiecayghkoud
      pazvmqbfjtjnlvsiecxyghkwsd
      pazvoqbojtrnlosiecfyghkwud
      pazvmqbfjtuslosiecxyghksud
      pazvmqbfjnrnlosiedxyghkwup
      pazvmqbjjtrnlosieaxyghdwud
      pazccqbfjtrhlosiecxyghkwud
      pbzvmqkfjtrnlosievxyghkwud
      pazvmqrljtrnlosiscxyghkwud
      pazvmqbfjfoqlosiecxyghkwud
      pazcmqbfjtrnlosiecxyihkwuf
      pszvmqbfjtrnnosiacxyghkwud
      aazvmqbfjtrnlosieyxyghkwld
      pazvrqbfntrnlosiycxyghkwud
      pkzvoqbfjtrnlosiecxyghxwud
    >>>
