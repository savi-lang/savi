:class val _Grammar
  :is PEG.Grammar(_Token)
  :new val
    // Define what an end-of-line comment/annotation looks like.
    eol_annotation = @str("::") >> @char(' ').maybe >> (@char('\n').not >> @any).repeat.token(_Token.Annotation)
    eol_comment = (@str("//") >> (@char('\n').not >> @any).repeat) / eol_annotation

    // Define what whitespace looks like.
    whitespace =
      @char(' ') / @char('\t') / @char('\r') / @str("\\\n") / @str("\\\r\n")
    s = whitespace.repeat
    newline = s >> eol_comment.maybe >> (@char('\n') / s.then_eof)
    sn = (whitespace / newline).repeat

    // Define what a number looks like (integer and float).
    digit = @range('0', '9')
    digit19 = @range('1', '9')
    digitbin = @range('0', '1')
    digithex = digit / @range('a', 'f') / @range('A', 'F')
    numsep = @char('_')
    intbin = @str("0b") >> digitbin >> (digitbin / numsep).repeat
    inthex = @str("0x") >> digithex >> (digithex / numsep).repeat
    intdec =
      (@char('-') >> digit19 >> (digit / numsep).repeat) /
      (@char('-') >> @char('0')) /
      (digit19 >> (digit / numsep).repeat) /
      @char('0')
    frac = @char('.') >> digit.repeat(1)
    exp =
      (@char('e') / @char('E')) >>
      (@char('+') / @char('-')).maybe >>
      (@char('0') / (digit19 >> digit.repeat))
    integer =
      intbin.token(_Token.BinaryInteger) /
      inthex.token(_Token.HexadecimalInteger) /
      intdec.token(_Token.DecimalInteger)
    float = (
      @char('-').maybe >>
      (@char('0') / (digit19 >> digit.repeat)) >>
      ((frac >> exp.maybe) / exp)
    ).token(_Token.FloatingPoint)

    // Define what an identifier looks like.
    ident_letter =
      @range('a', 'z') / @range('A', 'Z') / @range('0', '9') / @char('_')
    ident = (
      (
        (@char('@') >> ident_letter.repeat) /
        (@char('^') >> digit19 >> digit.repeat) /
        ident_letter.repeat(1)
      ) >> @char('!').maybe
    ).token(_Token.Identifier)

    // We allow (escaped) parens inside of a string literal, so we need to
    // forward-declare the grammar rule here so we can use it early and
    // define it later in the grammar.
    parens = @declare

    // Define what a string looks like.
    string_char = (
      @str("\\'") / @str("\\\"") / @str("\\\\") /
      @str("\\b") / @str("\\f") / @str("\\n") / @str("\\r") / @str("\\t") /
      @str("\b")  / @str("\f")  / @str("\n")  / @str("\r")  / @str("\t") /
      (@str("\\x") >> digithex >> digithex) /
      (@str("\\u") >> digithex >> digithex >> digithex >> digithex) /
      (@str("\\U") >> digithex >> digithex >> digithex >> digithex >>
        digithex >> digithex >> digithex >> digithex) /
      (@char('\\') >> @char('\r').maybe >> @char('\n') >> s) /
      (@str("\\") >> @char('(').not.not >> parens) /
      (@str("\\").maybe >> (@char('"').not >> @char('\\').not >> @range(' ', 0x10FFFF)))
    )
    string_literal = (
      @char('"') >>
      string_char.repeat.token(_Token.String) >>
      @char('"')
    )
    prefixed_string_literal = (
      ident_letter.token(_Token.Identifier) >> string_literal
    ).token(_Token.PrefixedString)
    string = string_literal / prefixed_string_literal

    // Define what a character string looks like.
    character_char =
      @str("\\'") / @str("\\\"") / @str("\\\\") /
      @str("\\b") / @str("\\f") / @str("\\n") / @str("\\r") / @str("\\t") /
      @str("\b")  / @str("\f")  / @str("\n")  / @str("\r")  / @str("\t") /
      (@str("\\x") >> digithex >> digithex) /
      (@str("\\u") >> digithex >> digithex >> digithex >> digithex) /
      (@str("\\U") >> digithex >> digithex >> digithex >> digithex >>
        digithex >> digithex >> digithex >> digithex) /
      (@char('\'').not >> @char('\\').not >> @range(' ', 0x10FFFF))
    character =
      @char('\'') >> character_char.repeat.token(_Token.Character) >> @char('\'')

    // Define what a nestable bracket_string string looks like.
    bracket_string_content = @declare
    bracket_string = @str("<<<") >> bracket_string_content.token(_Token.BracketString) >> @str(">>>")
    bracket_string_no_token = @str("<<<") >> bracket_string_content >> @str(">>>")
    bracket_string_content.define(
      (bracket_string_no_token / (@str(">>>").not >> @any)).repeat
    )

    // Define an atom to be a single term with no binary operators.
    anystring = string / character / bracket_string
    atom = parens / anystring / float / integer / ident

    // Define a compound to be a closely bound chain of atoms.
    opcap = @char('\'').token(_Token.Operator)
    opdot = @char('.').token(_Token.Operator)
    oparrow = (@str("->")).token(_Token.Operator)
    compound_without_prefix = (atom >> (
      (opcap >> ident) / \
      (s >> oparrow >> s >> atom) / \
      (sn >> opdot >> sn >> atom) / \
      parens
    ).repeat >> (s >> eol_annotation).maybe).token(_Token.Compound)

    // A compound may be optionally preceded by a prefix operator.
    prefixop = (@str("--") / @char('!') / @char('~')).token(_Token.Operator)
    compound_with_prefix = (prefixop >> compound_without_prefix).token(_Token.Prefix)
    compound = compound_with_prefix / compound_without_prefix

    // Define groups of operators, in order of precedence,
    // from most tightly binding to most loosely binding.
    // Operators in the same group have the same level of precedence.
    opw = (@char(' ') / @char('\t'))
    op1 = (@str("*!") / @char('*') / @char('/') / @char('%')).token(_Token.Operator)
    op2 = (@str("+!") / @str("-!") / @char('+') / (@char('-') >> digit.not)).token(_Token.Operator)
    op3 = (@str("<|>") / @str("<~>") / @str("<<~") / @str("~>>") /
      @str("<<") / @str(">>") / @str("<~") / @str("~>") /
      @str("<:") / @str("!<:") /
      @str(">=") / @str("<=") / @char('<') / @char('>') /
      @str("===") / @str("==") / @str("!==") / @str("!=") /
      @str("=~")).token(_Token.Operator)
    op4 = (@str("&&") / @str("||")).token(_Token.Operator)
    ope = (@str("+=") / @str("-=") / @str("<<=") / @char('=')).token(_Token.Operator)
    ope_colon = @char(':').token(_Token.Operator)

    // Construct the nested possible relations for each group of operators.
    tw = compound
    t1 = ((tw >> (opw >> s >> tw).repeat(1)).token(_Token.GroupWhitespace) >> s) / tw
    t2 = (t1 >> (sn >> op1 >> sn >> t1).repeat).token(_Token.Relate)
    t3 = (t2 >> (sn >> op2 >> sn >> t2).repeat).token(_Token.Relate)
    t4 = (t3 >> (sn >> op3 >> sn >> t3).repeat).token(_Token.Relate)
    te = (t4 >> (sn >> op4 >> sn >> t4).repeat).token(_Token.Relate)
    t = (
      te >> (
        // Newlines cannot precede the colon form of `ope`,
        // but any other `ope` can be preceded by a newline.
        s >> (ope_colon / (sn >> ope)) >> sn >> te
      ).repeat
    ).token(_Token.RelateRight) >> s

    // Define what a comma/newline-separated sequence of terms looks like.
    decl = @declare
    term = decl / t
    termsl = term >> s >> (@char(',') >> sn >> term >> s).repeat >> (@char(',') >> s).maybe
    terms = (termsl >> sn).repeat

    // Define groups that are pipe-partitioned sequences of terms.
    pipesep = @char('/').token(_Token.Operator)
    ptermsp =
      pipesep.maybe >> sn >>
      (terms >> sn >> pipesep >> sn).repeat >>
      terms >> sn >>
      pipesep.maybe >> sn
    parens.define(
      (@str("^(") >> sn >> ptermsp.maybe >> sn >> @char(')')).token(_Token.Group) /
      (@char('(') >> sn >> ptermsp.maybe >> sn >> @char(')')).token(_Token.Group) /
      (@char('[') >> sn >> ptermsp.maybe >> sn >> @char(']') >> @char('!').maybe).token(_Token.Group)
    )

    // Define what a declaration looks like.
    decl.define(
      (@char(':') >> ident >> (s >> compound).repeat >> s).token(_Token.Declare) >>
      (@char(':') / newline.not.not)
    )

    // Define a total document to be a sequence of lines.
    doc = (sn >> terms).token(_Token.Document)

    // A valid parse is a single document followed by the end of the file.
    @root = doc.then_eof
