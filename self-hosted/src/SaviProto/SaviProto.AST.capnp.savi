///
// NOTE: This file was auto-generated from a Cap'n Proto file
// using the `capnp` compiler with the `--output=savi` option.

:struct box SaviProto.AST
  :let _p CapnProto.Pointer.Struct
  :new box read_from_pointer(@_p)
  :new val read_val_from_pointer(p CapnProto.Pointer.Struct'val): @_p = p

  :const capn_proto_data_word_count U16: 2
  :const capn_proto_pointer_count U16: 3
  :fun capn_proto_address U64: @_p.capn_proto_address

  :is TraceData
  :fun trace_data(trace TraceData.Observer)
    trace.object(@_p.absolute_address) -> (
      try trace.property("position", @position_if_set!)
      try trace.property("none", @none!)
      try trace.property("character", @character!)
      try trace.property("positive_integer", @positive_integer!)
      try trace.property("negative_integer", @negative_integer!)
      try trace.property("floating_point", @floating_point!)
      try trace.property("name", @name!)
      try trace.property("string", @string!)
      try trace.property("string_with_prefix", @string_with_prefix!)
      try trace.property("string_compose", @string_compose!)
      try trace.property("prefix", @prefix!)
      try trace.property("qualify", @qualify!)
      try trace.property("group", @group!)
      try trace.property("relate", @relate!)
      try trace.property("field_read", @field_read!)
      try trace.property("field_write", @field_write!)
      try trace.property("field_displace", @field_displace!)
      try trace.property("call", @call!)
      try trace.property("choice", @choice!)
      try trace.property("loop", @loop!)
      try trace.property("try", @try!)
      try trace.property("jump", @jump!)
      try trace.property("yield", @yield!)
    )

  :fun position: SaviProto.Source.Position.read_from_pointer(@_p.struct(0))
  :fun position_if_set!: SaviProto.Source.Position.read_from_pointer(@_p.struct_if_set!(0))

  :fun is_none: @_p.check_union(0x0, 0)
  :fun none!: @_p.assert_union!(0x0, 0), None
  :fun none_if_set!: @_p.assert_union!(0x0, 0), None

  :fun is_character: @_p.check_union(0x0, 1)
  :fun character!: @_p.assert_union!(0x0, 1), @_p.u64(0x8)
  :fun character_if_set!: @_p.assert_union!(0x0, 1), @_p.u64_if_set!(0x8)

  :fun is_positive_integer: @_p.check_union(0x0, 2)
  :fun positive_integer!: @_p.assert_union!(0x0, 2), @_p.u64(0x8)
  :fun positive_integer_if_set!: @_p.assert_union!(0x0, 2), @_p.u64_if_set!(0x8)

  :fun is_negative_integer: @_p.check_union(0x0, 3)
  :fun negative_integer!: @_p.assert_union!(0x0, 3), @_p.u64(0x8)
  :fun negative_integer_if_set!: @_p.assert_union!(0x0, 3), @_p.u64_if_set!(0x8)

  :fun is_floating_point: @_p.check_union(0x0, 4)
  :fun floating_point!: @_p.assert_union!(0x0, 4), @_p.f64(0x8)
  :fun floating_point_if_set!: @_p.assert_union!(0x0, 4), @_p.f64_if_set!(0x8)

  :fun is_name: @_p.check_union(0x0, 5)
  :fun name!: @_p.assert_union!(0x0, 5), @_p.text(1)
  :fun name_if_set!: @_p.assert_union!(0x0, 5), @_p.text_if_set!(1)

  :fun is_string: @_p.check_union(0x0, 6)
  :fun string!: @_p.assert_union!(0x0, 6), @_p.text(1)
  :fun string_if_set!: @_p.assert_union!(0x0, 6), @_p.text_if_set!(1)

  :fun is_string_with_prefix: @_p.check_union(0x0, 7)
  :fun string_with_prefix!: @_p.assert_union!(0x0, 7), SaviProto.AST.AS_stringWithPrefix.read_from_pointer(@_p)
  :fun string_with_prefix_if_set!: @_p.assert_union!(0x0, 7), SaviProto.AST.AS_stringWithPrefix.read_from_pointer(@_p)

  :fun is_string_compose: @_p.check_union(0x0, 8)
  :fun string_compose!: @_p.assert_union!(0x0, 8), SaviProto.AST.AS_stringCompose.read_from_pointer(@_p)
  :fun string_compose_if_set!: @_p.assert_union!(0x0, 8), SaviProto.AST.AS_stringCompose.read_from_pointer(@_p)

  :fun is_prefix: @_p.check_union(0x0, 9)
  :fun prefix!: @_p.assert_union!(0x0, 9), SaviProto.AST.AS_prefix.read_from_pointer(@_p)
  :fun prefix_if_set!: @_p.assert_union!(0x0, 9), SaviProto.AST.AS_prefix.read_from_pointer(@_p)

  :fun is_qualify: @_p.check_union(0x0, 10)
  :fun qualify!: @_p.assert_union!(0x0, 10), SaviProto.AST.AS_qualify.read_from_pointer(@_p)
  :fun qualify_if_set!: @_p.assert_union!(0x0, 10), SaviProto.AST.AS_qualify.read_from_pointer(@_p)

  :fun is_group: @_p.check_union(0x0, 11)
  :fun group!: @_p.assert_union!(0x0, 11), SaviProto.AST.Group.read_from_pointer(@_p.struct(1))
  :fun group_if_set!: @_p.assert_union!(0x0, 11), SaviProto.AST.Group.read_from_pointer(@_p.struct_if_set!(1))

  :fun is_relate: @_p.check_union(0x0, 12)
  :fun relate!: @_p.assert_union!(0x0, 12), SaviProto.AST.AS_relate.read_from_pointer(@_p)
  :fun relate_if_set!: @_p.assert_union!(0x0, 12), SaviProto.AST.AS_relate.read_from_pointer(@_p)

  :fun is_field_read: @_p.check_union(0x0, 13)
  :fun field_read!: @_p.assert_union!(0x0, 13), SaviProto.AST.AS_fieldRead.read_from_pointer(@_p)
  :fun field_read_if_set!: @_p.assert_union!(0x0, 13), SaviProto.AST.AS_fieldRead.read_from_pointer(@_p)

  :fun is_field_write: @_p.check_union(0x0, 14)
  :fun field_write!: @_p.assert_union!(0x0, 14), SaviProto.AST.AS_fieldWrite.read_from_pointer(@_p)
  :fun field_write_if_set!: @_p.assert_union!(0x0, 14), SaviProto.AST.AS_fieldWrite.read_from_pointer(@_p)

  :fun is_field_displace: @_p.check_union(0x0, 15)
  :fun field_displace!: @_p.assert_union!(0x0, 15), SaviProto.AST.AS_fieldDisplace.read_from_pointer(@_p)
  :fun field_displace_if_set!: @_p.assert_union!(0x0, 15), SaviProto.AST.AS_fieldDisplace.read_from_pointer(@_p)

  :fun is_call: @_p.check_union(0x0, 16)
  :fun call!: @_p.assert_union!(0x0, 16), SaviProto.AST.Call.read_from_pointer(@_p.struct(1))
  :fun call_if_set!: @_p.assert_union!(0x0, 16), SaviProto.AST.Call.read_from_pointer(@_p.struct_if_set!(1))

  :fun is_choice: @_p.check_union(0x0, 17)
  :fun choice!: @_p.assert_union!(0x0, 17), SaviProto.AST.AS_choice.read_from_pointer(@_p)
  :fun choice_if_set!: @_p.assert_union!(0x0, 17), SaviProto.AST.AS_choice.read_from_pointer(@_p)

  :fun is_loop: @_p.check_union(0x0, 18)
  :fun loop!: @_p.assert_union!(0x0, 18), SaviProto.AST.Loop.read_from_pointer(@_p.struct(1))
  :fun loop_if_set!: @_p.assert_union!(0x0, 18), SaviProto.AST.Loop.read_from_pointer(@_p.struct_if_set!(1))

  :fun is_try: @_p.check_union(0x0, 19)
  :fun try!: @_p.assert_union!(0x0, 19), SaviProto.AST.Try.read_from_pointer(@_p.struct(1))
  :fun try_if_set!: @_p.assert_union!(0x0, 19), SaviProto.AST.Try.read_from_pointer(@_p.struct_if_set!(1))

  :fun is_jump: @_p.check_union(0x0, 20)
  :fun jump!: @_p.assert_union!(0x0, 20), SaviProto.AST.AS_jump.read_from_pointer(@_p)
  :fun jump_if_set!: @_p.assert_union!(0x0, 20), SaviProto.AST.AS_jump.read_from_pointer(@_p)

  :fun is_yield: @_p.check_union(0x0, 21)
  :fun yield!: @_p.assert_union!(0x0, 21), SaviProto.AST.AS_yield.read_from_pointer(@_p)
  :fun yield_if_set!: @_p.assert_union!(0x0, 21), SaviProto.AST.AS_yield.read_from_pointer(@_p)

:struct box SaviProto.AST.AS_stringWithPrefix
  :let _p CapnProto.Pointer.Struct
  :new box read_from_pointer(@_p)
  :new val read_val_from_pointer(p CapnProto.Pointer.Struct'val): @_p = p

  :const capn_proto_data_word_count U16: 2
  :const capn_proto_pointer_count U16: 3
  :fun capn_proto_address U64: @_p.capn_proto_address

  :is TraceData
  :fun trace_data(trace TraceData.Observer)
    trace.object(0) -> (
      try trace.property("prefix", @prefix_if_set!)
      try trace.property("string", @string_if_set!)
    )

  :fun prefix: SaviProto.AST.Name.read_from_pointer(@_p.struct(1))
  :fun prefix_if_set!: SaviProto.AST.Name.read_from_pointer(@_p.struct_if_set!(1))

  :fun string: @_p.text(2)
  :fun string_if_set!: @_p.text_if_set!(2)

:struct box SaviProto.AST.AS_stringCompose
  :let _p CapnProto.Pointer.Struct
  :new box read_from_pointer(@_p)
  :new val read_val_from_pointer(p CapnProto.Pointer.Struct'val): @_p = p

  :const capn_proto_data_word_count U16: 2
  :const capn_proto_pointer_count U16: 3
  :fun capn_proto_address U64: @_p.capn_proto_address

  :is TraceData
  :fun trace_data(trace TraceData.Observer)
    trace.object(0) -> (
      try trace.property("prefix", @prefix_if_set!)
      try trace.property("terms", @terms_if_set!)
    )

  :fun prefix: SaviProto.AST.Name.read_from_pointer(@_p.struct(1))
  :fun prefix_if_set!: SaviProto.AST.Name.read_from_pointer(@_p.struct_if_set!(1))

  :fun terms: CapnProto.List(SaviProto.AST).read_from_pointer(@_p.list(2))
  :fun terms_if_set!: CapnProto.List(SaviProto.AST).read_from_pointer(@_p.list_if_set!(2))

:struct box SaviProto.AST.AS_prefix
  :let _p CapnProto.Pointer.Struct
  :new box read_from_pointer(@_p)
  :new val read_val_from_pointer(p CapnProto.Pointer.Struct'val): @_p = p

  :const capn_proto_data_word_count U16: 2
  :const capn_proto_pointer_count U16: 3
  :fun capn_proto_address U64: @_p.capn_proto_address

  :is TraceData
  :fun trace_data(trace TraceData.Observer)
    trace.object(0) -> (
      try trace.property("op", @op_if_set!)
      try trace.property("term", @term_if_set!)
    )

  :fun op: SaviProto.AST.Name.read_from_pointer(@_p.struct(1))
  :fun op_if_set!: SaviProto.AST.Name.read_from_pointer(@_p.struct_if_set!(1))

  :fun term: SaviProto.AST.read_from_pointer(@_p.struct(2))
  :fun term_if_set!: SaviProto.AST.read_from_pointer(@_p.struct_if_set!(2))

:struct box SaviProto.AST.AS_qualify
  :let _p CapnProto.Pointer.Struct
  :new box read_from_pointer(@_p)
  :new val read_val_from_pointer(p CapnProto.Pointer.Struct'val): @_p = p

  :const capn_proto_data_word_count U16: 2
  :const capn_proto_pointer_count U16: 3
  :fun capn_proto_address U64: @_p.capn_proto_address

  :is TraceData
  :fun trace_data(trace TraceData.Observer)
    trace.object(0) -> (
      try trace.property("term", @term_if_set!)
      try trace.property("group", @group_if_set!)
    )

  :fun term: SaviProto.AST.read_from_pointer(@_p.struct(1))
  :fun term_if_set!: SaviProto.AST.read_from_pointer(@_p.struct_if_set!(1))

  :fun group: SaviProto.AST.Group.read_from_pointer(@_p.struct(2))
  :fun group_if_set!: SaviProto.AST.Group.read_from_pointer(@_p.struct_if_set!(2))

:struct box SaviProto.AST.AS_relate
  :let _p CapnProto.Pointer.Struct
  :new box read_from_pointer(@_p)
  :new val read_val_from_pointer(p CapnProto.Pointer.Struct'val): @_p = p

  :const capn_proto_data_word_count U16: 2
  :const capn_proto_pointer_count U16: 3
  :fun capn_proto_address U64: @_p.capn_proto_address

  :is TraceData
  :fun trace_data(trace TraceData.Observer)
    trace.object(0) -> (
      try trace.property("op", @op_if_set!)
      try trace.property("terms", @terms_if_set!)
    )

  :fun op: SaviProto.AST.Name.read_from_pointer(@_p.struct(1))
  :fun op_if_set!: SaviProto.AST.Name.read_from_pointer(@_p.struct_if_set!(1))

  :fun terms: SaviProto.AST.Pair.read_from_pointer(@_p.struct(2))
  :fun terms_if_set!: SaviProto.AST.Pair.read_from_pointer(@_p.struct_if_set!(2))

:struct box SaviProto.AST.AS_fieldRead
  :let _p CapnProto.Pointer.Struct
  :new box read_from_pointer(@_p)
  :new val read_val_from_pointer(p CapnProto.Pointer.Struct'val): @_p = p

  :const capn_proto_data_word_count U16: 2
  :const capn_proto_pointer_count U16: 3
  :fun capn_proto_address U64: @_p.capn_proto_address

  :is TraceData
  :fun trace_data(trace TraceData.Observer)
    trace.object(0) -> (
      try trace.property("field", @field_if_set!)
    )

  :fun field: @_p.text(1)
  :fun field_if_set!: @_p.text_if_set!(1)

:struct box SaviProto.AST.AS_fieldWrite
  :let _p CapnProto.Pointer.Struct
  :new box read_from_pointer(@_p)
  :new val read_val_from_pointer(p CapnProto.Pointer.Struct'val): @_p = p

  :const capn_proto_data_word_count U16: 2
  :const capn_proto_pointer_count U16: 3
  :fun capn_proto_address U64: @_p.capn_proto_address

  :is TraceData
  :fun trace_data(trace TraceData.Observer)
    trace.object(0) -> (
      try trace.property("field", @field_if_set!)
      try trace.property("value", @value_if_set!)
    )

  :fun field: @_p.text(1)
  :fun field_if_set!: @_p.text_if_set!(1)

  :fun value: SaviProto.AST.read_from_pointer(@_p.struct(2))
  :fun value_if_set!: SaviProto.AST.read_from_pointer(@_p.struct_if_set!(2))

:struct box SaviProto.AST.AS_fieldDisplace
  :let _p CapnProto.Pointer.Struct
  :new box read_from_pointer(@_p)
  :new val read_val_from_pointer(p CapnProto.Pointer.Struct'val): @_p = p

  :const capn_proto_data_word_count U16: 2
  :const capn_proto_pointer_count U16: 3
  :fun capn_proto_address U64: @_p.capn_proto_address

  :is TraceData
  :fun trace_data(trace TraceData.Observer)
    trace.object(0) -> (
      try trace.property("field", @field_if_set!)
      try trace.property("value", @value_if_set!)
    )

  :fun field: @_p.text(1)
  :fun field_if_set!: @_p.text_if_set!(1)

  :fun value: SaviProto.AST.read_from_pointer(@_p.struct(2))
  :fun value_if_set!: SaviProto.AST.read_from_pointer(@_p.struct_if_set!(2))

:struct box SaviProto.AST.AS_choice
  :let _p CapnProto.Pointer.Struct
  :new box read_from_pointer(@_p)
  :new val read_val_from_pointer(p CapnProto.Pointer.Struct'val): @_p = p

  :const capn_proto_data_word_count U16: 2
  :const capn_proto_pointer_count U16: 3
  :fun capn_proto_address U64: @_p.capn_proto_address

  :is TraceData
  :fun trace_data(trace TraceData.Observer)
    trace.object(0) -> (
      try trace.property("branches", @branches_if_set!)
    )

  :fun branches: CapnProto.List(SaviProto.AST.ChoiceBranch).read_from_pointer(@_p.list(1))
  :fun branches_if_set!: CapnProto.List(SaviProto.AST.ChoiceBranch).read_from_pointer(@_p.list_if_set!(1))

:struct box SaviProto.AST.AS_jump
  :let _p CapnProto.Pointer.Struct
  :new box read_from_pointer(@_p)
  :new val read_val_from_pointer(p CapnProto.Pointer.Struct'val): @_p = p

  :const capn_proto_data_word_count U16: 2
  :const capn_proto_pointer_count U16: 3
  :fun capn_proto_address U64: @_p.capn_proto_address

  :is TraceData
  :fun trace_data(trace TraceData.Observer)
    trace.object(0) -> (
      try trace.property("term", @term_if_set!)
      try trace.property("kind", @kind_if_set!)
    )

  :fun term: SaviProto.AST.read_from_pointer(@_p.struct(1))
  :fun term_if_set!: SaviProto.AST.read_from_pointer(@_p.struct_if_set!(1))

  :fun kind: SaviProto.AST.JumpKind._new(@_p.u16(0x8))
  :fun kind_if_set!: SaviProto.AST.JumpKind._new(@_p.u16_if_set!(0x8))

:struct box SaviProto.AST.AS_yield
  :let _p CapnProto.Pointer.Struct
  :new box read_from_pointer(@_p)
  :new val read_val_from_pointer(p CapnProto.Pointer.Struct'val): @_p = p

  :const capn_proto_data_word_count U16: 2
  :const capn_proto_pointer_count U16: 3
  :fun capn_proto_address U64: @_p.capn_proto_address

  :is TraceData
  :fun trace_data(trace TraceData.Observer)
    trace.object(0) -> (
      try trace.property("terms", @terms_if_set!)
    )

  :fun terms: CapnProto.List(SaviProto.AST).read_from_pointer(@_p.list(1))
  :fun terms_if_set!: CapnProto.List(SaviProto.AST).read_from_pointer(@_p.list_if_set!(1))

:struct box SaviProto.AST.Annotation
  :let _p CapnProto.Pointer.Struct
  :new box read_from_pointer(@_p)
  :new val read_val_from_pointer(p CapnProto.Pointer.Struct'val): @_p = p

  :const capn_proto_data_word_count U16: 1
  :const capn_proto_pointer_count U16: 2
  :fun capn_proto_address U64: @_p.capn_proto_address

  :is TraceData
  :fun trace_data(trace TraceData.Observer)
    trace.object(@_p.absolute_address) -> (
      try trace.property("position", @position_if_set!)
      try trace.property("target", @target_if_set!)
      try trace.property("value", @value_if_set!)
    )

  :fun position: SaviProto.Source.Position.read_from_pointer(@_p.struct(0))
  :fun position_if_set!: SaviProto.Source.Position.read_from_pointer(@_p.struct_if_set!(0))

  :fun target: @_p.u64(0x0)
  :fun target_if_set!: @_p.u64_if_set!(0x0)

  :fun value: @_p.text(1)
  :fun value_if_set!: @_p.text_if_set!(1)

:struct box SaviProto.AST.Name
  :let _p CapnProto.Pointer.Struct
  :new box read_from_pointer(@_p)
  :new val read_val_from_pointer(p CapnProto.Pointer.Struct'val): @_p = p

  :const capn_proto_data_word_count U16: 0
  :const capn_proto_pointer_count U16: 2
  :fun capn_proto_address U64: @_p.capn_proto_address

  :is TraceData
  :fun trace_data(trace TraceData.Observer)
    trace.object(@_p.absolute_address) -> (
      try trace.property("position", @position_if_set!)
      try trace.property("value", @value_if_set!)
    )

  :fun position: SaviProto.Source.Position.read_from_pointer(@_p.struct(0))
  :fun position_if_set!: SaviProto.Source.Position.read_from_pointer(@_p.struct_if_set!(0))

  :fun value: @_p.text(1)
  :fun value_if_set!: @_p.text_if_set!(1)

:struct box SaviProto.AST.Pair
  :let _p CapnProto.Pointer.Struct
  :new box read_from_pointer(@_p)
  :new val read_val_from_pointer(p CapnProto.Pointer.Struct'val): @_p = p

  :const capn_proto_data_word_count U16: 0
  :const capn_proto_pointer_count U16: 3
  :fun capn_proto_address U64: @_p.capn_proto_address

  :is TraceData
  :fun trace_data(trace TraceData.Observer)
    trace.object(@_p.absolute_address) -> (
      try trace.property("position", @position_if_set!)
      try trace.property("left", @left_if_set!)
      try trace.property("right", @right_if_set!)
    )

  :fun position: SaviProto.Source.Position.read_from_pointer(@_p.struct(0))
  :fun position_if_set!: SaviProto.Source.Position.read_from_pointer(@_p.struct_if_set!(0))

  :fun left: SaviProto.AST.read_from_pointer(@_p.struct(1))
  :fun left_if_set!: SaviProto.AST.read_from_pointer(@_p.struct_if_set!(1))

  :fun right: SaviProto.AST.read_from_pointer(@_p.struct(2))
  :fun right_if_set!: SaviProto.AST.read_from_pointer(@_p.struct_if_set!(2))

:struct box SaviProto.AST.Group
  :let _p CapnProto.Pointer.Struct
  :new box read_from_pointer(@_p)
  :new val read_val_from_pointer(p CapnProto.Pointer.Struct'val): @_p = p

  :const capn_proto_data_word_count U16: 1
  :const capn_proto_pointer_count U16: 2
  :fun capn_proto_address U64: @_p.capn_proto_address

  :is TraceData
  :fun trace_data(trace TraceData.Observer)
    trace.object(@_p.absolute_address) -> (
      try trace.property("position", @position_if_set!)
      try trace.property("style", @style_if_set!)
      try trace.property("terms", @terms_if_set!)
      try trace.property("has_exclamation", @has_exclamation_if_set!)
    )

  :fun position: SaviProto.Source.Position.read_from_pointer(@_p.struct(0))
  :fun position_if_set!: SaviProto.Source.Position.read_from_pointer(@_p.struct_if_set!(0))

  :fun style: SaviProto.AST.Group.Style._new(@_p.u16(0x0))
  :fun style_if_set!: SaviProto.AST.Group.Style._new(@_p.u16_if_set!(0x0))

  :fun terms: CapnProto.List(SaviProto.AST).read_from_pointer(@_p.list(1))
  :fun terms_if_set!: CapnProto.List(SaviProto.AST).read_from_pointer(@_p.list_if_set!(1))

  :fun has_exclamation: @_p.bool(0x2, 0b00000001)
  :fun has_exclamation_if_set!: @_p.bool_if_set!(0x2, 0b00000001)

:enum SaviProto.AST.Group.Style
  :bit_width 16

  :member Root 0
  :member Paren 1
  :member Pipe 2
  :member Square 3
  :member Curly 4
  :member Space 5

  :fun non _new(u16 U16)
    try (
      @from_u64!(u16.u64)
    |
      SaviProto.AST.Group.Style.Root
    )

:struct box SaviProto.AST.Call
  :let _p CapnProto.Pointer.Struct
  :new box read_from_pointer(@_p)
  :new val read_val_from_pointer(p CapnProto.Pointer.Struct'val): @_p = p

  :const capn_proto_data_word_count U16: 0
  :const capn_proto_pointer_count U16: 4
  :fun capn_proto_address U64: @_p.capn_proto_address

  :is TraceData
  :fun trace_data(trace TraceData.Observer)
    trace.object(@_p.absolute_address) -> (
      try trace.property("receiver", @receiver_if_set!)
      try trace.property("name", @name_if_set!)
      try trace.property("args", @args_if_set!)
      try trace.property("yield", @yield_if_set!)
    )

  :fun receiver: SaviProto.AST.read_from_pointer(@_p.struct(0))
  :fun receiver_if_set!: SaviProto.AST.read_from_pointer(@_p.struct_if_set!(0))

  :fun name: SaviProto.AST.Name.read_from_pointer(@_p.struct(1))
  :fun name_if_set!: SaviProto.AST.Name.read_from_pointer(@_p.struct_if_set!(1))

  :fun args: CapnProto.List(SaviProto.AST).read_from_pointer(@_p.list(2))
  :fun args_if_set!: CapnProto.List(SaviProto.AST).read_from_pointer(@_p.list_if_set!(2))

  :fun yield: SaviProto.AST.CallYield.read_from_pointer(@_p.struct(3))
  :fun yield_if_set!: SaviProto.AST.CallYield.read_from_pointer(@_p.struct_if_set!(3))

:struct box SaviProto.AST.CallYield
  :let _p CapnProto.Pointer.Struct
  :new box read_from_pointer(@_p)
  :new val read_val_from_pointer(p CapnProto.Pointer.Struct'val): @_p = p

  :const capn_proto_data_word_count U16: 0
  :const capn_proto_pointer_count U16: 2
  :fun capn_proto_address U64: @_p.capn_proto_address

  :is TraceData
  :fun trace_data(trace TraceData.Observer)
    trace.object(@_p.absolute_address) -> (
      try trace.property("params", @params_if_set!)
      try trace.property("block", @block_if_set!)
    )

  :fun params: SaviProto.AST.Group.read_from_pointer(@_p.struct(0))
  :fun params_if_set!: SaviProto.AST.Group.read_from_pointer(@_p.struct_if_set!(0))

  :fun block: SaviProto.AST.Group.read_from_pointer(@_p.struct(1))
  :fun block_if_set!: SaviProto.AST.Group.read_from_pointer(@_p.struct_if_set!(1))

:struct box SaviProto.AST.ChoiceBranch
  :let _p CapnProto.Pointer.Struct
  :new box read_from_pointer(@_p)
  :new val read_val_from_pointer(p CapnProto.Pointer.Struct'val): @_p = p

  :const capn_proto_data_word_count U16: 0
  :const capn_proto_pointer_count U16: 2
  :fun capn_proto_address U64: @_p.capn_proto_address

  :is TraceData
  :fun trace_data(trace TraceData.Observer)
    trace.object(@_p.absolute_address) -> (
      try trace.property("cond", @cond_if_set!)
      try trace.property("body", @body_if_set!)
    )

  :fun cond: SaviProto.AST.read_from_pointer(@_p.struct(0))
  :fun cond_if_set!: SaviProto.AST.read_from_pointer(@_p.struct_if_set!(0))

  :fun body: SaviProto.AST.read_from_pointer(@_p.struct(1))
  :fun body_if_set!: SaviProto.AST.read_from_pointer(@_p.struct_if_set!(1))

:struct box SaviProto.AST.Loop
  :let _p CapnProto.Pointer.Struct
  :new box read_from_pointer(@_p)
  :new val read_val_from_pointer(p CapnProto.Pointer.Struct'val): @_p = p

  :const capn_proto_data_word_count U16: 0
  :const capn_proto_pointer_count U16: 4
  :fun capn_proto_address U64: @_p.capn_proto_address

  :is TraceData
  :fun trace_data(trace TraceData.Observer)
    trace.object(@_p.absolute_address) -> (
      try trace.property("initial_cond", @initial_cond_if_set!)
      try trace.property("body", @body_if_set!)
      try trace.property("repeat_cond", @repeat_cond_if_set!)
      try trace.property("else_body", @else_body_if_set!)
    )

  :fun initial_cond: SaviProto.AST.read_from_pointer(@_p.struct(0))
  :fun initial_cond_if_set!: SaviProto.AST.read_from_pointer(@_p.struct_if_set!(0))

  :fun body: SaviProto.AST.read_from_pointer(@_p.struct(1))
  :fun body_if_set!: SaviProto.AST.read_from_pointer(@_p.struct_if_set!(1))

  :fun repeat_cond: SaviProto.AST.read_from_pointer(@_p.struct(2))
  :fun repeat_cond_if_set!: SaviProto.AST.read_from_pointer(@_p.struct_if_set!(2))

  :fun else_body: SaviProto.AST.read_from_pointer(@_p.struct(3))
  :fun else_body_if_set!: SaviProto.AST.read_from_pointer(@_p.struct_if_set!(3))

:struct box SaviProto.AST.Try
  :let _p CapnProto.Pointer.Struct
  :new box read_from_pointer(@_p)
  :new val read_val_from_pointer(p CapnProto.Pointer.Struct'val): @_p = p

  :const capn_proto_data_word_count U16: 1
  :const capn_proto_pointer_count U16: 2
  :fun capn_proto_address U64: @_p.capn_proto_address

  :is TraceData
  :fun trace_data(trace TraceData.Observer)
    trace.object(@_p.absolute_address) -> (
      try trace.property("body", @body_if_set!)
      try trace.property("else_body", @else_body_if_set!)
      try trace.property("allow_non_partial_body", @allow_non_partial_body_if_set!)
    )

  :fun body: SaviProto.AST.read_from_pointer(@_p.struct(0))
  :fun body_if_set!: SaviProto.AST.read_from_pointer(@_p.struct_if_set!(0))

  :fun else_body: SaviProto.AST.read_from_pointer(@_p.struct(1))
  :fun else_body_if_set!: SaviProto.AST.read_from_pointer(@_p.struct_if_set!(1))

  :fun allow_non_partial_body: @_p.bool(0x0, 0b00000001)
  :fun allow_non_partial_body_if_set!: @_p.bool_if_set!(0x0, 0b00000001)

:enum SaviProto.AST.JumpKind
  :bit_width 16

  :member Error 0
  :member Return 1
  :member Break 2
  :member Next 3

  :fun non _new(u16 U16)
    try (
      @from_u64!(u16.u64)
    |
      SaviProto.AST.JumpKind.Error
    )

:struct box SaviProto.AST.Declare
  :let _p CapnProto.Pointer.Struct
  :new box read_from_pointer(@_p)
  :new val read_val_from_pointer(p CapnProto.Pointer.Struct'val): @_p = p

  :const capn_proto_data_word_count U16: 0
  :const capn_proto_pointer_count U16: 4
  :fun capn_proto_address U64: @_p.capn_proto_address

  :is TraceData
  :fun trace_data(trace TraceData.Observer)
    trace.object(@_p.absolute_address) -> (
      try trace.property("terms", @terms_if_set!)
      try trace.property("main_annotation", @main_annotation_if_set!)
      try trace.property("body_annotations", @body_annotations_if_set!)
      try trace.property("body", @body_if_set!)
    )

  :fun terms: CapnProto.List(SaviProto.AST).read_from_pointer(@_p.list(0))
  :fun terms_if_set!: CapnProto.List(SaviProto.AST).read_from_pointer(@_p.list_if_set!(0))

  :fun main_annotation: @_p.text(1)
  :fun main_annotation_if_set!: @_p.text_if_set!(1)

  :fun body_annotations: CapnProto.List(SaviProto.AST.Annotation).read_from_pointer(@_p.list(2))
  :fun body_annotations_if_set!: CapnProto.List(SaviProto.AST.Annotation).read_from_pointer(@_p.list_if_set!(2))

  :fun body: SaviProto.AST.Group.read_from_pointer(@_p.struct(3))
  :fun body_if_set!: SaviProto.AST.Group.read_from_pointer(@_p.struct_if_set!(3))

:struct box SaviProto.AST.Document
  :let _p CapnProto.Pointer.Struct
  :new box read_from_pointer(@_p)
  :new val read_val_from_pointer(p CapnProto.Pointer.Struct'val): @_p = p

  :const capn_proto_data_word_count U16: 0
  :const capn_proto_pointer_count U16: 3
  :fun capn_proto_address U64: @_p.capn_proto_address

  :is TraceData
  :fun trace_data(trace TraceData.Observer)
    trace.object(@_p.absolute_address) -> (
      try trace.property("source", @source_if_set!)
      try trace.property("declares", @declares_if_set!)
      try trace.property("bodies", @bodies_if_set!)
    )

  :fun source: SaviProto.Source.read_from_pointer(@_p.struct(0))
  :fun source_if_set!: SaviProto.Source.read_from_pointer(@_p.struct_if_set!(0))

  :fun declares: CapnProto.List(SaviProto.AST.Declare).read_from_pointer(@_p.list(1))
  :fun declares_if_set!: CapnProto.List(SaviProto.AST.Declare).read_from_pointer(@_p.list_if_set!(1))

  :fun bodies: CapnProto.List(SaviProto.AST.Group).read_from_pointer(@_p.list(2))
  :fun bodies_if_set!: CapnProto.List(SaviProto.AST.Group).read_from_pointer(@_p.list_if_set!(2))

:struct SaviProto.AST.Builder
  :let _p CapnProto.Pointer.Struct.Builder
  :new from_pointer(@_p)
  :fun as_reader: SaviProto.AST.read_from_pointer(@_p.as_reader)

  :const capn_proto_data_word_count U16: 2
  :const capn_proto_pointer_count U16: 3
  :fun capn_proto_address U64: @_p.capn_proto_address

  :is TraceData
  :fun trace_data(trace TraceData.Observer)
    @as_reader.trace_data(trace)

  :fun ref copy_data_from(other SaviProto.AST) None
    try (other_position = other.position_if_set!, @position.copy_data_from(other_position))
    if other.is_none @init_none
    try @_p.set_u64(0x8, other.character!, 0)
    try @_p.set_u64(0x8, other.positive_integer!, 0)
    try @_p.set_u64(0x8, other.negative_integer!, 0)
    try @_p.set_f64(0x8, other.floating_point!, 0.0)
    try @_p.set_text(1, "\(other.name!)", "")
    try @_p.set_text(1, "\(other.string!)", "")
    try (other_string_with_prefix = other.string_with_prefix!, @init_string_with_prefix.copy_data_from(other_string_with_prefix))
    try (other_string_compose = other.string_compose!, @init_string_compose.copy_data_from(other_string_compose))
    try (other_prefix = other.prefix!, @init_prefix.copy_data_from(other_prefix))
    try (other_qualify = other.qualify!, @init_qualify.copy_data_from(other_qualify))
    try (other_group = other.group!, @init_group.copy_data_from(other_group))
    try (other_relate = other.relate!, @init_relate.copy_data_from(other_relate))
    try (other_field_read = other.field_read!, @init_field_read.copy_data_from(other_field_read))
    try (other_field_write = other.field_write!, @init_field_write.copy_data_from(other_field_write))
    try (other_field_displace = other.field_displace!, @init_field_displace.copy_data_from(other_field_displace))
    try (other_call = other.call!, @init_call.copy_data_from(other_call))
    try (other_choice = other.choice!, @init_choice.copy_data_from(other_choice))
    try (other_loop = other.loop!, @init_loop.copy_data_from(other_loop))
    try (other_try = other.try!, @init_try.copy_data_from(other_try))
    try (other_jump = other.jump!, @init_jump.copy_data_from(other_jump))
    try (other_yield = other.yield!, @init_yield.copy_data_from(other_yield))

  :fun ref position: SaviProto.Source.Position.Builder.from_pointer(@_p.struct(0, 2, 1))
  :fun ref position_if_set!: SaviProto.Source.Position.Builder.from_pointer(@_p.struct_if_set!(0, 2, 1))
  :fun ref set_position_to_point_to_existing(existing SaviProto.Source.Position.Builder): SaviProto.Source.Position.Builder.from_pointer(@_p.set_struct_to_point_to_existing(0, existing._p))

  :fun is_none: @_p.check_union(0x0, 0)
  :fun none!: @_p.assert_union!(0x0, 0), None
  :fun none_if_set!: @_p.assert_union!(0x0, 0), None
  :fun ref init_none
    @_p.mark_union(0x0, 0)
    None

  :fun is_character: @_p.check_union(0x0, 1)
  :fun character!: @_p.assert_union!(0x0, 1), @_p.u64(0x8)
  :fun character_if_set!: @_p.assert_union!(0x0, 1), @_p.u64_if_set!(0x8)
  :fun ref init_character(new_value)
    @_p.set_u64(0x8, new_value, 0)
    @_p.mark_union(0x0, 1)
    @_p.u64(0x8)

  :fun is_positive_integer: @_p.check_union(0x0, 2)
  :fun positive_integer!: @_p.assert_union!(0x0, 2), @_p.u64(0x8)
  :fun positive_integer_if_set!: @_p.assert_union!(0x0, 2), @_p.u64_if_set!(0x8)
  :fun ref init_positive_integer(new_value)
    @_p.set_u64(0x8, new_value, 0)
    @_p.mark_union(0x0, 2)
    @_p.u64(0x8)

  :fun is_negative_integer: @_p.check_union(0x0, 3)
  :fun negative_integer!: @_p.assert_union!(0x0, 3), @_p.u64(0x8)
  :fun negative_integer_if_set!: @_p.assert_union!(0x0, 3), @_p.u64_if_set!(0x8)
  :fun ref init_negative_integer(new_value)
    @_p.set_u64(0x8, new_value, 0)
    @_p.mark_union(0x0, 3)
    @_p.u64(0x8)

  :fun is_floating_point: @_p.check_union(0x0, 4)
  :fun floating_point!: @_p.assert_union!(0x0, 4), @_p.f64(0x8)
  :fun floating_point_if_set!: @_p.assert_union!(0x0, 4), @_p.f64_if_set!(0x8)
  :fun ref init_floating_point(new_value)
    @_p.set_f64(0x8, new_value, 0.0)
    @_p.mark_union(0x0, 4)
    @_p.f64(0x8)

  :fun is_name: @_p.check_union(0x0, 5)
  :fun ref name!: @_p.assert_union!(0x0, 5), @_p.text(1)
  :fun ref name_if_set!: @_p.assert_union!(0x0, 5), @_p.text_if_set!(1)
  :fun ref init_name(new_value)
    @_p.set_text(1, new_value, "")
    @_p.mark_union(0x0, 5)
    @_p.text(1)

  :fun is_string: @_p.check_union(0x0, 6)
  :fun ref string!: @_p.assert_union!(0x0, 6), @_p.text(1)
  :fun ref string_if_set!: @_p.assert_union!(0x0, 6), @_p.text_if_set!(1)
  :fun ref init_string(new_value)
    @_p.set_text(1, new_value, "")
    @_p.mark_union(0x0, 6)
    @_p.text(1)

  :fun is_string_with_prefix: @_p.check_union(0x0, 7)
  :fun ref string_with_prefix!: @_p.assert_union!(0x0, 7), SaviProto.AST.AS_stringWithPrefix.Builder.from_pointer(@_p)
  :fun ref string_with_prefix_if_set!: @_p.assert_union!(0x0, 7), SaviProto.AST.AS_stringWithPrefix.Builder.from_pointer(@_p)
  :fun ref init_string_with_prefix
    @_p.clear_pointer(1) // prefix
    @_p.clear_pointer(2) // string
    @_p.mark_union(0x0, 7)
    SaviProto.AST.AS_stringWithPrefix.Builder.from_pointer(@_p)

  :fun is_string_compose: @_p.check_union(0x0, 8)
  :fun ref string_compose!: @_p.assert_union!(0x0, 8), SaviProto.AST.AS_stringCompose.Builder.from_pointer(@_p)
  :fun ref string_compose_if_set!: @_p.assert_union!(0x0, 8), SaviProto.AST.AS_stringCompose.Builder.from_pointer(@_p)
  :fun ref init_string_compose
    @_p.clear_pointer(1) // prefix
    @_p.clear_pointer(2) // terms
    @_p.mark_union(0x0, 8)
    SaviProto.AST.AS_stringCompose.Builder.from_pointer(@_p)

  :fun is_prefix: @_p.check_union(0x0, 9)
  :fun ref prefix!: @_p.assert_union!(0x0, 9), SaviProto.AST.AS_prefix.Builder.from_pointer(@_p)
  :fun ref prefix_if_set!: @_p.assert_union!(0x0, 9), SaviProto.AST.AS_prefix.Builder.from_pointer(@_p)
  :fun ref init_prefix
    @_p.clear_pointer(1) // op
    @_p.clear_pointer(2) // term
    @_p.mark_union(0x0, 9)
    SaviProto.AST.AS_prefix.Builder.from_pointer(@_p)

  :fun is_qualify: @_p.check_union(0x0, 10)
  :fun ref qualify!: @_p.assert_union!(0x0, 10), SaviProto.AST.AS_qualify.Builder.from_pointer(@_p)
  :fun ref qualify_if_set!: @_p.assert_union!(0x0, 10), SaviProto.AST.AS_qualify.Builder.from_pointer(@_p)
  :fun ref init_qualify
    @_p.clear_pointer(1) // term
    @_p.clear_pointer(2) // group
    @_p.mark_union(0x0, 10)
    SaviProto.AST.AS_qualify.Builder.from_pointer(@_p)

  :fun is_group: @_p.check_union(0x0, 11)
  :fun ref group!: @_p.assert_union!(0x0, 11), SaviProto.AST.Group.Builder.from_pointer(@_p.struct(1, 1, 2))
  :fun ref group_if_set!: @_p.assert_union!(0x0, 11), SaviProto.AST.Group.Builder.from_pointer(@_p.struct_if_set!(1, 1, 2))
  :fun ref init_group
    @_p.clear_pointer(1) // group
    @_p.mark_union(0x0, 11)
    SaviProto.AST.Group.Builder.from_pointer(@_p.struct(1, 1, 2))

  :fun is_relate: @_p.check_union(0x0, 12)
  :fun ref relate!: @_p.assert_union!(0x0, 12), SaviProto.AST.AS_relate.Builder.from_pointer(@_p)
  :fun ref relate_if_set!: @_p.assert_union!(0x0, 12), SaviProto.AST.AS_relate.Builder.from_pointer(@_p)
  :fun ref init_relate
    @_p.clear_pointer(1) // op
    @_p.clear_pointer(2) // terms
    @_p.mark_union(0x0, 12)
    SaviProto.AST.AS_relate.Builder.from_pointer(@_p)

  :fun is_field_read: @_p.check_union(0x0, 13)
  :fun ref field_read!: @_p.assert_union!(0x0, 13), SaviProto.AST.AS_fieldRead.Builder.from_pointer(@_p)
  :fun ref field_read_if_set!: @_p.assert_union!(0x0, 13), SaviProto.AST.AS_fieldRead.Builder.from_pointer(@_p)
  :fun ref init_field_read
    @_p.clear_pointer(1) // field
    @_p.mark_union(0x0, 13)
    SaviProto.AST.AS_fieldRead.Builder.from_pointer(@_p)

  :fun is_field_write: @_p.check_union(0x0, 14)
  :fun ref field_write!: @_p.assert_union!(0x0, 14), SaviProto.AST.AS_fieldWrite.Builder.from_pointer(@_p)
  :fun ref field_write_if_set!: @_p.assert_union!(0x0, 14), SaviProto.AST.AS_fieldWrite.Builder.from_pointer(@_p)
  :fun ref init_field_write
    @_p.clear_pointer(1) // field
    @_p.clear_pointer(2) // value
    @_p.mark_union(0x0, 14)
    SaviProto.AST.AS_fieldWrite.Builder.from_pointer(@_p)

  :fun is_field_displace: @_p.check_union(0x0, 15)
  :fun ref field_displace!: @_p.assert_union!(0x0, 15), SaviProto.AST.AS_fieldDisplace.Builder.from_pointer(@_p)
  :fun ref field_displace_if_set!: @_p.assert_union!(0x0, 15), SaviProto.AST.AS_fieldDisplace.Builder.from_pointer(@_p)
  :fun ref init_field_displace
    @_p.clear_pointer(1) // field
    @_p.clear_pointer(2) // value
    @_p.mark_union(0x0, 15)
    SaviProto.AST.AS_fieldDisplace.Builder.from_pointer(@_p)

  :fun is_call: @_p.check_union(0x0, 16)
  :fun ref call!: @_p.assert_union!(0x0, 16), SaviProto.AST.Call.Builder.from_pointer(@_p.struct(1, 0, 4))
  :fun ref call_if_set!: @_p.assert_union!(0x0, 16), SaviProto.AST.Call.Builder.from_pointer(@_p.struct_if_set!(1, 0, 4))
  :fun ref init_call
    @_p.clear_pointer(1) // call
    @_p.mark_union(0x0, 16)
    SaviProto.AST.Call.Builder.from_pointer(@_p.struct(1, 0, 4))

  :fun is_choice: @_p.check_union(0x0, 17)
  :fun ref choice!: @_p.assert_union!(0x0, 17), SaviProto.AST.AS_choice.Builder.from_pointer(@_p)
  :fun ref choice_if_set!: @_p.assert_union!(0x0, 17), SaviProto.AST.AS_choice.Builder.from_pointer(@_p)
  :fun ref init_choice
    @_p.clear_pointer(1) // branches
    @_p.mark_union(0x0, 17)
    SaviProto.AST.AS_choice.Builder.from_pointer(@_p)

  :fun is_loop: @_p.check_union(0x0, 18)
  :fun ref loop!: @_p.assert_union!(0x0, 18), SaviProto.AST.Loop.Builder.from_pointer(@_p.struct(1, 0, 4))
  :fun ref loop_if_set!: @_p.assert_union!(0x0, 18), SaviProto.AST.Loop.Builder.from_pointer(@_p.struct_if_set!(1, 0, 4))
  :fun ref init_loop
    @_p.clear_pointer(1) // loop
    @_p.mark_union(0x0, 18)
    SaviProto.AST.Loop.Builder.from_pointer(@_p.struct(1, 0, 4))

  :fun is_try: @_p.check_union(0x0, 19)
  :fun ref try!: @_p.assert_union!(0x0, 19), SaviProto.AST.Try.Builder.from_pointer(@_p.struct(1, 1, 2))
  :fun ref try_if_set!: @_p.assert_union!(0x0, 19), SaviProto.AST.Try.Builder.from_pointer(@_p.struct_if_set!(1, 1, 2))
  :fun ref init_try
    @_p.clear_pointer(1) // try
    @_p.mark_union(0x0, 19)
    SaviProto.AST.Try.Builder.from_pointer(@_p.struct(1, 1, 2))

  :fun is_jump: @_p.check_union(0x0, 20)
  :fun ref jump!: @_p.assert_union!(0x0, 20), SaviProto.AST.AS_jump.Builder.from_pointer(@_p)
  :fun ref jump_if_set!: @_p.assert_union!(0x0, 20), SaviProto.AST.AS_jump.Builder.from_pointer(@_p)
  :fun ref init_jump
    @_p.clear_pointer(1) // term
    @_p.clear_16(0x8) // kind
    @_p.mark_union(0x0, 20)
    SaviProto.AST.AS_jump.Builder.from_pointer(@_p)

  :fun is_yield: @_p.check_union(0x0, 21)
  :fun ref yield!: @_p.assert_union!(0x0, 21), SaviProto.AST.AS_yield.Builder.from_pointer(@_p)
  :fun ref yield_if_set!: @_p.assert_union!(0x0, 21), SaviProto.AST.AS_yield.Builder.from_pointer(@_p)
  :fun ref init_yield
    @_p.clear_pointer(1) // terms
    @_p.mark_union(0x0, 21)
    SaviProto.AST.AS_yield.Builder.from_pointer(@_p)

:struct SaviProto.AST.AS_stringWithPrefix.Builder
  :let _p CapnProto.Pointer.Struct.Builder
  :new from_pointer(@_p)
  :fun as_reader: SaviProto.AST.AS_stringWithPrefix.read_from_pointer(@_p.as_reader)

  :const capn_proto_data_word_count U16: 2
  :const capn_proto_pointer_count U16: 3
  :fun capn_proto_address U64: @_p.capn_proto_address

  :is TraceData
  :fun trace_data(trace TraceData.Observer)
    @as_reader.trace_data(trace)

  :fun ref copy_data_from(other SaviProto.AST.AS_stringWithPrefix) None
    try (other_prefix = other.prefix_if_set!, @prefix.copy_data_from(other_prefix))
    try @_p.set_text(2, "\(other.string_if_set!)", "")

  :fun ref prefix: SaviProto.AST.Name.Builder.from_pointer(@_p.struct(1, 0, 2))
  :fun ref prefix_if_set!: SaviProto.AST.Name.Builder.from_pointer(@_p.struct_if_set!(1, 0, 2))
  :fun ref set_prefix_to_point_to_existing(existing SaviProto.AST.Name.Builder): SaviProto.AST.Name.Builder.from_pointer(@_p.set_struct_to_point_to_existing(1, existing._p))

  :fun ref string: @_p.text(2)
  :fun ref string_if_set!: @_p.text_if_set!(2)
  :fun ref "string="(new_value): @_p.set_text(2, new_value, "")

:struct SaviProto.AST.AS_stringCompose.Builder
  :let _p CapnProto.Pointer.Struct.Builder
  :new from_pointer(@_p)
  :fun as_reader: SaviProto.AST.AS_stringCompose.read_from_pointer(@_p.as_reader)

  :const capn_proto_data_word_count U16: 2
  :const capn_proto_pointer_count U16: 3
  :fun capn_proto_address U64: @_p.capn_proto_address

  :is TraceData
  :fun trace_data(trace TraceData.Observer)
    @as_reader.trace_data(trace)

  :fun ref copy_data_from(other SaviProto.AST.AS_stringCompose) None
    try (other_prefix = other.prefix_if_set!, @prefix.copy_data_from(other_prefix))
    try @init_terms_and_copy_data_from(other.terms_if_set!)

  :fun ref prefix: SaviProto.AST.Name.Builder.from_pointer(@_p.struct(1, 0, 2))
  :fun ref prefix_if_set!: SaviProto.AST.Name.Builder.from_pointer(@_p.struct_if_set!(1, 0, 2))
  :fun ref set_prefix_to_point_to_existing(existing SaviProto.AST.Name.Builder): SaviProto.AST.Name.Builder.from_pointer(@_p.set_struct_to_point_to_existing(1, existing._p))

  :fun ref terms: CapnProto.List.Builder(SaviProto.AST.Builder).from_pointer(@_p.list(2))
  :fun ref terms_if_set!: CapnProto.List.Builder(SaviProto.AST.Builder).from_pointer(@_p.list_if_set!(2))
  :fun ref init_terms(new_count)
    CapnProto.List.Builder(SaviProto.AST.Builder).from_pointer(@_p.init_list(2, 2, 3, new_count))
  :fun ref init_terms_and_copy_data_from(existing CapnProto.List(SaviProto.AST))
    list = CapnProto.List.Builder(SaviProto.AST.Builder).from_pointer(@_p.init_list(2, 2, 3, existing.size))
    existing.each_with_index -> (existing_item, index |
      new_item = try (list[index]! | next)
      new_item.copy_data_from(existing_item)
    )
    list
  :fun ref trim_terms(new_start, new_finish)
    CapnProto.List.Builder(SaviProto.AST.Builder).from_pointer(@_p.trim_list(2, 2, 3, new_start, new_finish))

:struct SaviProto.AST.AS_prefix.Builder
  :let _p CapnProto.Pointer.Struct.Builder
  :new from_pointer(@_p)
  :fun as_reader: SaviProto.AST.AS_prefix.read_from_pointer(@_p.as_reader)

  :const capn_proto_data_word_count U16: 2
  :const capn_proto_pointer_count U16: 3
  :fun capn_proto_address U64: @_p.capn_proto_address

  :is TraceData
  :fun trace_data(trace TraceData.Observer)
    @as_reader.trace_data(trace)

  :fun ref copy_data_from(other SaviProto.AST.AS_prefix) None
    try (other_op = other.op_if_set!, @op.copy_data_from(other_op))
    try (other_term = other.term_if_set!, @term.copy_data_from(other_term))

  :fun ref op: SaviProto.AST.Name.Builder.from_pointer(@_p.struct(1, 0, 2))
  :fun ref op_if_set!: SaviProto.AST.Name.Builder.from_pointer(@_p.struct_if_set!(1, 0, 2))
  :fun ref set_op_to_point_to_existing(existing SaviProto.AST.Name.Builder): SaviProto.AST.Name.Builder.from_pointer(@_p.set_struct_to_point_to_existing(1, existing._p))

  :fun ref term: SaviProto.AST.Builder.from_pointer(@_p.struct(2, 2, 3))
  :fun ref term_if_set!: SaviProto.AST.Builder.from_pointer(@_p.struct_if_set!(2, 2, 3))
  :fun ref set_term_to_point_to_existing(existing SaviProto.AST.Builder): SaviProto.AST.Builder.from_pointer(@_p.set_struct_to_point_to_existing(2, existing._p))

:struct SaviProto.AST.AS_qualify.Builder
  :let _p CapnProto.Pointer.Struct.Builder
  :new from_pointer(@_p)
  :fun as_reader: SaviProto.AST.AS_qualify.read_from_pointer(@_p.as_reader)

  :const capn_proto_data_word_count U16: 2
  :const capn_proto_pointer_count U16: 3
  :fun capn_proto_address U64: @_p.capn_proto_address

  :is TraceData
  :fun trace_data(trace TraceData.Observer)
    @as_reader.trace_data(trace)

  :fun ref copy_data_from(other SaviProto.AST.AS_qualify) None
    try (other_term = other.term_if_set!, @term.copy_data_from(other_term))
    try (other_group = other.group_if_set!, @group.copy_data_from(other_group))

  :fun ref term: SaviProto.AST.Builder.from_pointer(@_p.struct(1, 2, 3))
  :fun ref term_if_set!: SaviProto.AST.Builder.from_pointer(@_p.struct_if_set!(1, 2, 3))
  :fun ref set_term_to_point_to_existing(existing SaviProto.AST.Builder): SaviProto.AST.Builder.from_pointer(@_p.set_struct_to_point_to_existing(1, existing._p))

  :fun ref group: SaviProto.AST.Group.Builder.from_pointer(@_p.struct(2, 1, 2))
  :fun ref group_if_set!: SaviProto.AST.Group.Builder.from_pointer(@_p.struct_if_set!(2, 1, 2))
  :fun ref set_group_to_point_to_existing(existing SaviProto.AST.Group.Builder): SaviProto.AST.Group.Builder.from_pointer(@_p.set_struct_to_point_to_existing(2, existing._p))

:struct SaviProto.AST.AS_relate.Builder
  :let _p CapnProto.Pointer.Struct.Builder
  :new from_pointer(@_p)
  :fun as_reader: SaviProto.AST.AS_relate.read_from_pointer(@_p.as_reader)

  :const capn_proto_data_word_count U16: 2
  :const capn_proto_pointer_count U16: 3
  :fun capn_proto_address U64: @_p.capn_proto_address

  :is TraceData
  :fun trace_data(trace TraceData.Observer)
    @as_reader.trace_data(trace)

  :fun ref copy_data_from(other SaviProto.AST.AS_relate) None
    try (other_op = other.op_if_set!, @op.copy_data_from(other_op))
    try (other_terms = other.terms_if_set!, @terms.copy_data_from(other_terms))

  :fun ref op: SaviProto.AST.Name.Builder.from_pointer(@_p.struct(1, 0, 2))
  :fun ref op_if_set!: SaviProto.AST.Name.Builder.from_pointer(@_p.struct_if_set!(1, 0, 2))
  :fun ref set_op_to_point_to_existing(existing SaviProto.AST.Name.Builder): SaviProto.AST.Name.Builder.from_pointer(@_p.set_struct_to_point_to_existing(1, existing._p))

  :fun ref terms: SaviProto.AST.Pair.Builder.from_pointer(@_p.struct(2, 0, 3))
  :fun ref terms_if_set!: SaviProto.AST.Pair.Builder.from_pointer(@_p.struct_if_set!(2, 0, 3))
  :fun ref set_terms_to_point_to_existing(existing SaviProto.AST.Pair.Builder): SaviProto.AST.Pair.Builder.from_pointer(@_p.set_struct_to_point_to_existing(2, existing._p))

:struct SaviProto.AST.AS_fieldRead.Builder
  :let _p CapnProto.Pointer.Struct.Builder
  :new from_pointer(@_p)
  :fun as_reader: SaviProto.AST.AS_fieldRead.read_from_pointer(@_p.as_reader)

  :const capn_proto_data_word_count U16: 2
  :const capn_proto_pointer_count U16: 3
  :fun capn_proto_address U64: @_p.capn_proto_address

  :is TraceData
  :fun trace_data(trace TraceData.Observer)
    @as_reader.trace_data(trace)

  :fun ref copy_data_from(other SaviProto.AST.AS_fieldRead) None
    try @_p.set_text(1, "\(other.field_if_set!)", "")

  :fun ref field: @_p.text(1)
  :fun ref field_if_set!: @_p.text_if_set!(1)
  :fun ref "field="(new_value): @_p.set_text(1, new_value, "")

:struct SaviProto.AST.AS_fieldWrite.Builder
  :let _p CapnProto.Pointer.Struct.Builder
  :new from_pointer(@_p)
  :fun as_reader: SaviProto.AST.AS_fieldWrite.read_from_pointer(@_p.as_reader)

  :const capn_proto_data_word_count U16: 2
  :const capn_proto_pointer_count U16: 3
  :fun capn_proto_address U64: @_p.capn_proto_address

  :is TraceData
  :fun trace_data(trace TraceData.Observer)
    @as_reader.trace_data(trace)

  :fun ref copy_data_from(other SaviProto.AST.AS_fieldWrite) None
    try @_p.set_text(1, "\(other.field_if_set!)", "")
    try (other_value = other.value_if_set!, @value.copy_data_from(other_value))

  :fun ref field: @_p.text(1)
  :fun ref field_if_set!: @_p.text_if_set!(1)
  :fun ref "field="(new_value): @_p.set_text(1, new_value, "")

  :fun ref value: SaviProto.AST.Builder.from_pointer(@_p.struct(2, 2, 3))
  :fun ref value_if_set!: SaviProto.AST.Builder.from_pointer(@_p.struct_if_set!(2, 2, 3))
  :fun ref set_value_to_point_to_existing(existing SaviProto.AST.Builder): SaviProto.AST.Builder.from_pointer(@_p.set_struct_to_point_to_existing(2, existing._p))

:struct SaviProto.AST.AS_fieldDisplace.Builder
  :let _p CapnProto.Pointer.Struct.Builder
  :new from_pointer(@_p)
  :fun as_reader: SaviProto.AST.AS_fieldDisplace.read_from_pointer(@_p.as_reader)

  :const capn_proto_data_word_count U16: 2
  :const capn_proto_pointer_count U16: 3
  :fun capn_proto_address U64: @_p.capn_proto_address

  :is TraceData
  :fun trace_data(trace TraceData.Observer)
    @as_reader.trace_data(trace)

  :fun ref copy_data_from(other SaviProto.AST.AS_fieldDisplace) None
    try @_p.set_text(1, "\(other.field_if_set!)", "")
    try (other_value = other.value_if_set!, @value.copy_data_from(other_value))

  :fun ref field: @_p.text(1)
  :fun ref field_if_set!: @_p.text_if_set!(1)
  :fun ref "field="(new_value): @_p.set_text(1, new_value, "")

  :fun ref value: SaviProto.AST.Builder.from_pointer(@_p.struct(2, 2, 3))
  :fun ref value_if_set!: SaviProto.AST.Builder.from_pointer(@_p.struct_if_set!(2, 2, 3))
  :fun ref set_value_to_point_to_existing(existing SaviProto.AST.Builder): SaviProto.AST.Builder.from_pointer(@_p.set_struct_to_point_to_existing(2, existing._p))

:struct SaviProto.AST.AS_choice.Builder
  :let _p CapnProto.Pointer.Struct.Builder
  :new from_pointer(@_p)
  :fun as_reader: SaviProto.AST.AS_choice.read_from_pointer(@_p.as_reader)

  :const capn_proto_data_word_count U16: 2
  :const capn_proto_pointer_count U16: 3
  :fun capn_proto_address U64: @_p.capn_proto_address

  :is TraceData
  :fun trace_data(trace TraceData.Observer)
    @as_reader.trace_data(trace)

  :fun ref copy_data_from(other SaviProto.AST.AS_choice) None
    try @init_branches_and_copy_data_from(other.branches_if_set!)

  :fun ref branches: CapnProto.List.Builder(SaviProto.AST.ChoiceBranch.Builder).from_pointer(@_p.list(1))
  :fun ref branches_if_set!: CapnProto.List.Builder(SaviProto.AST.ChoiceBranch.Builder).from_pointer(@_p.list_if_set!(1))
  :fun ref init_branches(new_count)
    CapnProto.List.Builder(SaviProto.AST.ChoiceBranch.Builder).from_pointer(@_p.init_list(1, 0, 2, new_count))
  :fun ref init_branches_and_copy_data_from(existing CapnProto.List(SaviProto.AST.ChoiceBranch))
    list = CapnProto.List.Builder(SaviProto.AST.ChoiceBranch.Builder).from_pointer(@_p.init_list(1, 0, 2, existing.size))
    existing.each_with_index -> (existing_item, index |
      new_item = try (list[index]! | next)
      new_item.copy_data_from(existing_item)
    )
    list
  :fun ref trim_branches(new_start, new_finish)
    CapnProto.List.Builder(SaviProto.AST.ChoiceBranch.Builder).from_pointer(@_p.trim_list(1, 0, 2, new_start, new_finish))

:struct SaviProto.AST.AS_jump.Builder
  :let _p CapnProto.Pointer.Struct.Builder
  :new from_pointer(@_p)
  :fun as_reader: SaviProto.AST.AS_jump.read_from_pointer(@_p.as_reader)

  :const capn_proto_data_word_count U16: 2
  :const capn_proto_pointer_count U16: 3
  :fun capn_proto_address U64: @_p.capn_proto_address

  :is TraceData
  :fun trace_data(trace TraceData.Observer)
    @as_reader.trace_data(trace)

  :fun ref copy_data_from(other SaviProto.AST.AS_jump) None
    try (other_term = other.term_if_set!, @term.copy_data_from(other_term))
    try @_p.set_u16(0x8, SaviProto.AST.JumpKind[other.kind_if_set!].u16, 0)

  :fun ref term: SaviProto.AST.Builder.from_pointer(@_p.struct(1, 2, 3))
  :fun ref term_if_set!: SaviProto.AST.Builder.from_pointer(@_p.struct_if_set!(1, 2, 3))
  :fun ref set_term_to_point_to_existing(existing SaviProto.AST.Builder): SaviProto.AST.Builder.from_pointer(@_p.set_struct_to_point_to_existing(1, existing._p))

  :fun kind: SaviProto.AST.JumpKind._new(@_p.u16(0x8))
  :fun kind_if_set!: SaviProto.AST.JumpKind._new(@_p.u16_if_set!(0x8))
  :fun ref "kind="(new_value): @_p.set_u16(0x8, SaviProto.AST.JumpKind[new_value].u16, 0)

:struct SaviProto.AST.AS_yield.Builder
  :let _p CapnProto.Pointer.Struct.Builder
  :new from_pointer(@_p)
  :fun as_reader: SaviProto.AST.AS_yield.read_from_pointer(@_p.as_reader)

  :const capn_proto_data_word_count U16: 2
  :const capn_proto_pointer_count U16: 3
  :fun capn_proto_address U64: @_p.capn_proto_address

  :is TraceData
  :fun trace_data(trace TraceData.Observer)
    @as_reader.trace_data(trace)

  :fun ref copy_data_from(other SaviProto.AST.AS_yield) None
    try @init_terms_and_copy_data_from(other.terms_if_set!)

  :fun ref terms: CapnProto.List.Builder(SaviProto.AST.Builder).from_pointer(@_p.list(1))
  :fun ref terms_if_set!: CapnProto.List.Builder(SaviProto.AST.Builder).from_pointer(@_p.list_if_set!(1))
  :fun ref init_terms(new_count)
    CapnProto.List.Builder(SaviProto.AST.Builder).from_pointer(@_p.init_list(1, 2, 3, new_count))
  :fun ref init_terms_and_copy_data_from(existing CapnProto.List(SaviProto.AST))
    list = CapnProto.List.Builder(SaviProto.AST.Builder).from_pointer(@_p.init_list(1, 2, 3, existing.size))
    existing.each_with_index -> (existing_item, index |
      new_item = try (list[index]! | next)
      new_item.copy_data_from(existing_item)
    )
    list
  :fun ref trim_terms(new_start, new_finish)
    CapnProto.List.Builder(SaviProto.AST.Builder).from_pointer(@_p.trim_list(1, 2, 3, new_start, new_finish))

:struct SaviProto.AST.Annotation.Builder
  :let _p CapnProto.Pointer.Struct.Builder
  :new from_pointer(@_p)
  :fun as_reader: SaviProto.AST.Annotation.read_from_pointer(@_p.as_reader)

  :const capn_proto_data_word_count U16: 1
  :const capn_proto_pointer_count U16: 2
  :fun capn_proto_address U64: @_p.capn_proto_address

  :is TraceData
  :fun trace_data(trace TraceData.Observer)
    @as_reader.trace_data(trace)

  :fun ref copy_data_from(other SaviProto.AST.Annotation) None
    try (other_position = other.position_if_set!, @position.copy_data_from(other_position))
    try @_p.set_u64(0x0, other.target_if_set!, 0)
    try @_p.set_text(1, "\(other.value_if_set!)", "")

  :fun ref position: SaviProto.Source.Position.Builder.from_pointer(@_p.struct(0, 2, 1))
  :fun ref position_if_set!: SaviProto.Source.Position.Builder.from_pointer(@_p.struct_if_set!(0, 2, 1))
  :fun ref set_position_to_point_to_existing(existing SaviProto.Source.Position.Builder): SaviProto.Source.Position.Builder.from_pointer(@_p.set_struct_to_point_to_existing(0, existing._p))

  :fun target: @_p.u64(0x0)
  :fun target_if_set!: @_p.u64_if_set!(0x0)
  :fun ref "target="(new_value): @_p.set_u64(0x0, new_value, 0)

  :fun ref value: @_p.text(1)
  :fun ref value_if_set!: @_p.text_if_set!(1)
  :fun ref "value="(new_value): @_p.set_text(1, new_value, "")

:struct SaviProto.AST.Name.Builder
  :let _p CapnProto.Pointer.Struct.Builder
  :new from_pointer(@_p)
  :fun as_reader: SaviProto.AST.Name.read_from_pointer(@_p.as_reader)

  :const capn_proto_data_word_count U16: 0
  :const capn_proto_pointer_count U16: 2
  :fun capn_proto_address U64: @_p.capn_proto_address

  :is TraceData
  :fun trace_data(trace TraceData.Observer)
    @as_reader.trace_data(trace)

  :fun ref copy_data_from(other SaviProto.AST.Name) None
    try (other_position = other.position_if_set!, @position.copy_data_from(other_position))
    try @_p.set_text(1, "\(other.value_if_set!)", "")

  :fun ref position: SaviProto.Source.Position.Builder.from_pointer(@_p.struct(0, 2, 1))
  :fun ref position_if_set!: SaviProto.Source.Position.Builder.from_pointer(@_p.struct_if_set!(0, 2, 1))
  :fun ref set_position_to_point_to_existing(existing SaviProto.Source.Position.Builder): SaviProto.Source.Position.Builder.from_pointer(@_p.set_struct_to_point_to_existing(0, existing._p))

  :fun ref value: @_p.text(1)
  :fun ref value_if_set!: @_p.text_if_set!(1)
  :fun ref "value="(new_value): @_p.set_text(1, new_value, "")

:struct SaviProto.AST.Pair.Builder
  :let _p CapnProto.Pointer.Struct.Builder
  :new from_pointer(@_p)
  :fun as_reader: SaviProto.AST.Pair.read_from_pointer(@_p.as_reader)

  :const capn_proto_data_word_count U16: 0
  :const capn_proto_pointer_count U16: 3
  :fun capn_proto_address U64: @_p.capn_proto_address

  :is TraceData
  :fun trace_data(trace TraceData.Observer)
    @as_reader.trace_data(trace)

  :fun ref copy_data_from(other SaviProto.AST.Pair) None
    try (other_position = other.position_if_set!, @position.copy_data_from(other_position))
    try (other_left = other.left_if_set!, @left.copy_data_from(other_left))
    try (other_right = other.right_if_set!, @right.copy_data_from(other_right))

  :fun ref position: SaviProto.Source.Position.Builder.from_pointer(@_p.struct(0, 2, 1))
  :fun ref position_if_set!: SaviProto.Source.Position.Builder.from_pointer(@_p.struct_if_set!(0, 2, 1))
  :fun ref set_position_to_point_to_existing(existing SaviProto.Source.Position.Builder): SaviProto.Source.Position.Builder.from_pointer(@_p.set_struct_to_point_to_existing(0, existing._p))

  :fun ref left: SaviProto.AST.Builder.from_pointer(@_p.struct(1, 2, 3))
  :fun ref left_if_set!: SaviProto.AST.Builder.from_pointer(@_p.struct_if_set!(1, 2, 3))
  :fun ref set_left_to_point_to_existing(existing SaviProto.AST.Builder): SaviProto.AST.Builder.from_pointer(@_p.set_struct_to_point_to_existing(1, existing._p))

  :fun ref right: SaviProto.AST.Builder.from_pointer(@_p.struct(2, 2, 3))
  :fun ref right_if_set!: SaviProto.AST.Builder.from_pointer(@_p.struct_if_set!(2, 2, 3))
  :fun ref set_right_to_point_to_existing(existing SaviProto.AST.Builder): SaviProto.AST.Builder.from_pointer(@_p.set_struct_to_point_to_existing(2, existing._p))

:struct SaviProto.AST.Group.Builder
  :let _p CapnProto.Pointer.Struct.Builder
  :new from_pointer(@_p)
  :fun as_reader: SaviProto.AST.Group.read_from_pointer(@_p.as_reader)

  :const capn_proto_data_word_count U16: 1
  :const capn_proto_pointer_count U16: 2
  :fun capn_proto_address U64: @_p.capn_proto_address

  :is TraceData
  :fun trace_data(trace TraceData.Observer)
    @as_reader.trace_data(trace)

  :fun ref copy_data_from(other SaviProto.AST.Group) None
    try (other_position = other.position_if_set!, @position.copy_data_from(other_position))
    try @_p.set_u16(0x0, SaviProto.AST.Group.Style[other.style_if_set!].u16, 0)
    try @init_terms_and_copy_data_from(other.terms_if_set!)
    try @_p.set_bool(0x2, 0b00000001, Bool[other.has_exclamation_if_set!])

  :fun ref position: SaviProto.Source.Position.Builder.from_pointer(@_p.struct(0, 2, 1))
  :fun ref position_if_set!: SaviProto.Source.Position.Builder.from_pointer(@_p.struct_if_set!(0, 2, 1))
  :fun ref set_position_to_point_to_existing(existing SaviProto.Source.Position.Builder): SaviProto.Source.Position.Builder.from_pointer(@_p.set_struct_to_point_to_existing(0, existing._p))

  :fun style: SaviProto.AST.Group.Style._new(@_p.u16(0x0))
  :fun style_if_set!: SaviProto.AST.Group.Style._new(@_p.u16_if_set!(0x0))
  :fun ref "style="(new_value): @_p.set_u16(0x0, SaviProto.AST.Group.Style[new_value].u16, 0)

  :fun ref terms: CapnProto.List.Builder(SaviProto.AST.Builder).from_pointer(@_p.list(1))
  :fun ref terms_if_set!: CapnProto.List.Builder(SaviProto.AST.Builder).from_pointer(@_p.list_if_set!(1))
  :fun ref init_terms(new_count)
    CapnProto.List.Builder(SaviProto.AST.Builder).from_pointer(@_p.init_list(1, 2, 3, new_count))
  :fun ref init_terms_and_copy_data_from(existing CapnProto.List(SaviProto.AST))
    list = CapnProto.List.Builder(SaviProto.AST.Builder).from_pointer(@_p.init_list(1, 2, 3, existing.size))
    existing.each_with_index -> (existing_item, index |
      new_item = try (list[index]! | next)
      new_item.copy_data_from(existing_item)
    )
    list
  :fun ref trim_terms(new_start, new_finish)
    CapnProto.List.Builder(SaviProto.AST.Builder).from_pointer(@_p.trim_list(1, 2, 3, new_start, new_finish))

  :fun has_exclamation: @_p.bool(0x2, 0b00000001)
  :fun has_exclamation_if_set!: @_p.bool_if_set!(0x2, 0b00000001)
  :fun ref "has_exclamation="(new_value): @_p.set_bool(0x2, 0b00000001, Bool[new_value])

:struct SaviProto.AST.Call.Builder
  :let _p CapnProto.Pointer.Struct.Builder
  :new from_pointer(@_p)
  :fun as_reader: SaviProto.AST.Call.read_from_pointer(@_p.as_reader)

  :const capn_proto_data_word_count U16: 0
  :const capn_proto_pointer_count U16: 4
  :fun capn_proto_address U64: @_p.capn_proto_address

  :is TraceData
  :fun trace_data(trace TraceData.Observer)
    @as_reader.trace_data(trace)

  :fun ref copy_data_from(other SaviProto.AST.Call) None
    try (other_receiver = other.receiver_if_set!, @receiver.copy_data_from(other_receiver))
    try (other_name = other.name_if_set!, @name.copy_data_from(other_name))
    try @init_args_and_copy_data_from(other.args_if_set!)
    try (other_yield = other.yield_if_set!, @yield.copy_data_from(other_yield))

  :fun ref receiver: SaviProto.AST.Builder.from_pointer(@_p.struct(0, 2, 3))
  :fun ref receiver_if_set!: SaviProto.AST.Builder.from_pointer(@_p.struct_if_set!(0, 2, 3))
  :fun ref set_receiver_to_point_to_existing(existing SaviProto.AST.Builder): SaviProto.AST.Builder.from_pointer(@_p.set_struct_to_point_to_existing(0, existing._p))

  :fun ref name: SaviProto.AST.Name.Builder.from_pointer(@_p.struct(1, 0, 2))
  :fun ref name_if_set!: SaviProto.AST.Name.Builder.from_pointer(@_p.struct_if_set!(1, 0, 2))
  :fun ref set_name_to_point_to_existing(existing SaviProto.AST.Name.Builder): SaviProto.AST.Name.Builder.from_pointer(@_p.set_struct_to_point_to_existing(1, existing._p))

  :fun ref args: CapnProto.List.Builder(SaviProto.AST.Builder).from_pointer(@_p.list(2))
  :fun ref args_if_set!: CapnProto.List.Builder(SaviProto.AST.Builder).from_pointer(@_p.list_if_set!(2))
  :fun ref init_args(new_count)
    CapnProto.List.Builder(SaviProto.AST.Builder).from_pointer(@_p.init_list(2, 2, 3, new_count))
  :fun ref init_args_and_copy_data_from(existing CapnProto.List(SaviProto.AST))
    list = CapnProto.List.Builder(SaviProto.AST.Builder).from_pointer(@_p.init_list(2, 2, 3, existing.size))
    existing.each_with_index -> (existing_item, index |
      new_item = try (list[index]! | next)
      new_item.copy_data_from(existing_item)
    )
    list
  :fun ref trim_args(new_start, new_finish)
    CapnProto.List.Builder(SaviProto.AST.Builder).from_pointer(@_p.trim_list(2, 2, 3, new_start, new_finish))

  :fun ref yield: SaviProto.AST.CallYield.Builder.from_pointer(@_p.struct(3, 0, 2))
  :fun ref yield_if_set!: SaviProto.AST.CallYield.Builder.from_pointer(@_p.struct_if_set!(3, 0, 2))
  :fun ref set_yield_to_point_to_existing(existing SaviProto.AST.CallYield.Builder): SaviProto.AST.CallYield.Builder.from_pointer(@_p.set_struct_to_point_to_existing(3, existing._p))

:struct SaviProto.AST.CallYield.Builder
  :let _p CapnProto.Pointer.Struct.Builder
  :new from_pointer(@_p)
  :fun as_reader: SaviProto.AST.CallYield.read_from_pointer(@_p.as_reader)

  :const capn_proto_data_word_count U16: 0
  :const capn_proto_pointer_count U16: 2
  :fun capn_proto_address U64: @_p.capn_proto_address

  :is TraceData
  :fun trace_data(trace TraceData.Observer)
    @as_reader.trace_data(trace)

  :fun ref copy_data_from(other SaviProto.AST.CallYield) None
    try (other_params = other.params_if_set!, @params.copy_data_from(other_params))
    try (other_block = other.block_if_set!, @block.copy_data_from(other_block))

  :fun ref params: SaviProto.AST.Group.Builder.from_pointer(@_p.struct(0, 1, 2))
  :fun ref params_if_set!: SaviProto.AST.Group.Builder.from_pointer(@_p.struct_if_set!(0, 1, 2))
  :fun ref set_params_to_point_to_existing(existing SaviProto.AST.Group.Builder): SaviProto.AST.Group.Builder.from_pointer(@_p.set_struct_to_point_to_existing(0, existing._p))

  :fun ref block: SaviProto.AST.Group.Builder.from_pointer(@_p.struct(1, 1, 2))
  :fun ref block_if_set!: SaviProto.AST.Group.Builder.from_pointer(@_p.struct_if_set!(1, 1, 2))
  :fun ref set_block_to_point_to_existing(existing SaviProto.AST.Group.Builder): SaviProto.AST.Group.Builder.from_pointer(@_p.set_struct_to_point_to_existing(1, existing._p))

:struct SaviProto.AST.ChoiceBranch.Builder
  :let _p CapnProto.Pointer.Struct.Builder
  :new from_pointer(@_p)
  :fun as_reader: SaviProto.AST.ChoiceBranch.read_from_pointer(@_p.as_reader)

  :const capn_proto_data_word_count U16: 0
  :const capn_proto_pointer_count U16: 2
  :fun capn_proto_address U64: @_p.capn_proto_address

  :is TraceData
  :fun trace_data(trace TraceData.Observer)
    @as_reader.trace_data(trace)

  :fun ref copy_data_from(other SaviProto.AST.ChoiceBranch) None
    try (other_cond = other.cond_if_set!, @cond.copy_data_from(other_cond))
    try (other_body = other.body_if_set!, @body.copy_data_from(other_body))

  :fun ref cond: SaviProto.AST.Builder.from_pointer(@_p.struct(0, 2, 3))
  :fun ref cond_if_set!: SaviProto.AST.Builder.from_pointer(@_p.struct_if_set!(0, 2, 3))
  :fun ref set_cond_to_point_to_existing(existing SaviProto.AST.Builder): SaviProto.AST.Builder.from_pointer(@_p.set_struct_to_point_to_existing(0, existing._p))

  :fun ref body: SaviProto.AST.Builder.from_pointer(@_p.struct(1, 2, 3))
  :fun ref body_if_set!: SaviProto.AST.Builder.from_pointer(@_p.struct_if_set!(1, 2, 3))
  :fun ref set_body_to_point_to_existing(existing SaviProto.AST.Builder): SaviProto.AST.Builder.from_pointer(@_p.set_struct_to_point_to_existing(1, existing._p))

:struct SaviProto.AST.Loop.Builder
  :let _p CapnProto.Pointer.Struct.Builder
  :new from_pointer(@_p)
  :fun as_reader: SaviProto.AST.Loop.read_from_pointer(@_p.as_reader)

  :const capn_proto_data_word_count U16: 0
  :const capn_proto_pointer_count U16: 4
  :fun capn_proto_address U64: @_p.capn_proto_address

  :is TraceData
  :fun trace_data(trace TraceData.Observer)
    @as_reader.trace_data(trace)

  :fun ref copy_data_from(other SaviProto.AST.Loop) None
    try (other_initial_cond = other.initial_cond_if_set!, @initial_cond.copy_data_from(other_initial_cond))
    try (other_body = other.body_if_set!, @body.copy_data_from(other_body))
    try (other_repeat_cond = other.repeat_cond_if_set!, @repeat_cond.copy_data_from(other_repeat_cond))
    try (other_else_body = other.else_body_if_set!, @else_body.copy_data_from(other_else_body))

  :fun ref initial_cond: SaviProto.AST.Builder.from_pointer(@_p.struct(0, 2, 3))
  :fun ref initial_cond_if_set!: SaviProto.AST.Builder.from_pointer(@_p.struct_if_set!(0, 2, 3))
  :fun ref set_initial_cond_to_point_to_existing(existing SaviProto.AST.Builder): SaviProto.AST.Builder.from_pointer(@_p.set_struct_to_point_to_existing(0, existing._p))

  :fun ref body: SaviProto.AST.Builder.from_pointer(@_p.struct(1, 2, 3))
  :fun ref body_if_set!: SaviProto.AST.Builder.from_pointer(@_p.struct_if_set!(1, 2, 3))
  :fun ref set_body_to_point_to_existing(existing SaviProto.AST.Builder): SaviProto.AST.Builder.from_pointer(@_p.set_struct_to_point_to_existing(1, existing._p))

  :fun ref repeat_cond: SaviProto.AST.Builder.from_pointer(@_p.struct(2, 2, 3))
  :fun ref repeat_cond_if_set!: SaviProto.AST.Builder.from_pointer(@_p.struct_if_set!(2, 2, 3))
  :fun ref set_repeat_cond_to_point_to_existing(existing SaviProto.AST.Builder): SaviProto.AST.Builder.from_pointer(@_p.set_struct_to_point_to_existing(2, existing._p))

  :fun ref else_body: SaviProto.AST.Builder.from_pointer(@_p.struct(3, 2, 3))
  :fun ref else_body_if_set!: SaviProto.AST.Builder.from_pointer(@_p.struct_if_set!(3, 2, 3))
  :fun ref set_else_body_to_point_to_existing(existing SaviProto.AST.Builder): SaviProto.AST.Builder.from_pointer(@_p.set_struct_to_point_to_existing(3, existing._p))

:struct SaviProto.AST.Try.Builder
  :let _p CapnProto.Pointer.Struct.Builder
  :new from_pointer(@_p)
  :fun as_reader: SaviProto.AST.Try.read_from_pointer(@_p.as_reader)

  :const capn_proto_data_word_count U16: 1
  :const capn_proto_pointer_count U16: 2
  :fun capn_proto_address U64: @_p.capn_proto_address

  :is TraceData
  :fun trace_data(trace TraceData.Observer)
    @as_reader.trace_data(trace)

  :fun ref copy_data_from(other SaviProto.AST.Try) None
    try (other_body = other.body_if_set!, @body.copy_data_from(other_body))
    try (other_else_body = other.else_body_if_set!, @else_body.copy_data_from(other_else_body))
    try @_p.set_bool(0x0, 0b00000001, Bool[other.allow_non_partial_body_if_set!])

  :fun ref body: SaviProto.AST.Builder.from_pointer(@_p.struct(0, 2, 3))
  :fun ref body_if_set!: SaviProto.AST.Builder.from_pointer(@_p.struct_if_set!(0, 2, 3))
  :fun ref set_body_to_point_to_existing(existing SaviProto.AST.Builder): SaviProto.AST.Builder.from_pointer(@_p.set_struct_to_point_to_existing(0, existing._p))

  :fun ref else_body: SaviProto.AST.Builder.from_pointer(@_p.struct(1, 2, 3))
  :fun ref else_body_if_set!: SaviProto.AST.Builder.from_pointer(@_p.struct_if_set!(1, 2, 3))
  :fun ref set_else_body_to_point_to_existing(existing SaviProto.AST.Builder): SaviProto.AST.Builder.from_pointer(@_p.set_struct_to_point_to_existing(1, existing._p))

  :fun allow_non_partial_body: @_p.bool(0x0, 0b00000001)
  :fun allow_non_partial_body_if_set!: @_p.bool_if_set!(0x0, 0b00000001)
  :fun ref "allow_non_partial_body="(new_value): @_p.set_bool(0x0, 0b00000001, Bool[new_value])

:struct SaviProto.AST.Declare.Builder
  :let _p CapnProto.Pointer.Struct.Builder
  :new from_pointer(@_p)
  :fun as_reader: SaviProto.AST.Declare.read_from_pointer(@_p.as_reader)

  :const capn_proto_data_word_count U16: 0
  :const capn_proto_pointer_count U16: 4
  :fun capn_proto_address U64: @_p.capn_proto_address

  :is TraceData
  :fun trace_data(trace TraceData.Observer)
    @as_reader.trace_data(trace)

  :fun ref copy_data_from(other SaviProto.AST.Declare) None
    try @init_terms_and_copy_data_from(other.terms_if_set!)
    try @_p.set_text(1, "\(other.main_annotation_if_set!)", "")
    try @init_body_annotations_and_copy_data_from(other.body_annotations_if_set!)
    try (other_body = other.body_if_set!, @body.copy_data_from(other_body))

  :fun ref terms: CapnProto.List.Builder(SaviProto.AST.Builder).from_pointer(@_p.list(0))
  :fun ref terms_if_set!: CapnProto.List.Builder(SaviProto.AST.Builder).from_pointer(@_p.list_if_set!(0))
  :fun ref init_terms(new_count)
    CapnProto.List.Builder(SaviProto.AST.Builder).from_pointer(@_p.init_list(0, 2, 3, new_count))
  :fun ref init_terms_and_copy_data_from(existing CapnProto.List(SaviProto.AST))
    list = CapnProto.List.Builder(SaviProto.AST.Builder).from_pointer(@_p.init_list(0, 2, 3, existing.size))
    existing.each_with_index -> (existing_item, index |
      new_item = try (list[index]! | next)
      new_item.copy_data_from(existing_item)
    )
    list
  :fun ref trim_terms(new_start, new_finish)
    CapnProto.List.Builder(SaviProto.AST.Builder).from_pointer(@_p.trim_list(0, 2, 3, new_start, new_finish))

  :fun ref main_annotation: @_p.text(1)
  :fun ref main_annotation_if_set!: @_p.text_if_set!(1)
  :fun ref "main_annotation="(new_value): @_p.set_text(1, new_value, "")

  :fun ref body_annotations: CapnProto.List.Builder(SaviProto.AST.Annotation.Builder).from_pointer(@_p.list(2))
  :fun ref body_annotations_if_set!: CapnProto.List.Builder(SaviProto.AST.Annotation.Builder).from_pointer(@_p.list_if_set!(2))
  :fun ref init_body_annotations(new_count)
    CapnProto.List.Builder(SaviProto.AST.Annotation.Builder).from_pointer(@_p.init_list(2, 1, 2, new_count))
  :fun ref init_body_annotations_and_copy_data_from(existing CapnProto.List(SaviProto.AST.Annotation))
    list = CapnProto.List.Builder(SaviProto.AST.Annotation.Builder).from_pointer(@_p.init_list(2, 1, 2, existing.size))
    existing.each_with_index -> (existing_item, index |
      new_item = try (list[index]! | next)
      new_item.copy_data_from(existing_item)
    )
    list
  :fun ref trim_body_annotations(new_start, new_finish)
    CapnProto.List.Builder(SaviProto.AST.Annotation.Builder).from_pointer(@_p.trim_list(2, 1, 2, new_start, new_finish))

  :fun ref body: SaviProto.AST.Group.Builder.from_pointer(@_p.struct(3, 1, 2))
  :fun ref body_if_set!: SaviProto.AST.Group.Builder.from_pointer(@_p.struct_if_set!(3, 1, 2))
  :fun ref set_body_to_point_to_existing(existing SaviProto.AST.Group.Builder): SaviProto.AST.Group.Builder.from_pointer(@_p.set_struct_to_point_to_existing(3, existing._p))

:struct SaviProto.AST.Document.Builder
  :let _p CapnProto.Pointer.Struct.Builder
  :new from_pointer(@_p)
  :fun as_reader: SaviProto.AST.Document.read_from_pointer(@_p.as_reader)

  :const capn_proto_data_word_count U16: 0
  :const capn_proto_pointer_count U16: 3
  :fun capn_proto_address U64: @_p.capn_proto_address

  :is TraceData
  :fun trace_data(trace TraceData.Observer)
    @as_reader.trace_data(trace)

  :fun ref copy_data_from(other SaviProto.AST.Document) None
    try (other_source = other.source_if_set!, @source.copy_data_from(other_source))
    try @init_declares_and_copy_data_from(other.declares_if_set!)
    try @init_bodies_and_copy_data_from(other.bodies_if_set!)

  :fun ref source: SaviProto.Source.Builder.from_pointer(@_p.struct(0, 1, 3))
  :fun ref source_if_set!: SaviProto.Source.Builder.from_pointer(@_p.struct_if_set!(0, 1, 3))
  :fun ref set_source_to_point_to_existing(existing SaviProto.Source.Builder): SaviProto.Source.Builder.from_pointer(@_p.set_struct_to_point_to_existing(0, existing._p))

  :fun ref declares: CapnProto.List.Builder(SaviProto.AST.Declare.Builder).from_pointer(@_p.list(1))
  :fun ref declares_if_set!: CapnProto.List.Builder(SaviProto.AST.Declare.Builder).from_pointer(@_p.list_if_set!(1))
  :fun ref init_declares(new_count)
    CapnProto.List.Builder(SaviProto.AST.Declare.Builder).from_pointer(@_p.init_list(1, 0, 4, new_count))
  :fun ref init_declares_and_copy_data_from(existing CapnProto.List(SaviProto.AST.Declare))
    list = CapnProto.List.Builder(SaviProto.AST.Declare.Builder).from_pointer(@_p.init_list(1, 0, 4, existing.size))
    existing.each_with_index -> (existing_item, index |
      new_item = try (list[index]! | next)
      new_item.copy_data_from(existing_item)
    )
    list
  :fun ref trim_declares(new_start, new_finish)
    CapnProto.List.Builder(SaviProto.AST.Declare.Builder).from_pointer(@_p.trim_list(1, 0, 4, new_start, new_finish))

  :fun ref bodies: CapnProto.List.Builder(SaviProto.AST.Group.Builder).from_pointer(@_p.list(2))
  :fun ref bodies_if_set!: CapnProto.List.Builder(SaviProto.AST.Group.Builder).from_pointer(@_p.list_if_set!(2))
  :fun ref init_bodies(new_count)
    CapnProto.List.Builder(SaviProto.AST.Group.Builder).from_pointer(@_p.init_list(2, 1, 2, new_count))
  :fun ref init_bodies_and_copy_data_from(existing CapnProto.List(SaviProto.AST.Group))
    list = CapnProto.List.Builder(SaviProto.AST.Group.Builder).from_pointer(@_p.init_list(2, 1, 2, existing.size))
    existing.each_with_index -> (existing_item, index |
      new_item = try (list[index]! | next)
      new_item.copy_data_from(existing_item)
    )
    list
  :fun ref trim_bodies(new_start, new_finish)
    CapnProto.List.Builder(SaviProto.AST.Group.Builder).from_pointer(@_p.trim_list(2, 1, 2, new_start, new_finish))
