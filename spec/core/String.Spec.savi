:class Savi.String.Spec
  :is Spec
  :const describes: "String"

  :it "starts with zero space and a null pointer by default"
    data = String.new
    assert: data.space == 0
    assert: data.size == 0
    assert: data.cpointer.is_null

  :it "allocates the next highest power of two containing the requested space"
    data = String.new(12)
    assert: data.space == 16
    assert: data.size == 0
    assert: data.cpointer.is_not_null

    data = String.new(16)
    assert: data.space == 16
    assert: data.size == 0
    assert: data.cpointer.is_not_null

    data = String.new(17)
    assert: data.space == 32
    assert: data.size == 0
    assert: data.cpointer.is_not_null

  :it "won't reallocate when reserving space within the current allocation"
    data = String.new(12)
    orig_pointer_address = data.cpointer.address

    data.reserve(16)
    assert: data.space == 16
    assert: data.size == 0
    assert: data.cpointer.is_not_null
    assert: data.cpointer.address == orig_pointer_address

    data.reserve(0)
    assert: data.space == 16
    assert: data.size == 0
    assert: data.cpointer.is_not_null
    assert: data.cpointer.address == orig_pointer_address

  :it "will reallocate when reserving space beyond the current allocation"
    data = String.new(12)
    orig_pointer_address = data.cpointer.address

    // Go to a much larger size in a different allocator pool,
    // to ensure that we actually get a new pointer address.
    data.reserve(2040)

    assert: data.space == 2048
    assert: data.size == 0
    assert: data.cpointer.is_not_null
    assert: data.cpointer.address != orig_pointer_address

  :it "reallocates to a size that includes a null terminator when appending"
    data = String.new
    assert: data.space == 0
    assert: data.size == 0

    // This 8-byte literal has a null terminator and thus 9 bytes to copy in.
    literal = "Hi there"
    // So when we reallocate the buffer for the string, it must be 16 bytes,
    // instead of only the 8 bytes you might expect if you weren't thinking
    // about the null terminator or weren't planning to copy it in.
    data << literal
    assert: data.space == 16
    assert: data.size == 8

  :it "converts to and from an array of bytes"
    assert: "string".as_array == ['s', 't', 'r', 'i', 'n', 'g']
    assert: String.from_array("string".as_array) == "string"

  :it "converts to and from a byte string"
    assert: "string".as_bytes == b"string"
    assert: String.from_bytes(b"string") == "string"

  :it "has its underlying buffer taken and lifted to iso, leaving it empty"
    giver ref = "example".clone
    cpointer = giver.cpointer
    taker iso = giver.take_buffer

    assert: giver.cpointer.is_null
    assert: taker.cpointer.is_not_null
    assert: taker.cpointer.address == cpointer.address
    assert: giver.size == 0, assert: giver.space == 0
    assert: taker.size == 7, assert: taker.space >= 7

  :it "compares bytewise equality with another string"
    assert: ("string" == "string")
    assert: ("string" == "other").is_false

  :it "checks if it starts with a substring equal to the other string"
    assert: "foo".starts_with("foo")
    assert: "foo".starts_with("food").is_false
    assert: "food".starts_with("foo")
    assert: "barfood".starts_with("foo").is_false
    assert: "barfood".starts_with("barf")
    assert: "barfood".starts_with("")

  :it "checks if it ends with a substring equal to the other string"
    assert: "food".ends_with("foo").is_false
    assert: "foo".ends_with("foo")
    assert: "foo".ends_with("food").is_false
    assert: "snafoo".ends_with("foo")
    assert: "snafoozled".ends_with("foo").is_false
    assert: "snafoozled".ends_with("")

  :it "checks if it has a common bytes with another string at specific offsets"
    assert: "foodbar".is_byte_slice_equal(1, b"broodbard", 2, 6)
    assert: "foodbar".is_byte_slice_equal(1, b"broodbard", 2, 5)
    assert: "foodbar".is_byte_slice_equal(2, b"broodbard", 2, 5).is_false
    assert: "foodbar".is_byte_slice_equal(1, b"broodbard", 2, 7).is_false
    assert: "foodbar".is_byte_slice_equal(1, b"broodbard", 1, 6).is_false
    assert: "foodbar".is_byte_slice_equal(0, b"broodbard", 1, 6).is_false
    assert: "broodbard".is_byte_slice_equal(2, b"foodbar", 1, 6)
    assert: "broodbard".is_byte_slice_equal(2, b"foodbar", 1, 5)
    assert: "broodbard".is_byte_slice_equal(2, b"foodbar", 2, 5).is_false
    assert: "broodbard".is_byte_slice_equal(2, b"foodbar", 1, 7).is_false
    assert: "broodbard".is_byte_slice_equal(1, b"foodbar", 1, 6).is_false
    assert: "broodbard".is_byte_slice_equal(1, b"foodbar", 0, 6).is_false

  :it "checks if it is an empty string or not"
    assert: "".is_empty
    assert: "".is_not_empty.is_false
    assert: "example".is_empty.is_false
    assert: "example".is_not_empty
    assert: String.new.is_empty
    assert: String.new.is_not_empty.is_false
    assert: (String.new << "example").is_empty.is_false
    assert: (String.new << "example").is_not_empty

  :it "clones itself into a new string"
    string String = "example"
    assert: string.clone == "example"

  :it "finds the index of another substring within it"
    assert: "bar food foo".offset_of!("foo") == 4
    assert error: "bar food foo".offset_of!("bard")
    assert error: "bar food foo".offset_of!("nope")
    assert error: "bar food foo".offset_of!("")
    assert: "bar food foo".includes("foo")
    assert: "bar food foo".includes("bard").is_false
    assert: "bar food foo".includes("nope").is_false
    assert: "bar food foo".includes("").is_false

  :it "hashes the bytes of the string"
    // TODO: separate tests for 32-bit platforms
    assert: "".hash == 0x5a6ef77074ebc84b
    assert: "a".hash == 0xc11328477bc0f5d1
    assert: "ab".hash == 0x5644ac035e40d569
    assert: "abc".hash == 0x0347080fbf5fcd81
    assert: "abcd".hash == 0x056b66b8dc802bcc
    assert: "abcde".hash == 0xa069c8fd63a91f4d
    assert: "abcdef".hash == 0xbeefdee945780801
    assert: "abcdefg".hash == 0xe69105bd8738bf8b
    assert: "abcdefgh".hash == 0xb6bf9055973aac7c
    assert: "abcdefghi".hash == 0x902378a90af0d84c
    assert: "abcdefghij".hash == 0xfc9c0d0d762a2620
    assert: "abcdefghijk".hash == 0x11282593170377f7
    assert: "abcdefghijkl".hash == 0x5838d192cb38726f
    assert: "abcdefghijklm".hash == 0xf21a597f01196756
    assert: "abcdefghijklmn".hash == 0x6fbbd4bf88ffa42f
    assert: "abcdefghijklmno".hash == 0x21b686e60a01d3cf
    assert: "abcdefghijklmnop".hash == 0xb9840dda738aa078
    assert: "abcdefghijklmnopq".hash == 0x382023e454ce0f17
    assert: "abcdefghijklmnopqr".hash == 0xb9a30464d3a84eea
    assert: "abcdefghijklmnopqrs".hash == 0x67e3d76421289602
    assert: "abcdefghijklmnopqrstuvwxyz".hash == 0xd923d48cb07e0dff
    assert: "abcdefghijklmnopqrstuvwxyz123456".hash == 0xf0313df4c45d2356
    assert: "abcdefghijklmnopqrstuvwxyz1234567".hash == 0x318142938d302ca7
    assert: "abcdefghijklmnopqrstuvwxyz12345678".hash == 0xc252e12245234d53
    assert: "abcdefghijklmnopqrstuvwxyz123456789".hash == 0x67b87093be2c643a
    assert: "abcdefghijklmnopqrstuvwxyz1234567890".hash == 0xd08871fe67966b9c
    assert: "abcdefghijklmnopqrstuvwxyz1234567890ABCDEFGHIJK".hash == 0x1e869b7a9afa4380
    assert: "abcdefghijklmnopqrstuvwxyz1234567890ABCDEFGHIJKL".hash == 0x3148b1484f8b67f2
    assert: "abcdefghijklmnopqrstuvwxyz1234567890ABCDEFGHIJKLM".hash == 0x49c301d536254663
    assert: "abcdefghijklmnopqrstuvwxyz1234567890ABCDEFGHIJKLMN".hash == 0xf98dad6467aa9e59
    assert: "abcdefghijklmnopqrstuvwxyz1234567890ABCDEFGHIJKLMNO".hash == 0x6352087a94e85ca3
    assert: "abcdefghijklmnopqrstuvwxyz1234567890ABCDEFGHIJKLMNOPQRSTUVWXYZ".hash == 0x92c520d7bb0dd005
    assert: "abcdefghijklmnopqrstuvwxyz1234567890ABCDEFGHIJKLMNOPQRSTUVWXYZ~".hash == 0x3e9cc8a6eb110aad
    assert: "abcdefghijklmnopqrstuvwxyz1234567890ABCDEFGHIJKLMNOPQRSTUVWXYZ~!".hash == 0x664e401443fa34ec
    assert: "abcdefghijklmnopqrstuvwxyz1234567890ABCDEFGHIJKLMNOPQRSTUVWXYZ~!@".hash == 0xcdc385ef7bd81768
    assert: "abcdefghijklmnopqrstuvwxyz1234567890ABCDEFGHIJKLMNOPQRSTUVWXYZ~!@#".hash == 0xcc161e1b3e08cf38
    assert: "abcdefghijklmnopqrstuvwxyz1234567890ABCDEFGHIJKLMNOPQRSTUVWXYZ~!@#$^&*()_+-=[]{}|;':,./<>?12345".hash == 0xf18118a7f80edff2
    assert: "abcdefghijklmnopqrstuvwxyz1234567890ABCDEFGHIJKLMNOPQRSTUVWXYZ~!@#$^&*()_+-=[]{}|;':,./<>?123456".hash == 0xb8f457fb4ac286be
    assert: "abcdefghijklmnopqrstuvwxyz1234567890ABCDEFGHIJKLMNOPQRSTUVWXYZ~!@#$^&*()_+-=[]{}|;':,./<>?1234567".hash == 0x6d0219d3b753429b
    assert: "abcdefghijklmnopqrstuvwxyz1234567890ABCDEFGHIJKLMNOPQRSTUVWXYZ~!@#$^&*()_+-=[]{}|;':,./<>?12345678".hash == 0x1634233e81d92880
    assert: "abcdefghijklmnopqrstuvwxyz1234567890ABCDEFGHIJKLMNOPQRSTUVWXYZ~!@#$^&*()_+-=[]{}|;':,./<>?123456789".hash == 0x525edfc527066bfe
    assert: "abcdefghijklmnopqrstuvwxyz1234567890ABCDEFGHIJKLMNOPQRSTUVWXYZ~!@#$^&*()_+-=[]{}|;':,./<>?1234567890abcdefghijklmnopqrstuvwxyz1234567890ABCDEFG".hash == 0x750d408a38757d76
    assert: "abcdefghijklmnopqrstuvwxyz1234567890ABCDEFGHIJKLMNOPQRSTUVWXYZ~!@#$^&*()_+-=[]{}|;':,./<>?1234567890abcdefghijklmnopqrstuvwxyz1234567890ABCDEFGH".hash == 0x1c2bc74026bb4958
    assert: "abcdefghijklmnopqrstuvwxyz1234567890ABCDEFGHIJKLMNOPQRSTUVWXYZ~!@#$^&*()_+-=[]{}|;':,./<>?1234567890abcdefghijklmnopqrstuvwxyz1234567890ABCDEFGHI".hash == 0xa14567c14f4be1d1
    assert: "abcdefghijklmnopqrstuvwxyz1234567890ABCDEFGHIJKLMNOPQRSTUVWXYZ~!@#$^&*()_+-=[]{}|;':,./<>?1234567890abcdefghijklmnopqrstuvwxyz1234567890ABCDEFGHIJ".hash == 0xde4bacbd8259d7cd
    assert: "abcdefghijklmnopqrstuvwxyz1234567890ABCDEFGHIJKLMNOPQRSTUVWXYZ~!@#$^&*()_+-=[]{}|;':,./<>?1234567890abcdefghijklmnopqrstuvwxyz1234567890ABCDEFGHIJKLMNOPQRSTUVWXYZ~!@#$^&*()_+-=[]{}|;':,./<>?".hash == 0x9f111429a3962a45
    assert: "abcdefghijklmnopqrstuvwxyz1234567890ABCDEFGHIJKLMNOPQRSTUVWXYZ~!@#$^&*()_+-=[]{}|;':,./<>?1234567890abcdefghijklmnopqrstuvwxyz1234567890ABCDEFGHIJKLMNOPQRSTUVWXYZ~!@#$^&*()_+-=[]{}|;':,./<>?1".hash == 0x692ea9f400b93866
    assert: "abcdefghijklmnopqrstuvwxyz1234567890ABCDEFGHIJKLMNOPQRSTUVWXYZ~!@#$^&*()_+-=[]{}|;':,./<>?1234567890abcdefghijklmnopqrstuvwxyz1234567890ABCDEFGHIJKLMNOPQRSTUVWXYZ~!@#$^&*()_+-=[]{}|;':,./<>?12".hash == 0xc4fa4248bbe8a596
    assert: "abcdefghijklmnopqrstuvwxyz1234567890ABCDEFGHIJKLMNOPQRSTUVWXYZ~!@#$^&*()_+-=[]{}|;':,./<>?1234567890abcdefghijklmnopqrstuvwxyz1234567890ABCDEFGHIJKLMNOPQRSTUVWXYZ~!@#$^&*()_+-=[]{}|;':,./<>?123".hash == 0x5ef404e32a583530
    assert: "abcdefghijklmnopqrstuvwxyz1234567890ABCDEFGHIJKLMNOPQRSTUVWXYZ~!@#$^&*()_+-=[]{}|;':,./<>?1234567890abcdefghijklmnopqrstuvwxyz1234567890ABCDEFGHIJKLMNOPQRSTUVWXYZ~!@#$^&*()_+-=[]{}|;':,./<>?1234".hash == 0x7aac74791ad8ffef
    assert: "abcdefghijklmnopqrstuvwxyz1234567890ABCDEFGHIJKLMNOPQRSTUVWXYZ~!@#$^&*()_+-=[]{}|;':,./<>?1234567890abcdefghijklmnopqrstuvwxyz1234567890ABCDEFGHIJKLMNOPQRSTUVWXYZ~!@#$^&*()_+-=[]{}|;':,./<>?12345".hash == 0x14a019e4c3504be2
    assert: "abcdefghijklmnopqrstuvwxyz1234567890ABCDEFGHIJKLMNOPQRSTUVWXYZ~!@#$^&*()_+-=[]{}|;':,./<>?1234567890abcdefghijklmnopqrstuvwxyz1234567890ABCDEFGHIJKLMNOPQRSTUVWXYZ~!@#$^&*()_+-=[]{}|;':,./<>?123456".hash == 0xd28ff4b8190e9ea1
    assert: "abcdefghijklmnopqrstuvwxyz1234567890ABCDEFGHIJKLMNOPQRSTUVWXYZ~!@#$^&*()_+-=[]{}|;':,./<>?1234567890abcdefghijklmnopqrstuvwxyz1234567890ABCDEFGHIJKLMNOPQRSTUVWXYZ~!@#$^&*()_+-=[]{}|;':,./<>?1234567890abcdefghijklmnopqrstuvwxyz1234567890ABC".hash == 0x46a67d7d761bcad3
    assert: "abcdefghijklmnopqrstuvwxyz1234567890ABCDEFGHIJKLMNOPQRSTUVWXYZ~!@#$^&*()_+-=[]{}|;':,./<>?1234567890abcdefghijklmnopqrstuvwxyz1234567890ABCDEFGHIJKLMNOPQRSTUVWXYZ~!@#$^&*()_+-=[]{}|;':,./<>?1234567890abcdefghijklmnopqrstuvwxyz1234567890ABCD".hash == 0x3d5638a13d12c777
    assert: "abcdefghijklmnopqrstuvwxyz1234567890ABCDEFGHIJKLMNOPQRSTUVWXYZ~!@#$^&*()_+-=[]{}|;':,./<>?1234567890abcdefghijklmnopqrstuvwxyz1234567890ABCDEFGHIJKLMNOPQRSTUVWXYZ~!@#$^&*()_+-=[]{}|;':,./<>?1234567890abcdefghijklmnopqrstuvwxyz1234567890ABCDE".hash == 0xc5a0044838e12f99
    assert: "abcdefghijklmnopqrstuvwxyz1234567890ABCDEFGHIJKLMNOPQRSTUVWXYZ~!@#$^&*()_+-=[]{}|;':,./<>?1234567890abcdefghijklmnopqrstuvwxyz1234567890ABCDEFGHIJKLMNOPQRSTUVWXYZ~!@#$^&*()_+-=[]{}|;':,./<>?1234567890abcdefghijklmnopqrstuvwxyz1234567890ABCDEF".hash == 0xb0b208ca9308b584
    assert: "abcdefghijklmnopqrstuvwxyz1234567890ABCDEFGHIJKLMNOPQRSTUVWXYZ~!@#$^&*()_+-=[]{}|;':,./<>?1234567890abcdefghijklmnopqrstuvwxyz1234567890ABCDEFGHIJKLMNOPQRSTUVWXYZ~!@#$^&*()_+-=[]{}|;':,./<>?1234567890abcdefghijklmnopqrstuvwxyz1234567890ABCDEFG".hash == 0xc5910f257439a31e

  :it "returns the byte at the given byte offset"
    assert: "example"[3]! == 'm'
    assert error: "example"[7]!

  :it "trims bytes off the start and end of the string"
    assert: "example".trim(2)    == "ample"
    assert: "example".trim(2, 5) == "amp"
    assert: "example".trim(7)    == ""
    assert: "example".trim(999)  == ""
    assert: "example".trim(5, 4) == ""

  :it "trims a mutable string in place with the same semantics"
    assert: "example".clone.trim_in_place(2)    == "ample"
    assert: "example".clone.trim_in_place(2, 5) == "amp"
    assert: "example".clone.trim_in_place(7)    == ""
    assert: "example".clone.trim_in_place(999)  == ""
    assert: "example".clone.trim_in_place(5, 4) == ""

  :it "pushes a new byte onto the end of the string"
    assert: String.new.push_byte('o').push_byte('k') == "ok"

  :it "yields each byte in the string"
    string Array(U8) = []
    "foo".each_byte -> (byte | string << byte)
    assert: string == ['f', 'o', 'o']

  :it "yields each byte in the string, along with the index"
    string_a Array(U8) = []
    string_b Array(USize) = []
    "yo".each_byte_with_index -> (byte, index |
      string_a << byte
      string_b << index
    )
    assert: string_a == ['y', 'o']
    assert: string_b == [0, 1]

  :it "won't violate memory safety when the buffer is mutated during iteration"
    seen Array(U8) = []
    string = "123".clone
    string.each_byte_with_index -> (byte, index |
      string.clear
      seen << byte
    )
    assert: seen == ['1']

    seen.clear
    string = "123".clone
    string.each_char_with_index_and_width -> (char, index, width |
      string.clear
      seen << char.u8
    )
    assert: seen == ['1']

  :it "copies bytes from the given string onto the end of the string"
    assert: (String.new << "foo" << "" << "bar") == "foobar"

  :it "creates a multiplicit copy of the string"
    assert: ("Hey" * 3) == "HeyHeyHey"
    assert: ("Hey" * 1) == "Hey"
    assert: ("Hey" * 0) == ""

  :it "splits the string at every occurrence of the given byte value"
    assert: "foo.bar.baz".split('.') == ["foo", "bar", "baz"]
    assert: "foo.".split('.') == ["foo"]
    assert: ".foo".split('.') == ["", "foo"]
    assert: ".foo.".split('.') == ["", "foo"]
    assert: ".foo..".split('.') == ["", "foo", ""]
    assert: "".split('.') == Array(String).new // TODO: empty array literal
    assert: ".".split('.') == [""] // FIXME? different from Ruby: []

  :it "lexically compares the string with another string of the same length"
    assert: "examplE" < "example"
    assert: "example" > "examplE"
    assert: ("example" < "examplE").is_false
    assert: ("examplE" > "example").is_false
    assert: "examplE" <= "example"
    assert: "example" >= "examplE"
    assert: ("example" <= "examplE").is_false
    assert: ("examplE" >= "example").is_false

  :it "lexically compares the string with an identical string"
    assert: ("example" < "example").is_false
    assert: ("example" > "example").is_false
    assert: "example" <= "example"
    assert: "example" >= "example"

  :it "lexically compares with a nearly identical string of different length"
    assert: "example" < "example!"
    assert: "example!" > "example"
    assert: ("example!" < "example").is_false
    assert: ("example" > "example!").is_false
    assert: "example" <= "example!"
    assert: "example!" >= "example"
    assert: ("example!" <= "example").is_false
    assert: ("example" >= "example!").is_false

  :it "parses an integer from the string decimal representation"
    assert: "36".parse_i64!  == 36
    assert: "+36".parse_i64! == 36
    assert: "-36".parse_i64! == -36
    assert error: "36bad".parse_i64!

  :it "parses a floating point from the string decimal representation"
    assert: "36.3".parse_f64!  == 36.3
    assert error: "36.3bad".parse_f64!

  :it "returns the unicode codepoint found at the given offset, if valid"
    string = "नमस्ते"
    assert: string.char_at!(0) == 'न' // valid
    assert: string.char_at!(1) == '�' // invalid
    assert: string.char_at!(2) == '�' // invalid
    assert: string.char_at!(3) == 'म' // valid
    assert: string.char_at!(4) == '�' // invalid
    assert: string.char_at!(5) == '�' // invalid
    assert: string.char_at!(6) == 'स' // valid
    assert: string.char_at!(7) == '�' // invalid
    assert: string.char_at!(8) == '�' // invalid
    assert: string.char_at!(9) == '्' // valid (diacritic)
    assert: string.char_at!(10) == '�' // invalid
    assert: string.char_at!(11) == '�' // invalid
    assert: string.char_at!(12) == 'त' // valid
    assert: string.char_at!(13) == '�' // invalid
    assert: string.char_at!(14) == '�' // invalid
    assert: string.char_at!(15) == 'े' // valid (diacritic)
    assert: string.char_at!(16) == '�' // invalid
    assert: string.char_at!(17) == '�' // invalid
    assert error: string.char_at!(18) // out of bounds

  :it "iterates over unicode codepoints with starting indices and byte widths"
    codepoints Array(U32) = []
    indices Array(USize) = []
    widths Array(USize) = []
    "\"नमस्ते!\"".each_char_with_index_and_width -> (codepoint, index, width |
      codepoints << codepoint
      indices << index
      widths << width
    )
    assert: codepoints == ['"', 'न', 'म', 'स', '्', 'त', 'े', '!', '"']
    assert: indices    == [0,    1,   4,   7,  10,  13,  16,  19,  20]
    assert: widths     == [1,    3,   3,   3,   3,   3,   3,   1,   1]

  :it "reverse-iterates over unicode codepoints as well"
    codepoints Array(U32) = []
    indices Array(USize) = []
    widths Array(USize) = []
    "\"नमस्ते!\"".reverse_each_char_with_index_and_width -> (codepoint, index, width |
      codepoints << codepoint
      indices << index
      widths << width
    )
    assert: codepoints == ['"', '!', 'े', 'त', '्', 'स', 'म', 'न', '"']
    assert: indices    == [20,  19,  16,  13,  10,   7,   4,   1,   0]
    assert: widths     == [1,    1,   3,   3,   3,   3,   3,   3,   1]

  :it "replaces all occurrences of a substring with an equal-length string"
    assert: "AA--BB--CC-DD---EE----FF--GG".clone.replace_all(
      "--", ".."
    ) == "AA..BB..CC-DD..-EE....FF..GG"

  :it "replaces all occurrences of a substring with a longer string"
    assert: "AA--BB--CC-DD---EE----FF--GG".clone.replace_all(
      "--", "...."
    ) == "AA....BB....CC-DD....-EE........FF....GG"

  :it "replaces all occurrences of a substring with a shorter string"
    assert: "AA----BB----CC---DD-----EE--------FF----GG".clone.replace_all(
      "----", ".."
    ) == "AA..BB..CC---DD..-EE....FF..GG"

  :it "joins an array of strings"
    assert: String.join([
      "foo"
      "bar"
    ]) == "foobar"

    assert: String.join([
      "foo"
      "bar"
    ], " ") == "foo bar"

  :it "splits a string into a pair"
    assert: "foo=bar".split2!('=').first  == "foo"
    assert: "foo=bar".split2!('=').second == "bar"

    assert: "foo=bar=baz".split2!('=').first  == "foo"
    assert: "foo=bar=baz".split2!('=').second == "bar=baz"

    assert: "foo=".split2!('=').first == "foo"
    assert: "foo=".split2!('=').second == ""

    assert error: "foo".split2!('=')

  :it "finds the end of leading whitespace at the start of the string"
    assert: "  \t\t\f\f\v\v\r\r\n\nFOO".leading_whitespace_index == 12
    assert: "  \t\t\f\f\v\v\r\r\n\n".leading_whitespace_index == 12
    assert: "  FOO".leading_whitespace_index == 2
    assert: "FOO".leading_whitespace_index == 0
    assert: "".leading_whitespace_index == 0

  :it "finds the end of leading whitespace from somewhere in the string"
    assert: "  ...  \t\t\f\f\v\v\r\r\n\nFOO".leading_whitespace_index(5) == 17
    assert: "  ...  \t\t\f\f\v\v\r\r\n\n".leading_whitespace_index(5) == 17
    assert: "  ...  FOO".leading_whitespace_index(5) == 7
    assert: "  ...  FOO".leading_whitespace_index(6) == 7
    assert: "  ...  FOO".leading_whitespace_index(7) == 7
    assert: "  ...  FOO".leading_whitespace_index(8) == 8
    assert: "  ...FOO".leading_whitespace_index(5) == 5
    assert: "  ...".leading_whitespace_index(5) == 5

  :it "finds the end of trailing whitespace at the end of the string"
    assert: "FOO  \t\t\f\f\v\v\r\r\n\n".trailing_whitespace_index == 3
    assert: "  \t\t\f\f\v\v\r\r\n\n".trailing_whitespace_index == 0
    assert: "FOO  ".trailing_whitespace_index == 3
    assert: "FOO".trailing_whitespace_index == 3
    assert: "".trailing_whitespace_index == 0

  :it "finds the end of trailing whitespace from somewhere in the string"
    assert: "FOO  \t\t\f\f\v\v\r\r\n\n...  ".trailing_whitespace_index(12) == 3
    assert: "FOO  ...  ".trailing_whitespace_index(5) == 3
    assert: "FOO  ...  ".trailing_whitespace_index(4) == 3
    assert: "FOO  ...  ".trailing_whitespace_index(3) == 3
    assert: "FOO  ...  ".trailing_whitespace_index(2) == 2
    assert: "...  ".trailing_whitespace_index(0) == 0
