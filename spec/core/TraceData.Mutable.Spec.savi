:class Savi.TraceData.Mutable.Spec
  :is Spec
  :const describes: "TraceData.Mutable"

  :it "can inject values into a mutable object tree"
    alice = _ExampleMutablePerson["Alice", 30]
    alice.children << _ExampleMutablePerson["Bobby", 12]
    alice.children << _ExampleMutablePerson["Charlie", 5]

    // Bobby now prefers to be called Rob.
    mut1 = _TraceMutatorInject(String).new("children/0/name", "Rob")
    alice.trace_data_mutable(mut1)
    assert: mut1.errors == []

    // Happy Birthday, Charlie!
    mut2 = _TraceMutatorInject(U8).new("children/1/age", 6)
    alice.trace_data_mutable(mut2)
    assert: mut2.errors == []

    // Baby David has arrived!
    mut3 = _TraceMutatorInject(String).new("children/2/name", "David")
    alice.trace_data_mutable(mut3)
    assert: mut3.errors == []

    // The changes are reflected in the printed trace.
    alice_printed = String.new
    alice.trace_data(Inspect.TraceData.Printer.Deterministic.new(alice_printed))
    assert: alice_printed == <<<
      #1:
        name: "Alice"
        age: 30
        children: #2:
          0: #3:
            name: "Rob"
            age: 12
          1: #4:
            name: "Charlie"
            age: 6
          2: #5:
            name: "David"
            age: 0
    >>>

  :it "can inject every type of primitive value"
    example = _ExampleMutableEachPrimitive.new

    mut_bool = _TraceMutatorInject(Bool).new("bool", True)
    example.trace_data_mutable(mut_bool)
    assert: mut_bool.errors == []

    mut_u64 = _TraceMutatorInject(U64).new("u64", 0x1234567890ABCDEF)
    example.trace_data_mutable(mut_u64)
    assert: mut_u64.errors == []

    mut_u32 = _TraceMutatorInject(U32).new("u32", 0x12345678)
    example.trace_data_mutable(mut_u32)
    assert: mut_u32.errors == []

    mut_u16 = _TraceMutatorInject(U16).new("u16", 0x1234)
    example.trace_data_mutable(mut_u16)
    assert: mut_u16.errors == []

    mut_u8 = _TraceMutatorInject(U8).new("u8", 0x12)
    example.trace_data_mutable(mut_u8)
    assert: mut_u8.errors == []

    mut_i64 = _TraceMutatorInject(I64).new("i64", -99)
    example.trace_data_mutable(mut_i64)
    assert: mut_i64.errors == []

    mut_i32 = _TraceMutatorInject(I32).new("i32", -98)
    example.trace_data_mutable(mut_i32)
    assert: mut_i32.errors == []

    mut_i16 = _TraceMutatorInject(I16).new("i16", -97)
    example.trace_data_mutable(mut_i16)
    assert: mut_i16.errors == []

    mut_i8 = _TraceMutatorInject(I8).new("i8", -96)
    example.trace_data_mutable(mut_i8)
    assert: mut_i8.errors == []

    mut_f64 = _TraceMutatorInject(F64).new("f64", 3.14159)
    example.trace_data_mutable(mut_f64)
    assert: mut_f64.errors == []

    mut_f32 = _TraceMutatorInject(F32).new("f32", 1.5)
    example.trace_data_mutable(mut_f32)
    assert: mut_f32.errors == []

    mut_bytes = _TraceMutatorInject(Bytes).new("bytes", b"Hello")
    example.trace_data_mutable(mut_bytes)
    assert: mut_bytes.errors == []

    mut_string = _TraceMutatorInject(String).new("string", "World")
    example.trace_data_mutable(mut_string)
    assert: mut_string.errors == []

    // The changes are reflected in the printed trace.
    example_printed = String.new
    example.trace_data(Inspect.TraceData.Printer.Deterministic.new(example_printed))
    assert: example_printed == <<<
      #1:
        bool: True
        u64: 1311768467294899695
        u32: 305419896
        u16: 4660
        u8: 18
        i64: -99
        i32: -98
        i16: -97
        i8: -96
        f64: 3.14159
        f32: 1.5
        bytes: b"Hello"
        string: "World"
    >>>

:: A test class demonstrating a simple data structure that can be mutated
:: by any `TraceData.Mutator` using the `TraceData.Mutable` trait.
:class _ExampleMutablePerson
  :var name String: ""
  :var age U8: 0
  :let children Array(_ExampleMutablePerson): []
  :new
  :new "[]"(@name, @age)

  :is TraceData
  :fun trace_data(trace TraceData.Observer)
    trace.object(identity_digest_of @) -> (
      trace.property("name", @name)
      trace.property("age", @age)
      if @children.is_not_empty (
        trace.property("children", @children)
      )
    )

  :is TraceData.Mutable
  :fun ref trace_data_mutable(trace TraceData.Mutator)
    trace.object(identity_digest_of @) -> (key |
      case key == (
      | "name" | trace.replace_string(@name) -> (v | @name = v)
      | "age"  | trace.replace_u8(@age) -> (v | @age = v)
      | "children" | @children.trace_data_mutable(trace)
      | trace.object_key_is_invalid
      )
    )

:: A test class demonstrating a every primitive that can be mutably replaced.
:class _ExampleMutableEachPrimitive
  :var bool Bool: False
  :var u64 U64: 0
  :var u32 U32: 0
  :var u16 U16: 0
  :var u8 U8: 0
  :var i64 I64: 0
  :var i32 I32: 0
  :var i16 I16: 0
  :var i8 I8: 0
  :var f64 F64: 0.0
  :var f32 F32: 0.0
  :var bytes Bytes: b""
  :var string String: ""

  :is TraceData
  :fun trace_data(trace TraceData.Observer)
    trace.object(identity_digest_of @) -> (
      trace.property("bool", @bool)
      trace.property("u64", @u64)
      trace.property("u32", @u32)
      trace.property("u16", @u16)
      trace.property("u8", @u8)
      trace.property("i64", @i64)
      trace.property("i32", @i32)
      trace.property("i16", @i16)
      trace.property("i8", @i8)
      trace.property("f64", @f64)
      trace.property("f32", @f32)
      trace.property("bytes", @bytes)
      trace.property("string", @string)
    )

  :is TraceData.Mutable
  :fun ref trace_data_mutable(trace TraceData.Mutator)
    trace.object(identity_digest_of @) -> (key |
      case key == (
      | "bool" | trace.replace_bool(@bool) -> (v | @bool = v)
      | "u64"  | trace.replace_u64(@u64) -> (v | @u64 = v)
      | "u32"  | trace.replace_u32(@u32) -> (v | @u32 = v)
      | "u16"  | trace.replace_u16(@u16) -> (v | @u16 = v)
      | "u8"   | trace.replace_u8(@u8) -> (v | @u8 = v)
      | "i64"  | trace.replace_i64(@i64) -> (v | @i64 = v)
      | "i32"  | trace.replace_i32(@i32) -> (v | @i32 = v)
      | "i16"  | trace.replace_i16(@i16) -> (v | @i16 = v)
      | "i8"   | trace.replace_i8(@i8) -> (v | @i8 = v)
      | "f64"  | trace.replace_f64(@f64) -> (v | @f64 = v)
      | "f32"  | trace.replace_f32(@f32) -> (v | @f32 = v)
      | "bytes" | trace.replace_bytes(@bytes) -> (v | @bytes = v)
      | "string" | trace.replace_string(@string) -> (v | @string = v)
      | trace.object_key_is_invalid
      )
    )

:: A test class used to demonstrate how a `TraceData.Mutator` implementation
:: can be used to inject a single value into an arbitrary object tree path,
:: as long as all the objects along that path implement `TraceData.Mutable`.
:class _TraceMutatorInject(T val)
  :is TraceData.Mutator

  :var current USize: 0
  :let errors Array(String): []

  :let path Array(String)
  :let value T
  :new (path String, @value)
    @path = path.split('/')

  :fun ref object(recurse_id USize) None
    :yields String for None
    try (
      path_index = @current, @current += 1
      yield @path[path_index]!
    |
      @errors << "object is beyond path: \(String.join(@path, "/"))"
    )

  :fun ref object_key_is_invalid None
    @errors << "\(try @path[@current -! 1]!.format.literal) is not a valid key"

  :fun ref object_key_cannot_be_modified None
    @errors << "\(try @path[@current -! 1]!.format.literal) cannot be modified"

  :fun ref array(recurse_id USize, size USize) None
    :yields USize for None
    try (
      path_index = @current, @current += 1
      yield @path[path_index]!.parse_i64!.usize!
    |
      @errors << "array is beyond path: \(String.join(@path, "/"))"
    )

  :fun ref array_truncate(recurse_id USize, size USize) None
    :yields USize for None
    None

  :fun ref array_index_is_invalid None
    @errors << "\(try @path[@current -! 1]!) is not a valid index"

  :fun ref array_index_cannot_be_modified None
    @errors << "\(try @path[@current -! 1]!) is not a modifiable index"

  :fun ref set_none:   v = @value, if v <: None   (yield None)
  :fun ref set_bool:   v = @value, if v <: Bool   (yield Bool[v])
  :fun ref set_u64:    v = @value, if v <: U64    (yield U64[v])
  :fun ref set_u32:    v = @value, if v <: U32    (yield U32[v])
  :fun ref set_u16:    v = @value, if v <: U16    (yield U16[v])
  :fun ref set_u8:     v = @value, if v <: U8     (yield U8[v])
  :fun ref set_i64:    v = @value, if v <: I64    (yield I64[v])
  :fun ref set_i32:    v = @value, if v <: I32    (yield I32[v])
  :fun ref set_i16:    v = @value, if v <: I16    (yield I16[v])
  :fun ref set_i8:     v = @value, if v <: I8     (yield I8[v])
  :fun ref set_f64:    v = @value, if v <: F64    (yield F64[v])
  :fun ref set_f32:    v = @value, if v <: F32    (yield F32[v])
  :fun ref set_bytes:  v = @value, if v <: Bytes  (yield v)
  :fun ref set_string: v = @value, if v <: String (yield v)
