:class Savi.Bytes.Spec
  :is Spec
  :const describes: "Bytes"

  :it "starts with zero space and a null pointer by default"
    data = Bytes.new
    assert: data.space == 0
    assert: data.size == 0
    assert: data.cpointer.is_null

  :it "allocates the next highest power of two containing the requested space"
    data = Bytes.new(12)
    assert: data.space == 16
    assert: data.size == 0
    assert: data.cpointer.is_not_null

    data = Bytes.new(16)
    assert: data.space == 16
    assert: data.size == 0
    assert: data.cpointer.is_not_null

    data = Bytes.new(17)
    assert: data.space == 32
    assert: data.size == 0
    assert: data.cpointer.is_not_null

  :it "won't reallocate when reserving space within the current allocation"
    data = Bytes.new(12)
    orig_pointer_address = data.cpointer.address

    data.reserve(16)
    assert: data.space == 16
    assert: data.size == 0
    assert: data.cpointer.is_not_null
    assert: data.cpointer.address == orig_pointer_address

    data.reserve(0)
    assert: data.space == 16
    assert: data.size == 0
    assert: data.cpointer.is_not_null
    assert: data.cpointer.address == orig_pointer_address

  :it "will reallocate when reserving space beyond the current allocation"
    data = Bytes.new(12)
    orig_pointer_address = data.cpointer.address

    // Go to a much larger size in a different allocator pool,
    // to ensure that we actually get a new pointer address.
    data.reserve(2040)

    assert: data.space == 2048
    assert: data.size == 0
    assert: data.cpointer.is_not_null
    assert: data.cpointer.address != orig_pointer_address

  :it "reallocates to a size that includes a null terminator when appending"
    data = Bytes.new
    assert: data.space == 0
    assert: data.size == 0

    // This 8-byte literal has a null terminator and thus 9 bytes to copy in.
    literal = b"Hi there"
    // So when we reallocate the buffer for the string, it must be 16 bytes,
    // instead of only the 8 bytes you might expect if you weren't thinking
    // about the null terminator or weren't planning to copy it in.
    data << literal
    assert: data.space == 16
    assert: data.size == 8

  :it "reserves additional space beyond the current size"
    data = b"0123456789012345678901234567890123456789" // 40 bytes
    assert: data.clone.reserve(32)           .space == 64
    assert: data.clone.reserve_additional(32).space == 128
    assert: data.clone.reserve_additional(24).space == 64

  :it "can expand size to expose uninitialized bytes within the space available"
    data = Bytes.new(12)
    assert: data.space == 16
    assert: data.size == 0

    // We are allowed to expand the size.
    data.resize_possibly_including_uninitialized_memory(10)
    assert: data.space == 16
    assert: data.size == 10

    // Contracting to a smaller size is okay too!
    data.resize_possibly_including_uninitialized_memory(8)
    assert: data.space == 16
    assert: data.size == 8

    // We aren't allowed to expand beyond the space available.
    data.resize_possibly_including_uninitialized_memory(100)
    assert: data.space == 16
    assert: data.size == 16

  :it "converts to and from an array of bytes"
    assert: b"string".as_array == ['s', 't', 'r', 'i', 'n', 'g']
    assert: Bytes.from_array(b"string".as_array) == b"string"

  :it "converts to and from a string"
    assert: b"string".as_string == "string"
    assert: Bytes.from_string("string") == b"string"

  :it "has its underlying buffer taken and lifted to iso, leaving it empty"
    giver ref = b"example".clone
    cpointer = giver.cpointer
    taker iso = giver.take_buffer

    assert: giver.cpointer.is_null
    assert: taker.cpointer.is_not_null
    assert: taker.cpointer.address == cpointer.address
    assert: giver.size == 0, assert: giver.space == 0
    assert: taker.size == 7, assert: taker.space >= 7

  :it "compares bytewise equality with another bytes string"
    assert: (b"string" == b"string")
    assert: (b"string" == b"other").is_false

  :it "checks if it starts with a substring equal to the other bytes string"
    assert: b"foo".starts_with(b"foo")
    assert: b"foo".starts_with(b"food").is_false
    assert: b"food".starts_with(b"foo")
    assert: b"barfood".starts_with(b"foo").is_false
    assert: b"barfood".starts_with(b"barf")
    assert: b"barfood".starts_with(b"")

  :it "checks if it ends with a substring equal to the other bytes string"
    assert: b"food".ends_with(b"foo").is_false
    assert: b"foo".ends_with(b"foo")
    assert: b"foo".ends_with(b"food").is_false
    assert: b"snafoo".ends_with(b"foo")
    assert: b"snafoozled".ends_with(b"foo").is_false
    assert: b"snafoozled".ends_with(b"")

  :it "checks for a common slice with another bytes string at specific offsets"
    assert: b"foodbar".is_slice_equal(1, b"broodbard", 2, 6)
    assert: b"foodbar".is_slice_equal(1, b"broodbard", 2, 5)
    assert: b"foodbar".is_slice_equal(2, b"broodbard", 2, 5).is_false
    assert: b"foodbar".is_slice_equal(1, b"broodbard", 2, 7).is_false
    assert: b"foodbar".is_slice_equal(1, b"broodbard", 1, 6).is_false
    assert: b"foodbar".is_slice_equal(0, b"broodbard", 1, 6).is_false
    assert: b"broodbard".is_slice_equal(2, b"foodbar", 1, 6)
    assert: b"broodbard".is_slice_equal(2, b"foodbar", 1, 5)
    assert: b"broodbard".is_slice_equal(2, b"foodbar", 2, 5).is_false
    assert: b"broodbard".is_slice_equal(2, b"foodbar", 1, 7).is_false
    assert: b"broodbard".is_slice_equal(1, b"foodbar", 1, 6).is_false
    assert: b"broodbard".is_slice_equal(1, b"foodbar", 0, 6).is_false

  :it "checks for a common slice with another string at specific offsets"
    assert: b"foodbar".is_slice_equal(1, "broodbard", 2, 6)
    assert: b"foodbar".is_slice_equal(1, "broodbard", 2, 5)
    assert: b"foodbar".is_slice_equal(2, "broodbard", 2, 5).is_false
    assert: b"foodbar".is_slice_equal(1, "broodbard", 2, 7).is_false
    assert: b"foodbar".is_slice_equal(1, "broodbard", 1, 6).is_false
    assert: b"foodbar".is_slice_equal(0, "broodbard", 1, 6).is_false
    assert: b"broodbard".is_slice_equal(2, "foodbar", 1, 6)
    assert: b"broodbard".is_slice_equal(2, "foodbar", 1, 5)
    assert: b"broodbard".is_slice_equal(2, "foodbar", 2, 5).is_false
    assert: b"broodbard".is_slice_equal(2, "foodbar", 1, 7).is_false
    assert: b"broodbard".is_slice_equal(1, "foodbar", 1, 6).is_false
    assert: b"broodbard".is_slice_equal(1, "foodbar", 0, 6).is_false

  :it "checks if it is empty or not"
    assert: b"".is_empty
    assert: b"".is_not_empty.is_false
    assert: b"example".is_empty.is_false
    assert: b"example".is_not_empty
    assert: Bytes.new.is_empty
    assert: Bytes.new.is_not_empty.is_false
    assert: (Bytes.new << b"example").is_empty.is_false
    assert: (Bytes.new << b"example").is_not_empty
    assert: (Bytes.new << b"example").clear.is_empty
    assert: (Bytes.new << b"example").clear.is_not_empty.is_false

  :it "fills all or part of a range with zeros"
    assert: Bytes.new.fill_with_zeros(0, 3) == b"\x00\x00\x00"
    assert: b"foo bar".clone.fill_with_zeros(0, 3) == b"\x00\x00\x00 bar"
    assert: b"foo bar".clone.fill_with_zeros(5, 9) == b"foo b\x00\x00\x00\x00"
    assert: b"foo bar".clone.fill_with_zeros(5, 0) == b"foo bar"
    assert: b"foo bar".clone.fill_with_zeros(7, 9) == b"foo bar\x00\x00"
    assert: b"foo bar".clone.fill_with_zeros(8, 9) == b"foo bar\x00\x00"
    assert: b"foo bar".clone.fill_with_zeros(9, 9) == b"foo bar\x00\x00"
    assert: b"foo bar".clone.fill_with_zeros(10, 9) == b"foo bar\x00\x00"
    assert: b"foo bar".clone.fill_with_zeros(0, 9) ==
      b"\x00\x00\x00\x00\x00\x00\x00\x00\x00"

  :it "copies all or part of its content from another bytes buffer"
    assert: Bytes.new.copy_from(b"foo") == b"foo"
    assert: b"foo ".clone.copy_from(b"bar") == b"foo bar"
    assert: b"foo ".clone.copy_from(b"bar", 0, 3) == b"foo bar"
    assert: b"foo ".clone.copy_from(b"bar", 0, 9999) == b"foo bar"
    assert: b"foo ".clone.copy_from(b"bar", 9999, 3) == b"foo "
    assert: b"foo ".clone.copy_from(b"bar", 1, 2, 3) == b"fooa"
    assert: b"foo ".clone.copy_from(b"bar", 0, 3, 0) == b"bar "
    assert: b"foo ".clone.copy_from(b"bar", 0, 3, 1) == b"fbar"
    assert: b"foo ".clone.copy_from(b"bar", 0, 3, 9999) == b"foo bar"

  :it "clones itself into a new bytes buffer"
    string Bytes = b"example"
    assert: string.clone == b"example"

  :it "finds the index of another substring within it"
    assert: b"bar food foo".offset_of!(b"foo") == 4
    assert error: b"bar food foo".offset_of!(b"bard")
    assert error: b"bar food foo".offset_of!(b"nope")
    assert error: b"bar food foo".offset_of!(b"")
    assert: b"bar food foo".includes(b"foo")
    assert: b"bar food foo".includes(b"bard").is_false
    assert: b"bar food foo".includes(b"nope").is_false
    assert: b"bar food foo".includes(b"").is_false

  :it "hashes the bytes of the buffer"
    // TODO: separate tests for 32-bit platforms
    assert: b"".hash == 0x5a6ef77074ebc84b
    assert: b"a".hash == 0xc11328477bc0f5d1
    assert: b"ab".hash == 0x5644ac035e40d569
    assert: b"abc".hash == 0x0347080fbf5fcd81
    assert: b"abcd".hash == 0x056b66b8dc802bcc
    assert: b"abcde".hash == 0xa069c8fd63a91f4d
    assert: b"abcdef".hash == 0xbeefdee945780801
    assert: b"abcdefg".hash == 0xe69105bd8738bf8b
    assert: b"abcdefgh".hash == 0xb6bf9055973aac7c
    assert: b"abcdefghi".hash == 0x902378a90af0d84c
    assert: b"abcdefghij".hash == 0xfc9c0d0d762a2620
    assert: b"abcdefghijk".hash == 0x11282593170377f7
    assert: b"abcdefghijkl".hash == 0x5838d192cb38726f
    assert: b"abcdefghijklm".hash == 0xf21a597f01196756
    assert: b"abcdefghijklmn".hash == 0x6fbbd4bf88ffa42f
    assert: b"abcdefghijklmno".hash == 0x21b686e60a01d3cf
    assert: b"abcdefghijklmnop".hash == 0xb9840dda738aa078
    assert: b"abcdefghijklmnopq".hash == 0x382023e454ce0f17
    assert: b"abcdefghijklmnopqr".hash == 0xb9a30464d3a84eea
    assert: b"abcdefghijklmnopqrs".hash == 0x67e3d76421289602
    assert: b"abcdefghijklmnopqrstuvwxyz".hash == 0xd923d48cb07e0dff
    assert: b"abcdefghijklmnopqrstuvwxyz123456".hash == 0xf0313df4c45d2356
    assert: b"abcdefghijklmnopqrstuvwxyz1234567".hash == 0x318142938d302ca7
    assert: b"abcdefghijklmnopqrstuvwxyz12345678".hash == 0xc252e12245234d53
    assert: b"abcdefghijklmnopqrstuvwxyz123456789".hash == 0x67b87093be2c643a
    assert: b"abcdefghijklmnopqrstuvwxyz1234567890".hash == 0xd08871fe67966b9c
    assert: b"abcdefghijklmnopqrstuvwxyz1234567890ABCDEFGHIJK".hash == 0x1e869b7a9afa4380
    assert: b"abcdefghijklmnopqrstuvwxyz1234567890ABCDEFGHIJKL".hash == 0x3148b1484f8b67f2
    assert: b"abcdefghijklmnopqrstuvwxyz1234567890ABCDEFGHIJKLM".hash == 0x49c301d536254663
    assert: b"abcdefghijklmnopqrstuvwxyz1234567890ABCDEFGHIJKLMN".hash == 0xf98dad6467aa9e59
    assert: b"abcdefghijklmnopqrstuvwxyz1234567890ABCDEFGHIJKLMNO".hash == 0x6352087a94e85ca3
    assert: b"abcdefghijklmnopqrstuvwxyz1234567890ABCDEFGHIJKLMNOPQRSTUVWXYZ".hash == 0x92c520d7bb0dd005
    assert: b"abcdefghijklmnopqrstuvwxyz1234567890ABCDEFGHIJKLMNOPQRSTUVWXYZ~".hash == 0x3e9cc8a6eb110aad
    assert: b"abcdefghijklmnopqrstuvwxyz1234567890ABCDEFGHIJKLMNOPQRSTUVWXYZ~!".hash == 0x664e401443fa34ec
    assert: b"abcdefghijklmnopqrstuvwxyz1234567890ABCDEFGHIJKLMNOPQRSTUVWXYZ~!@".hash == 0xcdc385ef7bd81768
    assert: b"abcdefghijklmnopqrstuvwxyz1234567890ABCDEFGHIJKLMNOPQRSTUVWXYZ~!@#".hash == 0xcc161e1b3e08cf38
    assert: b"abcdefghijklmnopqrstuvwxyz1234567890ABCDEFGHIJKLMNOPQRSTUVWXYZ~!@#$^&*()_+-=[]{}|;':,./<>?12345".hash == 0xf18118a7f80edff2
    assert: b"abcdefghijklmnopqrstuvwxyz1234567890ABCDEFGHIJKLMNOPQRSTUVWXYZ~!@#$^&*()_+-=[]{}|;':,./<>?123456".hash == 0xb8f457fb4ac286be
    assert: b"abcdefghijklmnopqrstuvwxyz1234567890ABCDEFGHIJKLMNOPQRSTUVWXYZ~!@#$^&*()_+-=[]{}|;':,./<>?1234567".hash == 0x6d0219d3b753429b
    assert: b"abcdefghijklmnopqrstuvwxyz1234567890ABCDEFGHIJKLMNOPQRSTUVWXYZ~!@#$^&*()_+-=[]{}|;':,./<>?12345678".hash == 0x1634233e81d92880
    assert: b"abcdefghijklmnopqrstuvwxyz1234567890ABCDEFGHIJKLMNOPQRSTUVWXYZ~!@#$^&*()_+-=[]{}|;':,./<>?123456789".hash == 0x525edfc527066bfe
    assert: b"abcdefghijklmnopqrstuvwxyz1234567890ABCDEFGHIJKLMNOPQRSTUVWXYZ~!@#$^&*()_+-=[]{}|;':,./<>?1234567890abcdefghijklmnopqrstuvwxyz1234567890ABCDEFG".hash == 0x750d408a38757d76
    assert: b"abcdefghijklmnopqrstuvwxyz1234567890ABCDEFGHIJKLMNOPQRSTUVWXYZ~!@#$^&*()_+-=[]{}|;':,./<>?1234567890abcdefghijklmnopqrstuvwxyz1234567890ABCDEFGH".hash == 0x1c2bc74026bb4958
    assert: b"abcdefghijklmnopqrstuvwxyz1234567890ABCDEFGHIJKLMNOPQRSTUVWXYZ~!@#$^&*()_+-=[]{}|;':,./<>?1234567890abcdefghijklmnopqrstuvwxyz1234567890ABCDEFGHI".hash == 0xa14567c14f4be1d1
    assert: b"abcdefghijklmnopqrstuvwxyz1234567890ABCDEFGHIJKLMNOPQRSTUVWXYZ~!@#$^&*()_+-=[]{}|;':,./<>?1234567890abcdefghijklmnopqrstuvwxyz1234567890ABCDEFGHIJ".hash == 0xde4bacbd8259d7cd
    assert: b"abcdefghijklmnopqrstuvwxyz1234567890ABCDEFGHIJKLMNOPQRSTUVWXYZ~!@#$^&*()_+-=[]{}|;':,./<>?1234567890abcdefghijklmnopqrstuvwxyz1234567890ABCDEFGHIJKLMNOPQRSTUVWXYZ~!@#$^&*()_+-=[]{}|;':,./<>?".hash == 0x9f111429a3962a45
    assert: b"abcdefghijklmnopqrstuvwxyz1234567890ABCDEFGHIJKLMNOPQRSTUVWXYZ~!@#$^&*()_+-=[]{}|;':,./<>?1234567890abcdefghijklmnopqrstuvwxyz1234567890ABCDEFGHIJKLMNOPQRSTUVWXYZ~!@#$^&*()_+-=[]{}|;':,./<>?1".hash == 0x692ea9f400b93866
    assert: b"abcdefghijklmnopqrstuvwxyz1234567890ABCDEFGHIJKLMNOPQRSTUVWXYZ~!@#$^&*()_+-=[]{}|;':,./<>?1234567890abcdefghijklmnopqrstuvwxyz1234567890ABCDEFGHIJKLMNOPQRSTUVWXYZ~!@#$^&*()_+-=[]{}|;':,./<>?12".hash == 0xc4fa4248bbe8a596
    assert: b"abcdefghijklmnopqrstuvwxyz1234567890ABCDEFGHIJKLMNOPQRSTUVWXYZ~!@#$^&*()_+-=[]{}|;':,./<>?1234567890abcdefghijklmnopqrstuvwxyz1234567890ABCDEFGHIJKLMNOPQRSTUVWXYZ~!@#$^&*()_+-=[]{}|;':,./<>?123".hash == 0x5ef404e32a583530
    assert: b"abcdefghijklmnopqrstuvwxyz1234567890ABCDEFGHIJKLMNOPQRSTUVWXYZ~!@#$^&*()_+-=[]{}|;':,./<>?1234567890abcdefghijklmnopqrstuvwxyz1234567890ABCDEFGHIJKLMNOPQRSTUVWXYZ~!@#$^&*()_+-=[]{}|;':,./<>?1234".hash == 0x7aac74791ad8ffef
    assert: b"abcdefghijklmnopqrstuvwxyz1234567890ABCDEFGHIJKLMNOPQRSTUVWXYZ~!@#$^&*()_+-=[]{}|;':,./<>?1234567890abcdefghijklmnopqrstuvwxyz1234567890ABCDEFGHIJKLMNOPQRSTUVWXYZ~!@#$^&*()_+-=[]{}|;':,./<>?12345".hash == 0x14a019e4c3504be2
    assert: b"abcdefghijklmnopqrstuvwxyz1234567890ABCDEFGHIJKLMNOPQRSTUVWXYZ~!@#$^&*()_+-=[]{}|;':,./<>?1234567890abcdefghijklmnopqrstuvwxyz1234567890ABCDEFGHIJKLMNOPQRSTUVWXYZ~!@#$^&*()_+-=[]{}|;':,./<>?123456".hash == 0xd28ff4b8190e9ea1
    assert: b"abcdefghijklmnopqrstuvwxyz1234567890ABCDEFGHIJKLMNOPQRSTUVWXYZ~!@#$^&*()_+-=[]{}|;':,./<>?1234567890abcdefghijklmnopqrstuvwxyz1234567890ABCDEFGHIJKLMNOPQRSTUVWXYZ~!@#$^&*()_+-=[]{}|;':,./<>?1234567890abcdefghijklmnopqrstuvwxyz1234567890ABC".hash == 0x46a67d7d761bcad3
    assert: b"abcdefghijklmnopqrstuvwxyz1234567890ABCDEFGHIJKLMNOPQRSTUVWXYZ~!@#$^&*()_+-=[]{}|;':,./<>?1234567890abcdefghijklmnopqrstuvwxyz1234567890ABCDEFGHIJKLMNOPQRSTUVWXYZ~!@#$^&*()_+-=[]{}|;':,./<>?1234567890abcdefghijklmnopqrstuvwxyz1234567890ABCD".hash == 0x3d5638a13d12c777
    assert: b"abcdefghijklmnopqrstuvwxyz1234567890ABCDEFGHIJKLMNOPQRSTUVWXYZ~!@#$^&*()_+-=[]{}|;':,./<>?1234567890abcdefghijklmnopqrstuvwxyz1234567890ABCDEFGHIJKLMNOPQRSTUVWXYZ~!@#$^&*()_+-=[]{}|;':,./<>?1234567890abcdefghijklmnopqrstuvwxyz1234567890ABCDE".hash == 0xc5a0044838e12f99
    assert: b"abcdefghijklmnopqrstuvwxyz1234567890ABCDEFGHIJKLMNOPQRSTUVWXYZ~!@#$^&*()_+-=[]{}|;':,./<>?1234567890abcdefghijklmnopqrstuvwxyz1234567890ABCDEFGHIJKLMNOPQRSTUVWXYZ~!@#$^&*()_+-=[]{}|;':,./<>?1234567890abcdefghijklmnopqrstuvwxyz1234567890ABCDEF".hash == 0xb0b208ca9308b584
    assert: b"abcdefghijklmnopqrstuvwxyz1234567890ABCDEFGHIJKLMNOPQRSTUVWXYZ~!@#$^&*()_+-=[]{}|;':,./<>?1234567890abcdefghijklmnopqrstuvwxyz1234567890ABCDEFGHIJKLMNOPQRSTUVWXYZ~!@#$^&*()_+-=[]{}|;':,./<>?1234567890abcdefghijklmnopqrstuvwxyz1234567890ABCDEFG".hash == 0xc5910f257439a31e

  :it "returns the byte at the given byte offset"
    assert: b"example"[3]! == 'm'
    assert error: b"example"[7]!

  :it "assigns a new byte at the given byte offset"
    bytes Bytes'ref = b"example".clone
    assert: (bytes[3]! = 'M') == 'M'
    assert error: bytes[7]! = '?'
    assert: bytes == b"exaMple"

  :it "trims bytes off the start and end of the byte string"
    assert: b"example".trim(2)    == b"ample"
    assert: b"example".trim(2, 5) == b"amp"
    assert: b"example".trim(7)    == b""
    assert: b"example".trim(999)  == b""
    assert: b"example".trim(5, 4) == b""

  :it "trims a mutable byte string in place with the same semantics"
    assert: b"example".clone.trim_in_place(2)    == b"ample"
    assert: b"example".clone.trim_in_place(2, 5) == b"amp"
    assert: b"example".clone.trim_in_place(7)    == b""
    assert: b"example".clone.trim_in_place(999)  == b""
    assert: b"example".clone.trim_in_place(5, 4) == b""

  :it "truncates from the left or right"
    assert: b"example".clone.truncate(5)         == b"examp"
    assert: b"example".clone.truncate!(5)        == b"examp"
    assert: b"example".clone.truncate_left(2)    == b"ample"
    assert: b"example".clone.truncate_left!(2)   == b"ample"
    assert: b"example".clone.truncate(0)         == b""
    assert: b"example".clone.truncate!(0)        == b""
    assert: b"example".clone.truncate_left(0)    == b"example"
    assert: b"example".clone.truncate_left!(0)   == b"example"
    assert: b"example".clone.truncate(7)         == b"example"
    assert: b"example".clone.truncate!(7)        == b"example"
    assert: b"example".clone.truncate_left(7)    == b""
    assert: b"example".clone.truncate_left!(7)   == b""
    assert: b"example".clone.truncate(100)       == b"example"
    assert error: b"example".clone.truncate!(100)
    assert: b"example".clone.truncate_left(100)  == b""
    assert error: b"example".clone.truncate_left!(100)

  :it "chops off the left or right"
    center Bytes'ref = b"example".clone
    original_padding = center.space - center.size
    left ref = center.chop_left(2)
    right ref = center.chop_right(3)

    assert: left == b"ex"
    assert: center == b"amp"
    assert: right == b"le"

    // The three buffers are adjacent in memory.
    assert: left.cpointer(2).address == center.cpointer.address
    assert: center.cpointer(3).address == right.cpointer.address

    // The first two buffers have a space exactly the same as their size,
    // and the right buffer retains whatever space padding was in the original.
    assert: left.space == left.size
    assert: center.space == center.size
    assert: right.space == right.size + original_padding

    // Any of the three can have a byte appended without bleeding into the
    // adjacent memory of the other buffers, since under the hood, this
    // extension of either the left or center buffer forces reallocation of it.
    left.push('t'), center.push('s'), right.push('l')
    assert: left == b"ext"
    assert: center == b"amps"
    assert: right == b"lel"

    // After the pushes above, The buffers are no longer adjacent in memory,
    // checking with a pointer offset of both the original size and new size.
    assert: left.cpointer(2).address != center.cpointer.address
    assert: left.cpointer(3).address != center.cpointer.address
    assert: center.cpointer(3).address != right.cpointer.address
    assert: center.cpointer(4).address != right.cpointer.address

    // Also now the first two buffers have some padding in their space,
    // since they reserved more space when they were forced to reallocate.
    assert: left.space > left.size
    assert: center.space > center.size

    // Chopping with an out-of-bounds offset implicitly uses the full size.
    left_left ref = left.chop_left(100)
    assert: left_left == b"ext", assert: left == b""
    right_right ref = right.chop_right(100)
    assert: right_right == b"", assert: right == b"lel"

  :it "chops off the left or right (error-raising variant)"
    center Bytes'ref = b"example".clone
    original_padding = center.space - center.size
    left ref = try (center.chop_left!(2) | Bytes.new)
    right ref = try (center.chop_right!(3) | Bytes.new)

    assert: left == b"ex"
    assert: center == b"amp"
    assert: right == b"le"

    // The three buffers are adjacent in memory.
    assert: left.cpointer(2).address == center.cpointer.address
    assert: center.cpointer(3).address == right.cpointer.address

    // The first two buffers have a space exactly the same as their size,
    // and the right buffer retains whatever space padding was in the original.
    assert: left.space == left.size
    assert: center.space == center.size
    assert: right.space == right.size + original_padding

    // Any of the three can have a byte appended without bleeding into the
    // adjacent memory of the other buffers, since under the hood, this
    // extension of either the left or center buffer forces reallocation of it.
    left.push('t'), center.push('s'), right.push('l')
    assert: left == b"ext"
    assert: center == b"amps"
    assert: right == b"lel"

    // After the pushes above, The buffers are no longer adjacent in memory,
    // checking with a pointer offset of both the original size and new size.
    assert: left.cpointer(2).address != center.cpointer.address
    assert: left.cpointer(3).address != center.cpointer.address
    assert: center.cpointer(3).address != right.cpointer.address
    assert: center.cpointer(4).address != right.cpointer.address

    // Also now the first two buffers have some padding in their space,
    // since they reserved more space when they were forced to reallocate.
    assert: left.space > left.size
    assert: center.space > center.size

    // Chopping with an out-of-bounds offset raises an error.
    assert error: left.chop_left!(100)
    assert error: right.chop_right!(100)

  :it "chops into a null pointer on the right side when it runs out of space"
    // Chopping at the right edge of the buffer correctly leaves the right
    // Bytes with a null cpointer, rather than pointing out of bounds.
    // If we did not guarantee this, then calling `reserve` could lead to
    // attempting to reallocate in the heap from an out-of-bounds pointer.
    buffer_a = Bytes.new_iso(8), buffer_b = Bytes.new_iso(8)
    while buffer_a.space > buffer_a.size buffer_a.push('.')
    while buffer_b.space > buffer_b.size buffer_b.push('.')

    buffer_a_left = buffer_a.chop_left(buffer_a.size)
    assert: buffer_a_left.cpointer.is_not_null
    assert: buffer_a.cpointer.is_null

    buffer_b_right = buffer_b.chop_right(buffer_b.size)
    assert: buffer_b.cpointer.is_not_null
    assert: buffer_b_right.cpointer.is_null

  :it "chops into a null pointer on the right side (error-raising variant)"
    // Same test as above, but with the error-raising variants of chop methods.
    buffer_a = Bytes.new_iso(8), buffer_b = Bytes.new_iso(8)
    while buffer_a.space > buffer_a.size buffer_a.push('.')
    while buffer_b.space > buffer_b.size buffer_b.push('.')

    buffer_a_left = try (buffer_a.chop_left!(buffer_a.size) | b"".clone)
    assert: buffer_a_left.cpointer.is_not_null
    assert: buffer_a.cpointer.is_null

    buffer_b_right = try (buffer_b.chop_right!(buffer_b.size) | b"...".clone)
    assert: buffer_b.cpointer.is_not_null
    assert: buffer_b_right.cpointer.is_null

  :it "pushes a new byte onto the end of the buffer"
    assert: Bytes.new.push('o').push('k') == b"ok"

  :it "yields each byte in the buffer, along with the index"
    bytes Array(U8) = []
    indices Array(USize) = []
    b"hello".each_with_index -> (byte, index |
      bytes << byte
      indices << index
    )
    assert: bytes == ['h', 'e', 'l', 'l', 'o']
    assert: indices == [0, 1, 2, 3, 4]

  :it "yields each byte in the buffer in reverse, along with the index"
    bytes Array(U8) = []
    indices Array(USize) = []
    b"hello".reverse_each_with_index -> (byte, index |
      bytes << byte
      indices << index
    )
    assert: bytes == ['o', 'l', 'l', 'e', 'h']
    assert: indices == [4, 3, 2, 1, 0]

  :it "won't violate memory safety when the buffer is mutated during iteration"
    seen Array(U8) = []
    bytes Bytes'ref = b"123".clone
    bytes.each_with_index -> (byte, index |
      bytes.clear
      seen << byte
    )
    assert: seen == ['1']

    seen.clear
    bytes = b"123".clone
    bytes.reverse_each_with_index -> (byte, index |
      bytes.clear
      seen << byte
    )
    assert: seen == ['3']

  :it "copies bytes from the given buffer onto the end of the byte string"
    assert: (Bytes.new << b"foo" << b"" << b"bar") == b"foobar"

  :it "creates a multiplicit copy of the bytes sequence"
    assert: (b"Hey" * 3) == b"HeyHeyHey"
    assert: (b"Hey" * 1) == b"Hey"
    assert: (b"Hey" * 0) == b""

  :it "splits the byte string at every occurrence of the given byte value"
    assert: b"foo.bar.baz".split('.') == [b"foo", b"bar", b"baz"]

  :it "lexically compares the buffer with another buffer of the same length"
    assert: b"examplE" < b"example"
    assert: b"example" > b"examplE"
    assert: (b"example" < b"examplE").is_false
    assert: (b"examplE" > b"example").is_false
    assert: b"examplE" <= b"example"
    assert: b"example" >= b"examplE"
    assert: (b"example" <= b"examplE").is_false
    assert: (b"examplE" >= b"example").is_false

  :it "lexically compares the buffer with an identical buffer"
    assert: (b"example" < b"example").is_false
    assert: (b"example" > b"example").is_false
    assert: b"example" <= b"example"
    assert: b"example" >= b"example"

  :it "lexically compares with a nearly identical buffer of different length"
    assert: b"example" < b"example!"
    assert: b"example!" > b"example"
    assert: (b"example!" < b"example").is_false
    assert: (b"example" > b"example!").is_false
    assert: b"example" <= b"example!"
    assert: b"example!" >= b"example"
    assert: (b"example!" <= b"example").is_false
    assert: (b"example" >= b"example!").is_false

  :it "pushes, reads, and writes native integer types at specific offsets"
    data = Bytes.new

    // Push some values onto the end of the buffer.
    data.push(0xfe)
    data.push_native_u32(0x12345678)
    data.push_native_u64(0xfedcba9876543210)
    assert: data.size == 13

    // Read the values from the appropriate offsets.
    assert: data[0]! == 0xfe
    assert: data.read_native_u32!(1) == 0x12345678
    assert: data.read_native_u64!(5) == 0xfedcba9876543210

    // Reading from an offset too close to the end will raise an error.
    assert error: data.read_native_u32!(10)
    assert error: data.read_native_u64!(6)

    // Now write the values into different offsets (and read them back).
    assert no_error: data.write_native_u64!(1, 0xfedcba9876543210)
    assert no_error: data.write_native_u32!(9, 0x12345678)
    assert: data.size == 13
    assert: data[0]! == 0xfe
    assert: data.read_native_u64!(1) == 0xfedcba9876543210
    assert: data.read_native_u32!(9) == 0x12345678

    // Trying to write to a space beyond the buffer size will raise an error.
    assert error: data.write_native_u32!(10, 0x12345678)
    assert error: data.write_native_u64!(6, 0xfedcba9876543210)

  :it "reads integers in native, big and little endianness at specific offsets"
    data = Bytes.from_array([0x01, 0x23, 0x45, 0x67, 0x89, 0xab, 0xcd, 0xef, 0x01])

    assert: data.read_native_u16!(0) == 0x2301
    assert: data.read_native_u16!(1) == 0x4523
    assert: data.read_native_u32!(0) == 0x67452301
    assert: data.read_native_u32!(1) == 0x89674523
    assert: data.read_native_u64!(0) == 0xefcdab8967452301
    assert: data.read_native_u64!(1) == 0x01efcdab89674523

    assert: data.read_le_u16!(0) == 0x2301
    assert: data.read_le_u16!(1) == 0x4523
    assert: data.read_le_u32!(0) == 0x67452301
    assert: data.read_le_u32!(1) == 0x89674523
    assert: data.read_le_u64!(0) == 0xefcdab8967452301
    assert: data.read_le_u64!(1) == 0x01efcdab89674523

    assert: data.read_be_u16!(0) == 0x0123
    assert: data.read_be_u16!(1) == 0x2345
    assert: data.read_be_u32!(0) == 0x01234567
    assert: data.read_be_u32!(1) == 0x23456789
    assert: data.read_be_u64!(0) == 0x0123456789abcdef
    assert: data.read_be_u64!(1) == 0x23456789abcdef01

  :it "joins an array of bytes"
    assert: Bytes.join([
      b"foo"
      b"bar"
    ]) == b"foobar"

    assert: Bytes.join([
      b"foo"
      b"bar"
    ], b" ") == b"foo bar"
