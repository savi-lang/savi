:class Savi.Integer.Format.Spec
  :is Spec
  :const describes: "Integer.Format"

  :it "prints the decimal digits of an integer value into a string"
    assert: "\(0)" == "0"
    assert: "\(36)" == "36"
    assert: "\(-36)" == "-36"
    assert: "\(9999)" == "9999"
    assert: "\(-9999)" == "-9999"

  :it "never under-estimates the amount of space to emit a U64 into a string"
    value = U64.max_value
    while (value > 0) (
      value = value.bit_shr(1)
      assert: value.into_string_space >= "\(value)".size
    )
    assert: U64[0].into_string_space == 1

  :it "can format integers in a standard hexadecimal representation"
    assert: "\(False.format.hex)" == "0x0"
    assert: "\(True.format.hex)"  == "0x1"
    assert: "\(U8[0].format.hex)" == "0x00"
    assert: "\(0.format.hex)"     == "0x00000000"
    assert: "\(36.format.hex)"    == "0x00000024"
    assert: "\((-36).format.hex)" == "0xffffffdc"
    assert: "\(U64[0x123456789abcdef0].format.hex)" == "0x123456789abcdef0"

  :it "can format integers in an uppercase hexadecimal representation"
    assert: "\(36.format.hex.uppercase)"    == "0x00000024"
    assert: "\((-36).format.hex.uppercase)" == "0xFFFFFFDC"

  :it "can format integers in hexadecimal without leading zeros"
    assert: "\(0.format.hex.without_leading_zeros)"     == "0x0"
    assert: "\(36.format.hex.without_leading_zeros)"    == "0x24"
    assert: "\((-36).format.hex.without_leading_zeros)" == "0xffffffdc"
    assert: "\(1025.format.hex.without_leading_zeros)"  == "0x401"

  :it "can format integers in a standard binary representation"
    assert: "\(False.format.bin)" == "0b0"
    assert: "\(True.format.bin)"  == "0b1"
    assert: "\(U8[0].format.bin)" == "0b00000000"
    assert: "\(I16[36].format.bin)" == "0b0000000000100100"
    assert: "\(I16[-36].format.bin)" == "0b1111111111011100"

  :it "can format integers in a binary without leading zeros"
    assert: "\(False.format.bin.without_leading_zeros)" == "0b0"
    assert: "\(True.format.bin.without_leading_zeros)"  == "0b1"
    assert: "\(U8[0].format.bin.without_leading_zeros)" == "0b0"
    assert: "\(I16[36].format.bin.without_leading_zeros)" == "0b100100"
    assert: "\(I16[-36].format.bin.without_leading_zeros)" == "0b1111111111011100"

  :it "can format integers as Unicode codepoints"
    assert: "\('S'.format.unicode)" == "S"
    assert: "\(U8[83].format.unicode)" == "S"
    assert: "\(U32[0x2665].format.unicode)" == "â™¥"
    assert: "\(U32[0x2665].format.unicode)" == "\U2665"
