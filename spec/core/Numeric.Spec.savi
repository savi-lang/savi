:class Savi.Numeric.Spec
  :is Spec
  :const describes: "Numeric"

  :it "exhibits wraparound behaviour for underflowing numeric literals"
    assert: U8[-1]                    == 0xff
    assert: U16[-1]                   == 0xffff
    assert: U32[-1]                   == 0xffff_ffff
    assert: U64[-1]                   == 0xffff_ffff_ffff_ffff
    assert: U128[-1]                  == 0xffff_ffff_ffff_ffff_ffff_ffff_ffff_ffff
    assert: I8[-128]                  == 128
    assert: I16[-32768]               == 32768
    assert: I32[-2147483648]          == 2147483648
    assert: I64[-9223372036854775808] == 9223372036854775808
    assert: I128[-170141183460469231731687303715884105728] == 170141183460469231731687303715884105728

    if Platform.has_64bit_size (
      assert: USize[-1]                   == 0xffff_ffff_ffff_ffff
      assert: ISize[-9223372036854775808] == 9223372036854775808
    |
      assert: USize[-1]          == 0xffff_ffff
      assert: ISize[-2147483648] == 2147483648
    )

  :it "checks identity equality of integers by value"
    assert: U32[12] === U32[12]
    assert: I32[12] === I32[12]
    assert: (U32[12] === U32[36]).is_false
    assert: (I32[12] === I32[36]).is_false
    assert: (U32[12] !== U32[12]).is_false
    assert: (I32[12] !== I32[12]).is_false
    assert: U32[12] !== U32[36]
    assert: I32[12] !== I32[36]

  :it "checks identity equality of floating point values by their bits"
    assert: F32[12] === F32[12]
    assert: F64[12] === F64[12]
    assert: (F32[12] === F32[36]).is_false
    assert: (F64[12] === F64[36]).is_false
    assert: (F32[12] !== F32[12]).is_false
    assert: (F64[12] !== F64[12]).is_false
    assert: F32[12] !== F32[36]
    assert: F64[12] !== F64[36]
    assert: F32.nan === F32.nan // NaN values are comparable by their bits
    assert: F64.nan === F64.nan // NaN values are comparable by their bits
    assert: F32.nan !== F32[36]
    assert: F64.nan !== F64[36]

  :it "hashes the value of the integer"
    assert: U64[24].hash   == 11168194413345819337 // TODO: fix this test for 32-bit platforms
    assert: U64[24].hash64 == 11168194413345819337

  :it "knows the bits underlying a floating-point number"
    assert: F32[3.6].bits == 0x4066_6666
    assert: F64[3.6].bits == 0x400c_cccc_cccc_cccd
    assert: F32.from_bits(0x4066_6666)           == 3.6
    assert: F64.from_bits(0x400c_cccc_cccc_cccd) == 3.6

  :it "knows the bit widths used in the representation of integer values"
    assert: I32 .mag_bit_width == 31
    assert: U32 .mag_bit_width == 32
    assert: I64 .mag_bit_width == 63
    assert: U64 .mag_bit_width == 64
    assert: I128.mag_bit_width == 127
    assert: U128.mag_bit_width == 128


  :it "knows the bit widths used in the representation of floating-point values"
    // We have significand bits, exponent bits, and 1 sign bit.
    assert: F32.sig_bit_width + F32.exp_bit_width + 1 == F32.bit_width
    assert: F64.sig_bit_width + F64.exp_bit_width + 1 == F64.bit_width
