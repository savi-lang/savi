:module _Err
  :fun non not_really!: None
  :fun non now!: @inner!
  :fun non inner!: error!
  :fun non now_with_value_u64!: error! 99
    :errors U64
  :fun non now_with_value_string!: error! "whoops!"
  :fun non now_with_value_struct!: @inner_with_value_struct!
  :fun non inner_with_value_struct!: error! _MyError.new(99, "whoops!")
  :fun non maybe_with_value_struct_or_none!(should_struct Bool)
    if should_struct (error! _MyError.new(100, "whoa") | error!)

:struct _MyError
  :let code U64
  :let message String
  :new (@code, @message)
  :fun inspect_into(output String'ref) None
    Inspect.into(output, @code)
    output << ": "
    output << @message

:module TrySpec
  :fun run(test MicroTest)
    zero = U64[0]

    test["try error; with error"].pass = U64[33] == (
      try (error! | 33)
    )

    // This test just proves that codegen doesn't choke on unreachable code.
    test["try error!; unreachable code after error"].pass = U64[33] == (
      try (error!, totally = "unreachable" | 33)
    )

    test["try: try error else error; with error"].pass = U64[33] == (
      try (try (error! | error!) | 33)
    )

    test["try: if error; without error"].pass = U64[33] == (
      try (
        if zero > 1 (error! | 33)
      |
        11
      )
    )

    test["try: if error; with error"].pass = U64[33] == (
      try (
        if zero < 1 (error! | 11)
      |
        33
      )
    )

    test["try: if else error; without error"].pass = U64[33] == (
      try (
        if zero < 1 (33 | error!)
      |
        11
      )
    )

    test["try: if else error; with error"].pass = U64[33] == (
      try (
        if zero > 1 (11 | error!)
      |
        33
      )
    )

    test["try: if error else error; with error"].pass = U64[33] == (
      try (
        if zero < 1 (error! | error!)
      |
        33
      )
    )

    test["try: while error; without error"].pass = U64[33] == (
      try (
        while zero > 1 (error! | 33)
      |
        11
      )
    )

    test["try: while error; with error"].pass = U64[33] == (
      try (
        while zero < 1 (error! | 11)
      |
        33
      )
    )

    test["try: while else error; without error"].pass = U64[33] == (
      try (
        while zero < 1 (zero = zero + 1, 33 | error!)
      |
        11
      )
    )

    test["try: while else error; with error"].pass = U64[33] == (
      try (
        while zero > 1 (11 | error!)
      |
        33
      )
    )

    test["try: while error else error; with error"].pass = U64[33] == (
      try (
        while zero < 1 (error! | error!)
      |
        33
      )
    )

    test["try call; with error"].pass = U64[33] == (
      try (_Err.now!, 11 | 33)
    )

    test["try call; without error"].pass = U64[33] == (
      try (_Err.not_really!, 33 | 11)
    )

    // test["try; with error value (numeric)"].pass = "98" == (
    //   try (
    //     error! 98
    //     "success"
    //   | err U64 |
    //     Inspect[err]
    //   )
    // )

    // test["try; with error value (class)"].pass = "whoopsie" == (
    //   try (
    //     error! "whoopsie"
    //     "success"
    //   | err |
    //     err
    //   )
    // )

    // test["try; with error value (struct)"].pass = "98: whoopsie" == (
    //   try (
    //     error! _MyError.new(98, "whoopsie")
    //     "success"
    //   | err |
    //     Inspect[err]
    //   )
    // )

    // test["try; with error value (struct or none)"].pass = "98: whoopsie" == (
    //   try (
    //     if False error!
    //     error! _MyError.new(98, "whoopsie")
    //     "success"
    //   | err |
    //     Inspect[err]
    //   )
    // )

    // test["try; with error value (none or struct)"].pass = "None" == (
    //   try (
    //     if True error!
    //     error! _MyError.new(98, "whoopsie")
    //     "success"
    //   | err |
    //     Inspect[err]
    //   )
    // )

    // test["try call; with error value (numeric)"].pass = "99" == (
    //   try (
    //     _Err.now_with_value_u64!
    //     "success"
    //   | err U64 |
    //     Inspect[err]
    //   )
    // )

    // test["try call; with error value (class)"].pass = "whoops!" == (
    //   try (
    //     _Err.now_with_value_string!
    //     "success"
    //   | err |
    //     err
    //   )
    // )

    // test["try call; with error value (struct)"].pass = "99: whoops!" == (
    //   try (
    //     _Err.now_with_value_struct!
    //     "success"
    //   | err |
    //     Inspect[err]
    //   )
    // )

    // test["try call; with error value (none or struct)"].pass = "None" == (
    //   try (
    //     _Err.maybe_with_value_struct_or_none!(False)
    //     "success"
    //   | err |
    //     Inspect[err]
    //   )
    // )

    // test["try call; with error value (struct or none)"].pass = "100: whoa" == (
    //   try (
    //     _Err.maybe_with_value_struct_or_none!(True)
    //     "success"
    //   | err |
    //     Inspect[err]
    //   )
    // )
