:import "spec"

:class MapReadableSpec
  :is Spec
  :const describes: "MapReadable"

  :fun new_mutable_map: Map(String, U64).new

  :: Create a mutable map, yield it to the caller for initialization,
  :: then return it as read-only using the MapReadable trait as the type.
  :: This ensures that we are testing based only on the trait's methods,
  :: while still giving us a temporary time of mutability to initialize it.
  :fun build_map MapReadable(String, U64)
    map = @new_mutable_map
    yield map
    map

  :it "yields each key and each value (separately)"
    map = @build_map -> (map |
      map["foo"] = 11
      map["bar"] = 22
      map["baz"] = 33
    )

    copy = @new_mutable_map
    map.each_key -> (key | try (copy[key] = map[key]!))

    assert: copy.size == 3
    assert: copy["foo"]! == 11
    assert: copy["bar"]! == 22
    assert: copy["baz"]! == 33

    total_value = U64[0]
    map.each_value -> (value | total_value += value)
    assert: total_value == 66

  :it "yields each key and each value (separately) until the criteria is met"
    map = @build_map -> (map |
      map["foo"] = 11
      map["bar"] = 22
      map["baz"] = 33
    )

    this_key = ""
    found_it = map.each_key_until -> (key | this_key = key, key.ends_with("o"))
    assert: found_it
    assert: this_key == "foo"

    this_key = ""
    found_it = map.each_key_until -> (key | this_key = key, key.ends_with("z"))
    assert: found_it
    assert: this_key == "baz"

    this_key = ""
    found_it = map.each_key_until -> (key | this_key = key, key.ends_with("x"))
    assert: found_it.is_false

  :it "checks if any pair in the map meets the given condition"
    map = @build_map -> (map |
      map["foo"] = 11
      map["bar"] = 22
      map["baz"] = 33
    )

    assert: map.has_any -> (key, value | key == "foo")
    assert: map.has_any -> (key, value | key == "food").is_false
    assert: map.has_any -> (key, value | value == 22)
    assert: map.has_any -> (key, value | value == 23).is_false

  :it "checks if all pairs in the map meet the given condition"
    map = @build_map -> (map |
      map["foo"] = 11
      map["bar"] = 22
      map["baz"] = 33
    )

    assert: map.has_all -> (key, value | key.size == 3)
    assert: map.has_all -> (key, value | key.starts_with("ba")).is_false
    assert: map.has_all -> (key, value | value < 50)
    assert: map.has_all -> (key, value | value < 30).is_false
