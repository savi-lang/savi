:class HTTPServer.RequestReader.Spec
  :is Spec
  :const describes: "HTTPServer.RequestReader"

  :it "parses the head of an HTTP request"
    assert: @example(["GET * HTTP/1.1\r\n\r\n"]) -> (req |
      assert: req.method == "GET"
      assert: req.uri_string == "*"
      assert: req.content_length == 0
      assert: req.transfer_encoding == HTTPServer.Request.TransferEncoding.Identity
      assert: req.connection_header == HTTPServer.Request.ConnectionHeader.KeepAlive
    )

    assert: @example([
      "POST /api/v1/entities HTTP/1.1\r\n"
      "cOnNeCtIoN: cLoSe\r\n"
      "CoNtEnT-lEnGtH: 123\r\n"
      "\r\n"
    ]) -> (req |
      assert: req.method == "POST"
      assert: req.uri_string == "/api/v1/entities"
      assert: req.content_length == 123
      assert: req.transfer_encoding == HTTPServer.Request.TransferEncoding.Identity
      assert: req.connection_header == HTTPServer.Request.ConnectionHeader.Close
    )

    assert: @example([
      "POST /api/v1/upload HTTP/1.1\r\n"
      "TrAnSfEr-EnCoDiNg: ChUnKeD\r\n"
      "\r\n"
    ]) -> (req |
      assert: req.method == "POST"
      assert: req.uri_string == "/api/v1/upload"
      assert: req.content_length == 0
      assert: req.transfer_encoding == HTTPServer.Request.TransferEncoding.Chunked
      assert: req.connection_header == HTTPServer.Request.ConnectionHeader.KeepAlive
    )

  :it "complains when the request has an unsupported method"
    assert: @example_error(
      ["GIMME * HTTP/1.1\r\n\r\n"]
      HTTPServer.Request.Error.UnsupportedMethod
    )

  :it "complains when the request has a URI that is too long"
    uri_too_long = "_" * 8193 // just a whole lotta underscores
    assert: @example_error(
      ["GET ", uri_too_long, " HTTP/1.1\r\n\r\n"]
      HTTPServer.Request.Error.URITooLong
    )

  :it "complains when the request has an unsupported HTTP version"
    assert: @example_error(
      ["GET * HTTP/9.9\r\n\r\n"]
      HTTPServer.Request.Error.UnsupportedVersion
    )

  :it "complains when the request has an unsupported Transfer-Encoding header"
    assert: @example_error(
      ["GET * HTTP/1.1\r\nTransfer-Encoding: bogus\r\n\r\n"]
      HTTPServer.Request.Error.UnsupportedTransferEncoding
    )

  :it "complains when the request has an unsupported Connection header"
    assert: @example_error(
      ["GET * HTTP/1.1\r\nConnection: bogus\r\n\r\n"]
      HTTPServer.Request.Error.UnsupportedConnectionHeader
    )

  :: Parse the given source_chunks into a request and yield it to the caller.
  :: Returns True if everything went smoothly.
  :: Returns False and prints a message if something unexpected happened.
  :fun example(source_chunks Array(String)) Bool
    :yields HTTPServer.Request
    reader = HTTPServer.RequestReader.new
    stream = ByteStream.Reader.new
    write_stream = TestByteStream.Source.new(stream)

    // Feed the data one byte at a time into the stream, which will
    // maximally test for parsing state problems at chunk boundaries.
    // Obviously this would be a bad choice in a real application,
    // but here we want to test the most pathological possible case.
    finished_too_soon = False
    saw_error = HTTPServer.Request.Error.None
    source_chunks.each -> (source_chunk |
      source_chunk.each_byte -> (byte |
        if finished_too_soon.not (
          try (
            reader.read!(stream)
            finished_too_soon = True // we don't expect to finish so soon here
          |
            // Check to see if there is an error present.
            // If so, store it and mark as having finished too soon.
            if (reader.last_error != HTTPServer.Request.Error.None) (
              saw_error = reader.last_error
              finished_too_soon = True
            )
          )
          write_stream << Bytes.from_array([byte])
        )
      )
    )

    if finished_too_soon (
      // If we finished too soon, there was either an error to show,
      // or the parser failed to consume all of the chunks before finishing.
      @env.err.write("\nexpected "), @env.err.write(Inspect[source_chunks])
      if (saw_error == HTTPServer.Request.Error.None) (
        @env.err.print(" to parse fully, but it finished too soon")
      |
        @env.err.write(" to not have an error, but it had error: ")
        @env.err.print(Inspect[saw_error])
      )
      False
    |
      // Now the stream has all the bytes and we expect it to actually work.
      try (
        yield reader.read!(stream)
        True
      |
        @env.err.write("\nexpected "), @env.err.write(Inspect[source_chunks])
        @env.err.print(" to parse, but it failed to parse")
        False
      )
    )

  :: Parse the given source_chunks into a request, expecting the given error.
  :: Returns True if the given error was indeed produced by the RequestReader.
  :: Returns False and prints a message if something unexpected happened.
  :fun example_error(
    source_chunks Array(String)
    expected_error HTTPServer.Request.Error
  ) Bool
    reader = HTTPServer.RequestReader.new
    stream = ByteStream.Reader.new
    write_stream = TestByteStream.Source.new(stream)

    // Feed the data one byte at a time into the stream, which will
    // maximally test for parsing state problems at chunk boundaries.
    // Obviously this would be a bad choice in a real application,
    // but here we want to test the most pathological possible case.
    finished_too_soon = False
    saw_error = HTTPServer.Request.Error.None
    source_chunks.each -> (source_chunk |
      source_chunk.each_byte -> (byte |
        if finished_too_soon.not (
          try (
            reader.read!(stream)
            finished_too_soon = True // we don't expect to finish so soon here
          |
            // Check to see if there is an error present.
            // If so, store it and mark as having finished too soon.
            if (reader.last_error != HTTPServer.Request.Error.None) (
              saw_error = reader.last_error
              finished_too_soon = True
            )
          )
          write_stream << Bytes.from_array([byte])
        )
      )
    )

    if finished_too_soon (
      // If we finished too soon, there was either an error to show,
      // or the parser failed to consume all of the chunks before finishing.
      case saw_error == (
      | HTTPServer.Request.Error.None |
        @env.err.write("\nexpected "), @env.err.write(Inspect[source_chunks])
        @env.err.print(" to parse fully, but it finished too soon")
        False
      | expected_error |
        True
      |
        @env.err.write("\nexpected "), @env.err.write(Inspect[source_chunks])
        @env.err.write(" to have specific error: ")
        @env.err.write(Inspect[expected_error])
        @env.err.write(" but it actually had error: ")
        @env.err.print(Inspect[saw_error])
        False
      )
    |
      @env.err.write("\nexpected "), @env.err.write(Inspect[source_chunks])
      @env.err.print(" to have an error, but it finished successfully")
      False
    )

// This is a utility class used here in testing as a way to get chunks
// inserted into the byte stream of a ByteStream.Reader, one chunk at a time.
// TODO: Is there a better way to share this across different packages' tests?
:class TestByteStream.Source
  // On creation, accept a ByteStream.Reader to target.
  :let _target_read_stream ByteStream.Reader
  :new (@_target_read_stream)

  // When a new chunk is accepted, add it to the list we hold and invoke
  // the target's receive_from! method, using us as the source, indirectly
  // invoking the emit_bytes_into! method back here in our own class.
  :let _chunks: Array(Bytes).new
  :fun ref "<<"(chunk Bytes)
    @_chunks << chunk
    try @_target_read_stream.receive_from!(@)
    @

  // We are a source of bytes, able to push all available bytes into the buffer.
  :is ByteStream.Source
  :fun ref emit_bytes_into!(buffer Bytes'ref, offset USize)
    orig_size = buffer.size
    @_chunks.each -> (chunk | chunk.each -> (byte | buffer.push(byte)))
    @_chunks.clear
    buffer.size - orig_size
