:class Savi.Bytes.Spec
  :is Spec
  :const describes: "Bytes"

  :it "starts with zero space and a null pointer by default"
    data = Bytes.new
    assert: data.space == 0
    assert: data.size == 0
    assert: data.cpointer.is_null

  :it "allocates the next highest power of two containing the requested space"
    data = Bytes.new(12)
    assert: data.space == 16
    assert: data.size == 0
    assert: data.cpointer.is_not_null

    data = Bytes.new(16)
    assert: data.space == 16
    assert: data.size == 0
    assert: data.cpointer.is_not_null

    data = Bytes.new(17)
    assert: data.space == 32
    assert: data.size == 0
    assert: data.cpointer.is_not_null

  :it "won't reallocate when reserving space within the current allocation"
    data = Bytes.new(12)
    orig_pointer_address = data.cpointer.usize

    data.reserve(16)
    assert: data.space == 16
    assert: data.size == 0
    assert: data.cpointer.is_not_null
    assert: data.cpointer.usize == orig_pointer_address

    data.reserve(0)
    assert: data.space == 16
    assert: data.size == 0
    assert: data.cpointer.is_not_null
    assert: data.cpointer.usize == orig_pointer_address

  :it "will reallocate when reserving space beyond the current allocation"
    data = Bytes.new(12)
    orig_pointer_address = data.cpointer.usize

    // Go to a much larger size in a different allocator pool,
    // to ensure that we actually get a new pointer address.
    data.reserve(2040)

    assert: data.space == 2048
    assert: data.size == 0
    assert: data.cpointer.is_not_null
    assert: data.cpointer.usize != orig_pointer_address

  :it "can expand size to expose uninitialized bytes within the space available"
    data = Bytes.new(12)
    assert: data.space == 16
    assert: data.size == 0

    // We are allowed to expand the size.
    data.resize_possibly_including_uninitialized_memory(10)
    assert: data.space == 16
    assert: data.size == 10

    // Contracting to a smaller size is okay too!
    data.resize_possibly_including_uninitialized_memory(8)
    assert: data.space == 16
    assert: data.size == 8

    // We aren't allowed to expand beyond the space available.
    data.resize_possibly_including_uninitialized_memory(100)
    assert: data.space == 16
    assert: data.size == 16

  :it "converts to and from an array of bytes"
    assert: b"string".as_array == ['s', 't', 'r', 'i', 'n', 'g']
    assert: Bytes.from_array(b"string".as_array) == b"string"

  :it "converts to and from a string"
    assert: b"string".as_string == "string"
    assert: Bytes.from_string("string") == b"string"

  :it "compares bytewise equality with another bytes string"
    assert: (b"string" == b"string")
    assert: (b"string" == b"other").is_false

  :it "checks if it starts with a substring equal to the other bytes string"
    assert: b"foo".starts_with(b"foo")
    assert: b"foo".starts_with(b"food").is_false
    assert: b"food".starts_with(b"foo")
    assert: b"barfood".starts_with(b"foo").is_false
    assert: b"barfood".starts_with(b"barf")
    assert: b"barfood".starts_with(b"")

  :it "checks if it ends with a substring equal to the other bytes string"
    assert: b"food".ends_with(b"foo").is_false
    assert: b"foo".ends_with(b"foo")
    assert: b"foo".ends_with(b"food").is_false
    assert: b"snafoo".ends_with(b"foo")
    assert: b"snafoozled".ends_with(b"foo").is_false
    assert: b"snafoozled".ends_with(b"")

  :it "checks for a common slice with another bytes string at specific offsets"
    assert: b"foodbar".is_slice_equal(1, b"broodbard", 2, 6)
    assert: b"foodbar".is_slice_equal(1, b"broodbard", 2, 5)
    assert: b"foodbar".is_slice_equal(2, b"broodbard", 2, 5).is_false
    assert: b"foodbar".is_slice_equal(1, b"broodbard", 2, 7).is_false
    assert: b"foodbar".is_slice_equal(1, b"broodbard", 1, 6).is_false
    assert: b"foodbar".is_slice_equal(0, b"broodbard", 1, 6).is_false
    assert: b"broodbard".is_slice_equal(2, b"foodbar", 1, 6)
    assert: b"broodbard".is_slice_equal(2, b"foodbar", 1, 5)
    assert: b"broodbard".is_slice_equal(2, b"foodbar", 2, 5).is_false
    assert: b"broodbard".is_slice_equal(2, b"foodbar", 1, 7).is_false
    assert: b"broodbard".is_slice_equal(1, b"foodbar", 1, 6).is_false
    assert: b"broodbard".is_slice_equal(1, b"foodbar", 0, 6).is_false

  :it "checks for a common slice with another string at specific offsets"
    assert: b"foodbar".is_slice_equal(1, "broodbard", 2, 6)
    assert: b"foodbar".is_slice_equal(1, "broodbard", 2, 5)
    assert: b"foodbar".is_slice_equal(2, "broodbard", 2, 5).is_false
    assert: b"foodbar".is_slice_equal(1, "broodbard", 2, 7).is_false
    assert: b"foodbar".is_slice_equal(1, "broodbard", 1, 6).is_false
    assert: b"foodbar".is_slice_equal(0, "broodbard", 1, 6).is_false
    assert: b"broodbard".is_slice_equal(2, "foodbar", 1, 6)
    assert: b"broodbard".is_slice_equal(2, "foodbar", 1, 5)
    assert: b"broodbard".is_slice_equal(2, "foodbar", 2, 5).is_false
    assert: b"broodbard".is_slice_equal(2, "foodbar", 1, 7).is_false
    assert: b"broodbard".is_slice_equal(1, "foodbar", 1, 6).is_false
    assert: b"broodbard".is_slice_equal(1, "foodbar", 0, 6).is_false

  :it "checks if it is empty or not"
    assert: b"".is_empty
    assert: b"".is_not_empty.is_false
    assert: b"example".is_empty.is_false
    assert: b"example".is_not_empty
    assert: Bytes.new.is_empty
    assert: Bytes.new.is_not_empty.is_false
    assert: (Bytes.new << b"example").is_empty.is_false
    assert: (Bytes.new << b"example").is_not_empty
    assert: (Bytes.new << b"example").clear.is_empty
    assert: (Bytes.new << b"example").clear.is_not_empty.is_false

  :it "clones itself into a new bytes buffer"
    string Bytes = b"example"
    assert: string.clone == b"example"

  :it "finds the index of another substring within it"
    assert: b"bar food foo".offset_of!(b"foo") == 4
    assert error: b"bar food foo".offset_of!(b"bard")
    assert error: b"bar food foo".offset_of!(b"nope")
    assert error: b"bar food foo".offset_of!(b"")
    assert: b"bar food foo".includes(b"foo")
    assert: b"bar food foo".includes(b"bard").is_false
    assert: b"bar food foo".includes(b"nope").is_false
    assert: b"bar food foo".includes(b"").is_false

  :it "hashes the bytes of the buffer"
    assert: (b"string".hash == 0x4CF51F4A5B5CF110)

  :it "returns the byte at the given byte offset"
    assert: b"example"[3]! == 'm'
    assert error: b"example"[7]!

  :it "trims bytes off the start and end of the byte string"
    assert: b"example".trim(2)      == b"ample"
    assert: b"example".trim(3,  -2) == b"mp"
    assert: b"example".trim(7)      == b""
    assert: b"example".trim(5,   4) == b""
    assert: b"example".trim(-5, -2) == b"amp"
    assert: b"example".trim(-5,  5) == b"amp"

  :it "trims a mutable byte string in place with the same semantics"
    assert: b"example".clone.trim_in_place(2)      == b"ample"
    assert: b"example".clone.trim_in_place(3,  -2) == b"mp"
    assert: b"example".clone.trim_in_place(7)      == b""
    assert: b"example".clone.trim_in_place(5,   4) == b""
    assert: b"example".clone.trim_in_place(-5, -2) == b"amp"
    assert: b"example".clone.trim_in_place(-5,  5) == b"amp"

  :it "truncates from the left or right"
    assert: b"example".clone.truncate(5)        == b"examp"
    assert: b"example".clone.truncate_left(2)   == b"ample"
    assert: b"example".clone.truncate(0)        == b""
    assert: b"example".clone.truncate_left(0)   == b"example"
    assert: b"example".clone.truncate(7)        == b"example"
    assert: b"example".clone.truncate_left(7)   == b""
    assert: b"example".clone.truncate(100)      == b"example"
    assert: b"example".clone.truncate_left(100) == b""

  :it "chops off the left or right"
    center Bytes'ref = b"example".clone
    original_padding = center.space - center.size
    left ref = center.chop_left(2)
    right ref = center.chop_right(3)

    assert: left == b"ex"
    assert: center == b"amp"
    assert: right == b"le"

    // The three buffers are adjacent in memory.
    assert: left.cpointer(2).usize == center.cpointer.usize
    assert: center.cpointer(3).usize == right.cpointer.usize

    // The first two buffers have a space exactly the same as their size,
    // and the right buffer retains whatever space padding was in the original.
    assert: left.space == left.size
    assert: center.space == center.size
    assert: right.space == right.size + original_padding

    // Any of the three can have a byte appended without bleeding into the
    // adjacent memory of the other buffers, since under the hood, this
    // extension of either the left or center buffer forces reallocation of it.
    left.push('t'), center.push('s'), right.push('l')
    assert: left == b"ext"
    assert: center == b"amps"
    assert: right == b"lel"

    // After the pushes above, The buffers are no longer adjacent in memory,
    // checking with a pointer offset of both the original size and new size.
    assert: left.cpointer(2).usize != center.cpointer.usize
    assert: left.cpointer(3).usize != center.cpointer.usize
    assert: center.cpointer(3).usize != right.cpointer.usize
    assert: center.cpointer(4).usize != right.cpointer.usize

    // Also now the first two buffers have some padding in their space,
    // since they reserved more space when they were forced to reallocate.
    assert: left.space > left.size
    assert: center.space > center.size

    // Chopping with an out-of-bounds offset implicitly uses the full size.
    left_left ref = left.chop_left(100)
    assert: left_left == b"ext", assert: left == b""
    right_right ref = right.chop_right(100)
    assert: right_right == b"", assert: right == b"lel"

  :it "pushes a new byte onto the end of the buffer"
    assert: Bytes.new.push('o').push('k') == b"ok"

  :it "yields each byte in the buffer, along with the index"
    bytes Array(U8) = []
    indices Array(USize) = []
    b"hello".each_with_index -> (byte, index |
      bytes << byte
      indices << index
    )
    assert: bytes == ['h', 'e', 'l', 'l', 'o']
    assert: indices == [0, 1, 2, 3, 4]

  :it "yields each byte in the buffer in reverse, along with the index"
    bytes Array(U8) = []
    indices Array(USize) = []
    b"hello".reverse_each_with_index -> (byte, index |
      bytes << byte
      indices << index
    )
    assert: bytes == ['o', 'l', 'l', 'e', 'h']
    assert: indices == [4, 3, 2, 1, 0]

  :it "copies bytes from the given buffer onto the end of the byte string"
    assert: (Bytes.new << b"foo" << b"" << b"bar") == b"foobar"

  :it "creates a multiplicit copy of the bytes sequence"
    assert: (b"Hey" * 3) == b"HeyHeyHey"
    assert: (b"Hey" * 1) == b"Hey"
    assert: (b"Hey" * 0) == b""

  :it "splits the byte string at every occurrence of the given byte value"
    assert: b"foo.bar.baz".split('.') == [b"foo", b"bar", b"baz"]

  :it "lexically compares the buffer with another buffer of the same length"
    assert: b"examplE" < b"example"
    assert: b"example" > b"examplE"
    assert: (b"example" < b"examplE").is_false
    assert: (b"examplE" > b"example").is_false
    assert: b"examplE" <= b"example"
    assert: b"example" >= b"examplE"
    assert: (b"example" <= b"examplE").is_false
    assert: (b"examplE" >= b"example").is_false

  :it "lexically compares the buffer with an identical buffer"
    assert: (b"example" < b"example").is_false
    assert: (b"example" > b"example").is_false
    assert: b"example" <= b"example"
    assert: b"example" >= b"example"

  :it "lexically compares with a nearly identical buffer of different length"
    assert: b"example" < b"example!"
    assert: b"example!" > b"example"
    assert: (b"example!" < b"example").is_false
    assert: (b"example" > b"example!").is_false
    assert: b"example" <= b"example!"
    assert: b"example!" >= b"example"
    assert: (b"example!" <= b"example").is_false
    assert: (b"example" >= b"example!").is_false

  :it "pushes, reads, and writes native integer types at specific offsets"
    data = Bytes.new

    // Push some values onto the end of the buffer.
    data.push(0xfe)
    data.push_native_u32(0x12345678)
    data.push_native_u64(0xfedcba9876543210)
    assert: data.size == 13

    // Read the values from the appropriate offsets.
    assert: data[0]! == 0xfe
    assert: data.read_native_u32!(1) == 0x12345678
    assert: data.read_native_u64!(5) == 0xfedcba9876543210

    // Reading from an offset too close to the end will raise an error.
    assert error: data.read_native_u32!(10)
    assert error: data.read_native_u64!(6)

    // Now write the values into different offsets (and read them back).
    assert no_error: data.write_native_u64!(1, 0xfedcba9876543210)
    assert no_error: data.write_native_u32!(9, 0x12345678)
    assert: data.size == 13
    assert: data[0]! == 0xfe
    assert: data.read_native_u64!(1) == 0xfedcba9876543210
    assert: data.read_native_u32!(9) == 0x12345678

    // Trying to write to a space beyond the buffer size will raise an error.
    assert error: data.write_native_u32!(10, 0x12345678)
    assert error: data.write_native_u64!(6, 0xfedcba9876543210)

  :it "reads integers in native, big and little endianness at specific offsets"
    data = Bytes.from_array([0x01, 0x23, 0x45, 0x67, 0x89, 0xAB, 0xCD, 0xEF, 0x01])

    assert: data.read_native_u16!(0) == 0x2301
    assert: data.read_native_u16!(1) == 0x4523
    assert: data.read_native_u32!(0) == 0x67452301
    assert: data.read_native_u32!(1) == 0x89674523
    assert: data.read_native_u64!(0) == 0xEFCDAB8967452301
    assert: data.read_native_u64!(1) == 0x01EFCDAB89674523

    assert: data.read_le_u16!(0) == 0x2301
    assert: data.read_le_u16!(1) == 0x4523
    assert: data.read_le_u32!(0) == 0x67452301
    assert: data.read_le_u32!(1) == 0x89674523
    assert: data.read_le_u64!(0) == 0xEFCDAB8967452301
    assert: data.read_le_u64!(1) == 0x01EFCDAB89674523

    assert: data.read_be_u16!(0) == 0x0123
    assert: data.read_be_u16!(1) == 0x2345
    assert: data.read_be_u32!(0) == 0x01234567
    assert: data.read_be_u32!(1) == 0x23456789
    assert: data.read_be_u64!(0) == 0x0123456789ABCDEF
    assert: data.read_be_u64!(1) == 0x23456789ABCDEF01

  :it "joins an array of bytes"
    assert: Bytes.join([
      b"foo"
      b"bar"
    ]) == b"foobar"

    assert: Bytes.join([
      b"foo"
      b"bar"
    ], b" ") == b"foo bar"
