// A fake random implementation that always returns the same 64-bit value,
// so that the variety of different derived functions can be easily tested.
:class _FakeRandom64
  :is Random
  :fun ref u64 U64: 0x0123456789abcdef

// A fake random implementation that always returns the same 64-bit value,
// but overrides the 32-bit function to return a differently derived value,
// to test that smaller values will prefer deriving from the 32-bit value.
:class _FakeRandom6432
  :is Random
  :fun ref u64 U64: 0x0123456789abcdef
  :fun ref u32 U32: 0xf7e6d5c4

:class Random.Spec
  :is Spec
  :const describes: "Random"

  :it "derives other values from the high side of the 64-bit value"
    random = _FakeRandom64.new
    assert: random.u64 == 0x0123456789abcdef
    assert: random.u32 == 0x01234567
    assert: random.u16 == 0x0123
    assert: random.u8  == 0x01
    assert: random.i64 == 0x0123456789abcdef
    assert: random.i32 == 0x01234567
    assert: random.i16 == 0x0123
    assert: random.i8  == 0x01
    assert: random.f64 == F64.from_bits(0x0123456789abcdef)
    assert: random.f32 == F32.from_bits(0x01234567)
    assert: random.bool == False

  :it "derives smaller values from the high side of the 32-bit value if present"
    random = _FakeRandom6432.new
    assert: random.u64 == 0x0123456789abcdef
    assert: random.u32 == 0xf7e6d5c4
    assert: random.u16 == 0xf7e6
    assert: random.u8  == 0xf7
    assert: random.i64 == 0x0123456789abcdef
    assert: random.i32 == 0xf7e6d5c4
    assert: random.i16 == 0xf7e6
    assert: random.i8  == 0xf7
    assert: random.f64 == F64.from_bits(0x0123456789abcdef)
    assert: random.f32 == F32.from_bits(0xf7e6d5c4)
    assert: random.bool == True

  :it "generates 64-bit fractional values between 0 and 1, averaging around 0.5"
    random = DeterministicRandom.Xoroshiro128.new_128(1, 2)
    count USize = 0x1_0000
    total F64 = 0
    Count.to(count) -> (i | total += random.frac_64)
    assert: (total / count.f64) == 0.49999695846019471

  :it "generates 32-bit fractional values between 0 and 1, averaging around 0.5"
    random = DeterministicRandom.Xoroshiro128.new_128(1, 2)
    count USize = 0x1_0000
    total F32 = 0
    Count.to(count) -> (i | total += random.frac_32)
    assert: (total / count.f32) == 0.49999812245368958

  :it "generates U64s below a given limit 52, averaging around 25.5"
    random = DeterministicRandom.Xoroshiro128.new_128(1, 2)
    count USize = 0x10_0000
    total U64 = 0
    Count.to(count) -> (i | total += random.u64_less_than(52))
    assert: (total.f64 / count.f64) == 25.514418601989746

  :it "generates U32s below a given limit 52, averaging around 25.5"
    random = DeterministicRandom.Xoroshiro128.new_128(1, 2)
    count USize = 0x10_0000
    total U32 = 0
    Count.to(count) -> (i | total += random.u32_less_than(52))
    assert: (total.f32 / count.f32) == 25.514419555664062

  :it "generates unbiased U64s below a given limit 52, discarding bias"
    random = DeterministicRandom.Xoroshiro128.new_128(1, 2)
    count USize = 0x10_0000
    total U64 = 0
    Count.to(count) -> (i | total += random.unbiased_u64_less_than(52))
    assert: (total.f64 / count.f64) == 25.514418601989746

  :it "generates unbiased U32s below a given limit 52, discarding bias"
    random = DeterministicRandom.Xoroshiro128.new_128(1, 2)
    count USize = 0x10_0000
    total U32 = 0
    Count.to(count) -> (i | total += random.unbiased_u32_less_than(52))
    assert: (total.f32 / count.f32) == 25.514451980590820
