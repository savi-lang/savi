:class Time.Spec
  :is Spec
  :const describes: "Time"

  :it "can describe a date and time"
    time = Time.utc(2036, 10, 7, 20, 36, 10, 777)
    assert: time.year          == 2036
    assert: time.month         == 10
    assert: time.day           == 7
    assert: time.hour          == 20
    assert: time.minute        == 36
    assert: time.second        == 10
    assert: time.nanosecond    == 777
    assert: time.total_seconds == 64242621370

  :it "correctly describes the month and day on the first day of a month"
    time = Time.utc(2036, 11, 1)
    assert: time.year  == 2036
    assert: time.month == 11
    assert: time.day   == 1

  :it "can add or subtract other time durations"
    assert:
      (Time.utc(2036, 10, 7, 20, 36, 10, 777) - Time.days(3))
      == Time.utc(2036, 10, 4, 20, 36, 10, 777)
    assert:
      (Time.utc(2036, 10, 7, 20, 36, 10, 777) + Time.hours(7))
      == Time.utc(2036, 10, 8, 3, 36, 10, 777)

  :it "can be compared to other times"
    now = Time.utc(2036, 10, 7, 20, 36, 10, 777)
    soon = now + Time.nanoseconds(13)
    later = now + Time.hours(12)
    assert: now < later
    assert: now <= later
    assert: (now == later).is_false
    assert: (now >= later).is_false
    assert: (now > later).is_false
    assert: (later < now).is_false
    assert: (later <= now).is_false
    assert: (later == now).is_false
    assert: later >= now
    assert: later > now
    assert: (now < now).is_false
    assert: now <= now
    assert: now == now
    assert: now >= now
    assert: (now > now).is_false
    assert: now < soon
    assert: now <= soon
    assert: (now == soon).is_false
    assert: (now >= soon).is_false
    assert: (now > soon).is_false
    assert: (soon < now).is_false
    assert: (soon <= now).is_false
    assert: (soon == now).is_false
    assert: soon >= now
    assert: soon > now

  :it "can be inspected"
    // TODO: Properly pad numbers with zeros for a constant string width.
    assert:
      Inspect[Time.utc(2036, 10, 7, 20, 36, 10, 777)]
      == "2036-10-7 20:36:10'777"
