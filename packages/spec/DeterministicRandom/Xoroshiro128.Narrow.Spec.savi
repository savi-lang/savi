:class DeterministicRandom.Xoroshiro128.Narrow.Spec
  :is Spec
  :const describes: "DeterministicRandom.Xoroshiro128.Narrow"

  :it "generates deterministic 64-bit values, given a specific seed"
    random = DeterministicRandom.Xoroshiro128.Narrow.new_128(
      0x1b8cfae92bc829e2
      0x295883a20d7e72f3
    )
    assert: random.u64 == 0x44e57e8b39469cd5
    assert: random.u64 == 0x797ff9fafa4c014f
    assert: random.u64 == 0xfb925e05601d0870
    assert: random.u64 == 0xb463a47121a1a5d7
    assert: random.u64 == 0x4e6ff8dcd693a676
    assert: random.u64 == 0x44ab0e5cbc821597
    assert: random.u64 == 0x19d948f09796b555
    assert: random.u64 == 0x686a361bdc33dd39
    assert: random.u64 == 0x369276a2848d9fa4
    assert: random.u64 == 0x355b3d4aa6e54d1d
    assert: random.u64 == 0x55e909dcf23f89e6
    assert: random.u64 == 0xa4bff809572ab095
    assert: random.u64 == 0x6c24699a4578ebf8
    assert: random.u64 == 0xc55c6b51e98339af
    assert: random.u64 == 0x10a4a40b081c8b7f
    assert: random.u64 == 0xaf6b86593b10aead

  :it "can be re-seeded to cut over to another location in the state space"
    random = DeterministicRandom.Xoroshiro128.Narrow.new_128(1, 2)
    assert: random.u64 == 0x0000000000000003

    // Re-seed with the same seed that was used for the previous test,
    // and show that the same sequence of 16 values is produced.
    random.seed_128(
      0x1b8cfae92bc829e2
      0x295883a20d7e72f3
    )
    assert: random.u64 == 0x44e57e8b39469cd5
    assert: random.u64 == 0x797ff9fafa4c014f
    assert: random.u64 == 0xfb925e05601d0870
    assert: random.u64 == 0xb463a47121a1a5d7
    assert: random.u64 == 0x4e6ff8dcd693a676
    assert: random.u64 == 0x44ab0e5cbc821597
    assert: random.u64 == 0x19d948f09796b555
    assert: random.u64 == 0x686a361bdc33dd39
    assert: random.u64 == 0x369276a2848d9fa4
    assert: random.u64 == 0x355b3d4aa6e54d1d
    assert: random.u64 == 0x55e909dcf23f89e6
    assert: random.u64 == 0xa4bff809572ab095
    assert: random.u64 == 0x6c24699a4578ebf8
    assert: random.u64 == 0xc55c6b51e98339af
    assert: random.u64 == 0x10a4a40b081c8b7f
    assert: random.u64 == 0xaf6b86593b10aead

  :it "prevents the mistake of seeding with an all-zero seed"
    random = DeterministicRandom.Xoroshiro128.Narrow.new_128(0, 0)
    // Without special action to prevent, this would produce all zeros.
    assert: random.u64 == 0x509946a41cd733a3
    assert: random.u64 == 0xd805fcac6824536e
    assert: random.u64 == 0xdadc02f3e3cf7be3
