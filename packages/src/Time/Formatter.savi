:class Time.Formatter
  :const month_names Array(String)'val: [
    "January"
    "February"
    "March"
    "April"
    "May"
    "June"
    "July"
    "August"
    "September"
    "October"
    "November"
    "December"
  ]

  :const day_names Array(String)'val: [
    "Sunday"
    "Monday"
    "Tuesday"
    "Wednesday"
    "Thursday"
    "Friday"
    "Saturday"
  ]

  :let pattern String'box
  :new (@pattern)

  :fun format(time Time'box, out String'iso = String.new_iso)
    i USize = 0
    original_out_size = out.size
    is_bad_format = False

    while (i < @pattern.size()) (
      try (
        char U8 = @pattern.byte_at!(i)

        ok = True

        if (char == '%') (
          char = @pattern.byte_at!(i + 1)
          case (
          | char == 'a' | out = @short_day_name(time, --out)
          | char == 'A' | out = @day_name(time, --out)
          | (char == 'b') || (char == 'h') | out = @short_month_name(time, --out)
          | char == 'c' | out = @date_and_time(time, --out)
          | char == 'B' | out = @month_name(time, --out)
          | char == 'C' | out = @year_divided_by_100(time, --out)
          | char == 'd' | out = @day_of_month_zero_padded(time, --out)
          | (char == 'D') || (char == 'x') | out = @date(time, --out)
          | char == 'e' | out = @day_of_month_blank_padded(time, --out)
          | char == 'F' | out = @year_month_day(time, --out)
          | char == 'g' | out = @calendar_week_year_modulo100(time, --out)
          | char == 'G' | out = @calendar_week_year(time, --out)
          | char == 'H' | out = @hour_24_zero_padded(time, --out)
          | char == 'I' | out = @hour_12_zero_padded(time, --out)
          | char == 'j' | out = @day_of_year_zero_padded(time, --out)
          | char == 'k' | out = @hour_24_blank_padded(time, --out)
          | char == 'l' | out = @hour_12_blank_padded(time, --out)
          | char == 'L' | out = @milliseconds(time, --out)
          | char == 'm' | out = @month_zero_padded(time, --out)
          | char == 'M' | out = @minute(time, --out)
          | char == 'N' | out = @second_fraction(time, --out)
          | char == 'p' | out << @am_pm(time)
          | char == 'P' | out << @am_pm_upcase(time)
          | char == 'r' | out = @twelve_hour_time(time, --out)
          | char == 'R' | out = @twenty_four_hour_time(time, --out)
          | char == 's' | out = @unix_seconds(time, --out)
          | char == 'S' | out = @second(time, --out)
          | (char == 'T') || (char == 'X') | out = @twenty_four_hour_time_with_seconds(time, --out)
          | char == 'u' | out = @day_of_week_monday_1_7(time, --out)
          | char == 'V' | out = @calendar_week_week(time, --out)
          | char == 'w' | out = @day_of_week_sunday_0_6(time, --out)
          | char == 'y' | out = @year_modulo_100(time, --out)
          | char == 'Y' | out = @year(time, --out)
          | char == 'z' | out = @time_zone(time, False, --out)
          | char == '_' |
            char = @pattern.byte_at!(i + 2)
            case (
            | char == 'm' | out << @month_blank_padded(time)
            |
              ok = False
              out.push_byte('%')
              out.push_byte('_')
            )
            if ok (i += 1)
          | char == '-' |
            char = @pattern.byte_at!(i + 2)
            case (
            | char == 'd' | out << @day_of_month(time)
            | char == 'm' | out << @month(time)
            |
              ok = False
              out.push_byte('%')
              out.push_byte('-')
            )
            if ok (i += 1)
          | char == '^' |
            char = @pattern.byte_at!(i + 2)
            case (
            | char == 'a' | out << @short_day_name_upcase(time)
            | char == 'A' | out << @day_name_upcase(time)
            | (char == 'b') || (char == 'h') | out << @short_month_name_upcase(time)
            | char == 'B' | out << @month_name_upcase(time)
            |
              ok = False
              out.push_byte('%')
              out.push_byte('^')
            )
            if ok (i += 1)
          | char == ':' |
            char = @pattern.byte_at!(i + 2)
            case (
            | char == 'z' | out << @time_zone_colon(time)
            | char == ':' |
              char = @pattern.byte_at!(i + 3)
              case (
              | char == 'z' | out << @time_zone_colon_with_seconds(time)
              |
                ok = False
                out.push_byte('%')
                out.push_byte(':')
                out.push_byte(':')
              )
              if ok (i += 1)
            |
              out.push_byte('%')
              out.push_byte(':')
            )
            if ok (i += 1)
          | (char == '3') || (char == '6') || (char == '9') |
            digit_char = char
            char = @pattern.byte_at!(i + 2)
            case (
            | char == 'N' |
              case (
              | digit_char == '3' | out << @milliseconds(time)
              | digit_char == '6' | out << @microseconds(time)
              | digit_char == '9' | out << @nanoseconds(time)
              )
              i += 1
            |
              ok = False
              out.push_byte('%')
              out.push_byte(digit_char)
            )
            if ok (i += 1)
          | char == '%' |
            out.push_byte('%')
          |
            out.push_byte('%')
            out.push_byte(char)
          )
          i += 1
        |
          out.push_byte(char)
        )
        i += 1
      |
        is_bad_format = True
      )
    )

    // If the format was bad, we undo all of the stuff we may have written
    // by trimming the output string to its original size before we started.
    if is_bad_format (
      out.trim_in_place(0, original_out_size.isize)
    )

    --out

  :fun date_and_time(time Time'box, out String'iso = String.new_iso)
    out << @short_day_name(time)
    out.push_byte(' ')
    out << @short_month_name(time)
    out.push_byte(' ')
    out << @day_of_month_blank_padded(time)
    out.push_byte(' ')
    out << @twenty_four_hour_time_with_seconds(time)
    out.push_byte(' ')
    out << @year(time)
    --out

  :fun date(time Time'box, out String'iso = String.new_iso)
    out << @month_zero_padded(time)
    out.push_byte('/')
    out << @day_of_month_zero_padded(time)
    out.push_byte('/')
    out << @year_modulo_100(time)
    --out

  :fun year_month_day(time Time'box, out String'iso = String.new_iso)
    out << @year(time)
    out.push_byte('-')
    out << @month_zero_padded(time)
    out.push_byte('-')
    out << @day_of_month_zero_padded(time)
    --out

  :fun twelve_hour_time(time Time'box, out String'iso = String.new_iso)
    out << @hour_12_zero_padded(time)
    out.push_byte(':')
    out << @minute(time)
    out.push_byte(':')
    out << @second(time)
    out.push_byte(' ')
    out << @am_pm_upcase(time)
    --out

  :fun twenty_four_hour_time(time Time'box, out String'iso = String.new_iso)
    out << @hour_24_zero_padded(time)
    out.push_byte(':')
    out << @minute(time)
    --out

  :fun twenty_four_hour_time_with_seconds(time Time'box, out String'iso = String.new_iso)
    out << @hour_24_zero_padded(time)
    out.push_byte(':')
    out << @minute(time)
    out.push_byte(':')
    out << @second(time)
    --out

  :fun year(time Time'box, out String'iso = String.new_iso)
    @pad4(time.year.u64, '0', --out)

  :fun year_modulo_100(time Time'box, out String'iso = String.new_iso)
    @pad2((time.year % 100).u64, '0', --out)

  :fun year_divided_by_100(time Time'box, out String'iso = String.new_iso)
    Inspect.into(--out, (time.year / 100).u32)

  :fun full_or_short_year(time Time'box, out String'iso = String.new_iso)
    @year(time, --out)

  :fun calendar_week_year(time Time'box, out String'iso = String.new_iso)
    try (
      calendar_week_0 = time.calendar_week()[0]!
      out = @pad4(calendar_week_0, '0', --out)
    )
    --out

  :fun calendar_week_year_modulo100(time Time'box, out String'iso = String.new_iso)
    try (
      calendar_week_0 = time.calendar_week()[0]!
      out = @pad2(calendar_week_0 % 100, '0', --out)
    )
    --out

  :fun month(time Time'box, out String'iso = String.new_iso)
    Inspect.into(--out, time.month)

  :fun month_zero_padded(time Time'box, out String'iso = String.new_iso)
    @pad2(time.month.u64, '0', --out)

  :fun month_blank_padded(time Time'box, out String'iso = String.new_iso)
    @pad2(time.month.u64, ' ', --out)

  :fun month_name(time Time'box, out String'iso = String.new_iso)
    out << @get_month_name(time)
    --out

  :fun month_name_upcase(time Time'box, out String'iso = String.new_iso)
    // TODO
    // get_month_name.upcase
    --out

  :fun short_month_name(time Time'box, out String'iso = String.new_iso)
    out << @get_short_month_name(time)
    --out

  :fun short_month_name_upcase(time Time'box, out String'iso = String.new_iso)
    // TODO
    // get_short_month_name.upcase
    --out

  :fun calendar_week_week(time Time'box, out String'iso = String.new_iso)
    try (
      calendar_week_1 = time.calendar_week()[1]!
      out = @pad2(calendar_week_1, '0', --out)
    )
    --out

  :fun day_of_month(time Time'box, out String'iso = String.new_iso)
    Inspect.into(--out, time.day)

  :fun day_of_month_zero_padded(time Time'box, out String'iso = String.new_iso)
    @pad2(time.day.u64, '0', --out)

  :fun day_of_month_blank_padded(time Time'box, out String'iso = String.new_iso)
    @pad2(time.day.u64, ' ', --out)

  :fun day_name(time Time'box, out String'iso = String.new_iso)
    out << @get_day_name(time)
    --out

  :fun day_name_upcase(time Time'box, out String'iso = String.new_iso)
    // TODO
    // @get_day_name(time).upcase
    ""

  :fun short_day_name(time Time'box, out String'iso = String.new_iso)
    out << @get_short_day_name(time)
    --out

  :fun short_day_name_upcase(time Time'box, out String'iso = String.new_iso)
    // TODO
    // get_short_day_name.upcase
    ""

  :fun short_day_name_with_comma(time Time'box, out String'iso = String.new_iso)
    out << @short_day_name(time)
    out.push_byte(',')
    out.push_byte(' ')
    --out

  :fun day_of_year_zero_padded(time Time'box, out String'iso = String.new_iso)
    @pad3(time.day_of_year, '0', --out)

  :fun hour_24_zero_padded(time Time'box, out String'iso = String.new_iso)
    @pad2(time.hour.u64, '0', --out)

  :fun hour_24_blank_padded(time Time'box, out String'iso = String.new_iso)
    @pad2(time.hour.u64, ' ', --out)

  :fun hour_12_zero_padded(time Time'box, out String'iso = String.new_iso)
    h = (time.hour % 12).u64
    @pad2(if (h == 0) (12 | h), '0', --out)

  :fun hour_12_blank_padded(time Time'box, out String'iso = String.new_iso)
    h = (time.hour % 12).u64
    @pad2(if (h == 0) (12 | h), ' ', --out)

  :fun minute(time Time'box, out String'iso = String.new_iso)
    @pad2(time.minute.u64, '0', --out)

  :fun second(time Time'box, out String'iso = String.new_iso)
    @pad2(time.second.u64, '0', --out)

  :fun milliseconds(time Time'box, out String'iso = String.new_iso)
    @pad3((time.nanosecond / 1000000).u64, '0', --out)

  :fun microseconds(time Time'box, out String'iso = String.new_iso)
    @pad6((time.nanosecond / 1000).u64, '0', --out)

  :fun nanoseconds(time Time'box, out String'iso = String.new_iso)
    @pad9(time.nanosecond.u64, '0', --out)

  :fun second_fraction(time Time'box, out String'iso = String.new_iso)
    @nanoseconds(time, --out)

  :fun second_fraction!(
    time Time'box
    fraction_digits I32 = 9
    out String'iso = String.new_iso
  )
    case (
    | fraction_digits == 0 |
    | fraction_digits == 3 |
      out.push_byte('.')
      out = @milliseconds(time, --out)
    | fraction_digits == 6 |
      out.push_byte('.')
      out = @microseconds(time, --out)
    | fraction_digits == 9 |
      out.push_byte('.')
      out = @nanoseconds(time, --out)
    |
      error!
    )
    --out

  :fun am_pm(time Time'box) String
    if (time.hour < 12) ("am" | "pm")

  :fun am_pm_upcase(time Time'box) String
    if (time.hour < 12) ("AM" | "PM")

  :fun day_of_week_monday_1_7(time Time'box, out String'iso = String.new_iso)
    Inspect.into(--out, time.day_of_week.u64)

  :fun day_of_week_sunday_0_6(time Time'box, out String'iso = String.new_iso)
    Inspect.into(--out, time.day_of_week.u64 % 7)

  :fun unix_seconds(time Time'box, out String'iso = String.new_iso)
    Inspect.into(--out, time.to_unix)

  :fun time_zone(time Time'box, with_seconds = False, out String'iso = String.new_iso)
    // TODO
    // time_zone_offset(format_seconds: with_seconds)
    --out

  // def time_zone_z_or_offset(**options)
  //   if time.utc?
  //     io << 'Z'
  //   else
  //     time_zone_offset(**options)
  //   end
  // end

  // def time_zone_offset(force_colon = false, allow_colon = true, format_seconds = false, parse_seconds = true)
  //   time.zone.format(io, with_colon: force_colon, with_seconds: format_seconds)
  // end

  :fun time_zone_colon(time Time'box, with_seconds = False, out String'iso = String.new_iso)
    // TODO
    // time_zone_offset(force_colon: true, format_seconds: with_seconds)
    --out

  :fun time_zone_colon_with_seconds(time Time'box, out String'iso = String.new_iso)
    @time_zone_colon(time, True, --out)

  :fun time_zone_gmt(time Time'box, out String'iso = String.new_iso)
    out << "GMT"
    --out

  :fun time_zone_rfc2822(time Time'box, out String'iso = String.new_iso)
    // TODO
    // time_zone_offset(allow_colon: false)
    --out

  // def time_zone_gmt_or_rfc2822(**options)
  //   if time.utc? || time.location.name == "UT" || time.location.name == "GMT"
  //     time_zone_gmt
  //   else
  //     time_zone_rfc2822
  //   end
  // end

  :fun get_month_name(time Time'box) String
    try (@month_names[time.month.usize - 1]! | "")

  :fun get_short_month_name(time Time'box) String
    @get_month_name(time).substring(0, 3)

  :fun get_day_name(time Time'box) String
    try (@day_names[time.day_of_week.usize % 7]! | "")

  :fun get_short_day_name(time Time'box) String
    @get_day_name(time).substring(0, 3)

  :fun pad2(value U64, padding U8, out String'iso = String.new_iso)
    if (value < 10) out.push_byte(padding)
    Inspect.into(--out, value)

  :fun pad3(value U64, padding U8, out String'iso = String.new_iso)
    if (value < 100) out.push_byte(padding)
    @pad2(value, padding, --out)

  :fun pad4(value U64, padding U8, out String'iso = String.new_iso)
    if (value < 1000) out.push_byte(padding)
    @pad3(value, padding, --out)

  :fun pad6(value U64, padding U8, out String'iso = String.new_iso)
    if (value < 100000) out.push_byte(padding)
    if (value < 10000) out.push_byte(padding)
    @pad4(value, padding, --out)

  :fun pad9(value U64, padding U8, out String'iso = String.new_iso)
    if (value < 100000000) out.push_byte(padding)
    if (value < 10000000) out.push_byte(padding)
    if (value < 1000000) out.push_byte(padding)
    @pad6(value, padding, --out)
