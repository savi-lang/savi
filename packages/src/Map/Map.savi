:module _MapEmpty
:module _MapDeleted

:alias Map.ByIdentity(K, V): Map(K, V, _HashByIdentity(K))

:class Map(K, V, H _HashFunction(K) = _HashEq(K))
  :is Map.Readable(K, V)
  :var _size USize: 0
  :var _array Array((Pair(K, V) | _MapEmpty | _MapDeleted))

  :fun size: @_size

  :new (prealloc USize = 6)
    @_init_array(((prealloc * 4) / 3).max(8).next_pow2)

  :fun ref _init_array(space USize)
    @_array = Array((Pair(K, V) | _MapEmpty | _MapDeleted)).new(space)
    Count.to(space) -> (@_array << _MapEmpty)

  :fun ref _resize(space USize)
    space = space.max(@_size) // only grow the array - never shrink it
    old_array = @_array

    // TODO: would we get any perf benefit from resizing the array instead?
    @_init_array(space)

    old_array.each -> (entry |
      if (entry <: Pair(K, V)) (
        try (@_array[@_search(entry.key)]! = entry)
      )
    )
    @

  :: Remove all keys and values from the map.
  :fun ref clear
    @_size = 0
    @_init_array(8) // the default prealloc of 6 corresponds to an array of 8
    @

  :: Return True if the given key is present.
  :fun has_key(key K)
    try (@[--key]!, True | False)

  :: Return the value assigned to the given key, if present.
  :: Raises an error if the key is not present.
  ::
  :: $ map = Map(String, U64).new
  :: $ map["example"]!
  :: > error! // this key hasn't been assigned a value yet
  :: $ map["example"] = 99, map["example"]!
  :: > 99
  :: $ map.delete("example"), map["example"]!
  :: > error! // this key no longer has an assigned value
  ::
  :fun "[]!"(key K)
    @_array[@_search(key)]!.as!(@->(Pair(K, V))).value

  :: Assign the given value to the given key in the map.
  :: The previous value will be overwritten and discarded if present.
  ::
  :: $ map = Map(String, U64).new
  :: $ map["example"] = 99, map["example"]!
  :: > 99
  :: $ map["example"] = 33, map["example"]!
  :: > 33
  ::
  :fun ref "[]="(key K, value V)
    value_alias V'aliased = value // TODO: remove the V'aliased explicit type?
    try (
      index = @_search(key)
      old_entry = @_array[index]! <<= Pair(K, V).new(--key, --value)

      case old_entry <: (
      | _MapDeleted |
        @_size += 1
      | _MapEmpty |
        @_size += 1
        if (@_size * 4 > @_array.size * 3) (
          @_resize(@_array.size * 2)
        )
      )
    )
    value_alias

  :: Discard the value assigned to the given key.
  ::
  :: $ map = Map(String, U64).new
  :: $ map["example"] = 99, map["example"]!
  :: > 99
  :: $ map.delete("example"), map["example"]!
  :: > error! // this key no longer has an assigned value
  :: $ map.delete("example") // deleting it again has no effect
  ::
  :fun ref delete(key K)
    try (
      @_array[@_search(key)]! = _MapDeleted
      @_size -= 1
    )
    None

  :: Given a key, find the internal index associated with the hash of that key.
  :fun _search(key)
    hash = H.hash(key).usize()

    idx_del = @_array.size
    mask = idx_del - 1
    idx = hash.bit_and(mask)

    result_idx = idx_del
    found = False

    try (
      @_array.each_with_index -> (entry, i |
        entry = @_array[idx]!

        case entry <: (
        | @->(Pair(K, V)) |
          if H.equal(key, entry.key) (
            result_idx = idx
            found = True
            error! // TODO: use early return instead of error!
          )
        | _MapEmpty |
          if (idx_del > mask) (
            result_idx = idx
          |
            result_idx = idx_del
          )
          found = False
          error!
        | _MapDeleted |
          if (idx_del > mask) (
            idx_del = idx
          )
        )

        idx = (hash + ((i + (i * i)) / 2)).bit_and(mask)
      )
    )

    result_idx // TODO: also return `found`

  :: Yield each key and value in the map.
  :fun each
    @_array.each -> (entry |
      if (entry <: @->(Pair(K, V))) (
        yield (entry.key, entry.value)
      )
    )
    None

  :: Yield each key and value in the map, stopping iteration if the yield block
  :: returns True. Returns True if iteration was stopped early; else, False.
  :fun each_until
    :yields for Bool
    @_array.each_until -> (entry |
      if (entry <: @->(Pair(K, V))) (
        yield (entry.key, entry.value)
      |
        False
      )
    )
