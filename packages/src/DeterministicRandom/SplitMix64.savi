// TODO: Document.
:class DeterministicRandom.SplitMix64
  :is Random // TODO: this should not be necessary - copies should be transitive
  :is DeterministicRandom // TODO: this should not be necessary - copies should be transitive
  :is _State64

  :: Each step of the generator, the state steps forward by a constant amount.
  :const _step U64: 0x9e3779b97f4a7c15

  // Written in 2015 by Sebastiano Vigna (vigna@acm.org)
  // See <https://prng.di.unimi.it/splitmix64.c>.
  //
  // To the extent possible under law, the author has dedicated all copyright
  // and related and neighboring rights to this software to the public domain
  // worldwide. This software is distributed without any warranty.
  //
  // See <http://creativecommons.org/publicdomain/zero/1.0/>.
  :fun ref u64
    z = @_state += @_step
    z = z.bit_xor(z.bit_shr(30)) * 0xbf58476d1ce4e5b9
    z = z.bit_xor(z.bit_shr(27)) * 0x94d049bb133111eb
    z.bit_xor(z.bit_shr(31))

  // Override the default implementation of the U32 so that we get slightly
  // better performance than just using the high bits of the U64.
  //
  // These values are the Mix04 variant taken from a David Stafford blog post.
  // See <http://zimbry.blogspot.com/2011/09/better-bit-mixing-improving-on.html>.
  //
  // This blog post appears to be the source cited for the SplitMix64 paper,
  // which used the Mix13 variant from that post for best 64-bit quality.
  //
  // However, the Mix04 variant is of comparable quality and can be used
  // more efficiently for 32-bit purposes, because it has an exactly 32-bit
  // shift at the end, so we can skip the final xor operation and the later
  // 32-bit shift that would normally happen, since the low 32 bits we will use
  // are already of a high statistical quality when we finish here.
  :fun ref u32
    z = @_state += @_step
    z = z.bit_xor(z.bit_shr(33)) * 0x62a9d9ed799705f5
    z = z.bit_xor(z.bit_shr(28)) * 0xcb24d0a5c88c35b3
    z.bit_shr(32).u32
