:: This is xoroshiro128++, an all-purpose small-state PRNG.
:: It is very fast and it passes all major statistical quality tests.
::
:: See <https://prng.di.unimi.it/> for more information.
::
:: Like all generators in this library, it should NOT be used for cryptographic
:: purposes, or any other purpose where predictability can cause security flaws.
:: Prefer using the SecureRandom package for those use cases.
::
:: Its state space is large enough only for mild parallelism, so if
:: vast parallelism without state overlap is needed, use 256-bit variants.
::
:: For generating floating point numbers (which need only 53 significant bits),
:: and/or generating other narrow-width types like U32, U16, U8, Bool, prefer to
:: use Xoroshiro128.Narrow instead, which implements the xoroshiro128+ variant,
:: being optimized for high performance across that smaller number of bits (53).
:class DeterministicRandom.Xoroshiro128
  :is Random // TODO: this should not be necessary - copies should be transitive
  :is DeterministicRandom // TODO: this should not be necessary - copies should be transitive
  :is _State128

  // Written in 2019 by David Blackman and Sebastiano Vigna (vigna@acm.org)
  // See <https://prng.di.unimi.it/xoroshiro128plusplus.c>.
  //
  // To the extent possible under law, the author has dedicated all copyright
  // and related and neighboring rights to this software to the public domain
  // worldwide. This software is distributed without any warranty.
  //
  // See <http://creativecommons.org/publicdomain/zero/1.0/>.
  :fun ref u64
    sa = @_state_a
    sb = @_state_b

    result = (sa + sb).bit_rotl(17) + sa

    sb = sb.bit_xor(sa)
    @_state_a = sa.bit_rotl(49).bit_xor(sb).bit_xor(sb.bit_shl(21))
    @_state_b = sb.bit_rotl(28)

    result

:: This is xoroshiro128+, a variant of xoroshiro128++ optimized for F64 values,
:: which need good statistical quality across only 53 significant bits instead
:: of across the entire 64 bits that xoroshiro128++ is optimized for.
::
:: Other lower bit width data types like U32, U16, U8, Bool, etc can also be
:: expected to be of high quality, since they will be extracted from within the
:: 53 high-quality upper bits that are targeted for F64 quality.
::
:: It is faster than xoroshiro128++, but has a "mild Hamming-weight dependency"
:: causing it to fail some linear complexity tests after about 5TB of data.
::
:: See <https://prng.di.unimi.it/> for more information.
::
:: Like all generators in this library, it should NOT be used for cryptographic
:: purposes, or any other purpose where predictability can cause security flaws.
:: Prefer using the SecureRandom package for those use cases.
::
:: Its state space is large enough only for mild parallelism, so if
:: vast parallelism without state overlap is needed, use 256-bit variants.
::
:: For all-purpose 64-bit generation, use the main Xoroshiro128 type instead.
:class DeterministicRandom.Xoroshiro128.Narrow
  :is Random // TODO: this should not be necessary - copies should be transitive
  :is DeterministicRandom // TODO: this should not be necessary - copies should be transitive
  :is _State128

  // Written in 2016-2018 by David Blackman and Sebastiano Vigna (vigna@acm.org)
  // See <https://prng.di.unimi.it/xoroshiro128plus.c>.
  //
  // To the extent possible under law, the author has dedicated all copyright
  // and related and neighboring rights to this software to the public domain
  // worldwide. This software is distributed without any warranty.
  //
  // See <http://creativecommons.org/publicdomain/zero/1.0/>.
  :fun ref u64
    sa = @_state_a
    sb = @_state_b

    result = sa + sb

    sb = sb.bit_xor(sa)
    @_state_a = sa.bit_rotl(24).bit_xor(sb).bit_xor(sb.bit_shl(16))
    @_state_b = sb.bit_rotl(37)

    result
