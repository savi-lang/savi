:trait TCP.Listener.Notify
  :fun ref listening(listen TCP.Listener'ref): None
  :fun ref not_listening(listen TCP.Listener'ref) None
  :fun ref closed(listen TCP.Listener'ref): None
  :fun ref connected!(
    listen TCP.Listener'ref
    ticket TCP.Listener.AcceptTicket
  ) IO.Actor(IO.Action)

// TODO: Is there another way to protect the fd by making it non-forgeable,
// while avoiding the overhead of an allocation and pointer indirection?
:class iso TCP.Listener.AcceptTicket
  :var _fd U32
  :new iso _new(@_fd)

:actor TCP.Listener
  :let notify TCP.Listener.Notify
  :var listen_error OSError: OSError.None

  :var _fd U32: -1
  :var _event CPointer(AsioEvent): CPointer(AsioEvent).null

  :var _count USize: 0
  :var _limit USize
  :var _read_buffer_size USize
  :var _yield_after_reading USize
  :var _yield_after_writing USize

  :var _closed Bool: False
  :var _paused Bool: False

  :fun local_port: _NetAddress._for_fd(@_fd).port

  :new (
    // TODO: TCP.Listener.Auth, rather than ambient authority.
    notify TCP.Listener.Notify'iso
    host String = ""
    service String = "0"
    @_limit = 0
    @_read_buffer_size = 16384
    @_yield_after_reading = 16384
    @_yield_after_writing = 16384
  )
    new_notify TCP.Listener.Notify'ref = --notify // TODO: should not be needed
    @notify = new_notify

    event = _LibPonyOS.pony_os_listen_tcp(@, host.cstring, service.cstring)
    if event.is_not_null (
      @_event = event
      @_fd = AsioEvent.fd(@_event)
      error = _LibPonyOS.pony_os_errno
      new_notify.listening(@)
    |
      @listen_error = _LibPonyOS.pony_os_errno
      @_closed = True
      new_notify.not_listening(@)
    )

  :: This is a special behaviour that hooks into the AsioEventNotify runtime,
  :: called whenever an event handle we're subscribed to receives an event.
  :be _event_notify(event CPointer(AsioEvent), flags U32, arg U32)
    if (@_event === event) (
      if AsioEvent.is_readable(flags) (
        @_accept(arg)
      )
      if AsioEvent.is_disposable(flags) (
        AsioEvent.destroy(@_event)
        @_event = CPointer(AsioEvent).null
      )
    )

  :be _accept(ns U32 = 0)
    if Platform.windows (
      None // TODO
    |
      if @_closed.not (
        try (
          while (@_limit == 0 || @_count < @_limit) (
            conn_fd = _LibPonyOS.pony_os_accept(@_event)
            case conn_fd == (
            |  0 | error! // EWOULDBLOCK, don't try again
            | -1 | None   // Some other error, so we can try again
            |      @_spawn(conn_fd)
            )
          )
          @_paused = True
        )
      )
    )

  :fun ref _spawn(fd U32)
    try (
      @notify.connected!(@, TCP.Listener.AcceptTicket._new(fd))
      @_count += 1
    |
      _LibPonyOS.pony_os_socket_close(fd)
    )

  :be _conn_closed
    @_count -= 1

    // If releasing this connection takes us below the limit,
    // unpause acceptance and try to accept more connections.
    if (@_paused && @_count < @_limit) (
      @_paused = False
      @_accept
    )

  :be dispose: @close
  :fun ref close
    if (@_closed.not && @_event.is_not_null) (
      // When not on windows, unsubscribe immediately here instead of later.
      if Platform.windows.not AsioEvent.unsubscribe(@_event)

      _LibPonyOS.pony_os_socket_close(@_fd)
      @_fd = -1

      @notify.closed(@)
    )
