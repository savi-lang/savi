:class TCP.ConnectionEngine
  :is IO.Engine(IO.Action)
  :var io: IO.CoreEngine.new
  :var listen (TCP.Listener | None): None
  :var connect_error OSError: OSError.None
  :let read_stream: ByteStream.Reader.new
  :let write_stream: ByteStream.ChunkedWriter.new

  :fun non connect(
    // TODO: TCPConnectionAuth, rather than ambient authority.
    actor AsioEventNotify
    host String
    service String
    from String = ""
  )
    try (
      @_new_with_io(IO.CoreEngine.new_tcp_connect!(actor, host, service, from))
    |
      invalid = @_new_with_io(IO.CoreEngine.new)
      invalid.connect_error = OSError.EINVAL
      invalid
    )

  :fun non accept(
    actor AsioEventNotify
    listen TCP.Listener
    ticket TCP.Listener.AcceptTicket
  )
    io = IO.CoreEngine.new_from_fd_rw(actor, ticket._fd)
    new = @_new_with_io(io)
    new.listen = listen
    new

  :new _new_with_io(@io)

  :fun ref react(event CPointer(AsioEvent), flags U32, arg U32) @
    :yields IO.Action
    @io.react(event, flags, arg) -> (action |
      case action == (
      | IO.Action.Closed |
        try @listen.as!(TCP.Listener)._conn_closed

        // TODO: windows complete writes, flush-after-mute (pending writes logic from Pony)
        // | IO.Action.Write |
        //   ...
      )
      yield action
    )
    @

  :fun ref close
    @io.close
    @

  :fun ref flush
    @write_stream.flush(@io)

  :fun ref pending_reads
    :yields USize for None
    if Platform.windows (
      None // TODO: @_windows_complete_reads(arg)
    |
      @_pending_reads_unix -> (bytes_available | yield bytes_available)
    )
    @

  :fun ref _pending_reads_unix None
    :yields USize for None
    while @io.is_readable (
      try (
        bytes_read = @read_stream.receive_from!(@io)
        if (bytes_read > 0) (yield @read_stream.bytes_ahead_of_marker)
      )
    )
