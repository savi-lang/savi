:module _Parser
  :fun parse(input String) _Pattern
    choice = _PatternChoice.new
    pattern _Pattern = _PatternNone.new

    is_in_escape_sequence = False

    input.each_byte -> (byte |
      if is_in_escape_sequence (
        is_in_escape_sequence = False
        pattern = case byte == (
        | 'd' | pattern.concat(@_builtin_class_digit)
        | 'w' | pattern.concat(@_builtin_class_word)
        |
          // TODO: proper UTF-8 support here
          char = _PatternCharacter.new(byte, 0, 0, 0)
          pattern.concat(char)
        )
      |
        pattern = case byte == (
        | '\\' | is_in_escape_sequence = True, pattern
        | '.'  | pattern.concat(_PatternAnyByte.new) // TODO: proper UTF-8
        | '?'  | pattern.with_question
        | '*'  | pattern.with_star
        | '+'  | pattern.with_plus
        | '|'  | choice.children.push(pattern), pattern = _PatternNone.new
        |
          // TODO: proper UTF-8 support here
          char = _PatternCharacter.new(byte, 0, 0, 0)
          pattern.concat(char)
        )
      )
    )

    if choice.children.is_not_empty (
      choice.children.push(pattern)
      choice
    |
      pattern
    )

  :fun non _builtin_class_digit
    _PatternByteRange.new('0', '9')

  :fun non _builtin_class_word
    _PatternChoice.new([
      _PatternByteRange.new('a', 'z')
      _PatternByteRange.new('A', 'Z')
      _PatternByteRange.new('0', '9')
      _PatternByte.new('_')
    ])

