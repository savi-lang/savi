:: A Pattern represents a sort of abstract syntax tree for a regular expression.
:: That is, a string specifying a regular expression gets parsed to build a tree
:: which represents the semantics indicated by the regular expression string.
::
:: The Pattern trait is the interface which all pattern types implement, and
:: most of the common interface is a set of tree building functions which have
:: a base implementation in the trait, but may be overridden on specific types.
:: Sometimes these overrides are optimizations to build a smaller tree that is
:: semantically equivalent, though sometimes they are relied upon to implement
:: different semantics in ways that make it easier to build the tree without
:: recourse to as many special cases on the parser side.
:trait _Pattern
  :fun non none: _PatternNone.new

  :fun ref concat(other) _Pattern
    _PatternSequence.new([@, other])

  :fun ref with_question _Pattern
    _PatternOptional.new(@)

  :fun ref with_star _Pattern
    _PatternZeroOrMore.new(@)

  :fun ref with_plus _Pattern
    _PatternOneOrMore.new(@)

:: A placeholder that is used in constructing patterns, which has no effect.
:: It's effectively a zero-width match that asserts nothing about the input,
:: and when compiled to a program it generates no program instructions at all.
:class _PatternNone
  :is _Pattern

  // These overrides make it behave as this pattern isn't really there,
  // collapsing trees which would mean nothing for a "none" pattern.
  :fun ref concat(other _Pattern): other
  :fun ref with_question: @
  :fun ref with_star: @
  :fun ref with_plus: @

:: Match any byte.
// TODO: Replace this with something UTF-8-aware.
:class _PatternAnyByte
  :is _Pattern

:: Match a specific byte.
:: This cannot be used with multibyte UTF-8 codepoints, but it is nice and
:: efficient for the common case of single bytes in ASCII character classes.
:class _PatternByte
  :is _Pattern
  :let byte U8
  :new (@byte)

:: Match any byte whose value is within the given range (inclusive).
:: This cannot be used with multibyte UTF-8 codepoints, but it is nice and
:: efficient for the common case of byte ranges in ASCII character classes.
:class _PatternByteRange
  :is _Pattern
  :let low U8
  :let high U8
  :new (@low, @high)

:: Match a specific UTF-8 character consisting of one to four bytes.
:class _PatternCharacter
  :is _Pattern
  :let byte_1 U8
  :let byte_2 U8
  :let byte_3 U8
  :let byte_4 U8
  :new (@byte_1, @byte_2, @byte_3, @byte_4)
  :fun each_byte
    yield @byte_1
    if (@byte_2 != 0) (yield @byte_2)
    if (@byte_3 != 0) (yield @byte_3)
    if (@byte_4 != 0) (yield @byte_4)

:: Match a sequence of concatenated patterns, one after the other.
:class _PatternSequence
  :is _Pattern
  :let children Array(_Pattern)
  :new (@children)

  :fun last!: @children.last!
  :fun ref "last=!"(pattern): @children.last! = pattern

  // This override optimizes by appending the new element to the
  // current sequence rather than nesting this sequence within a new sequence.
  :fun ref concat(other): @children << other, @

  // These overrides are used for operators that are meant to apply only to
  // the immediately preceding element of the sequence, rather than the
  // entire preceding sequence, as would happen without these overrides.
  :fun ref with_question: try (@last! = @last!.with_question, @ | @none)
  :fun ref with_star:     try (@last! = @last!.with_star,     @ | @none)
  :fun ref with_plus:     try (@last! = @last!.with_plus,     @ | @none)

:: Match an optional (zero or one) occurrence of the child pattern.
:class _PatternOptional
  :is _Pattern
  :let child _Pattern
  :let is_non_greedy Bool
  :new (@child, @is_non_greedy = False)

:: Match zero or more repeated occurrences of the child pattern.
:class _PatternZeroOrMore
  :is _Pattern
  :let child _Pattern
  :let is_non_greedy Bool
  :new (@child, @is_non_greedy = False)

:: Match one or more repeated occurrences of the child pattern.
:class _PatternOneOrMore
  :is _Pattern
  :let child _Pattern
  :let is_non_greedy Bool
  :new (@child, @is_non_greedy = False)

:: Match exactly one of the given options represented by the children patterns.
:class _PatternChoice
  :is _Pattern
  :let children Array(_Pattern)
  :new (@children = [])
