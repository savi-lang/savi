:: This is a simple virtual machine that can handle simple regular expressions
:: (i.e. no subcaptures, no backtracking) in linear time.
::
:: It is instantiated with a compiled program using a custom bytecode format,
:: then it executes the bytecode using the given input bytes to check a match.
::
:: See this blog post for more information about the virtual machine approach:
:: https://swtch.com/~rsc/regexp/regexp2.html
:class _SimpleVM
  :let program Bytes'box
  :new (@program)

  :var did_match: False
  :fun ref reset: @did_match = False

  :: Return true if the regular expression program, when executed by this VM,
  :: matches the given input.
  :fun ref run(input Bytes'val) Bool
    // We allocate two lists of "threads", where each thread is really just
    // an address indicating the program bytecode position for that thread.
    // Note that all threads are looking at the same offset of the input,
    // moving in lock-step, because this is a non-backtracking virtual machine.
    // They only differ in their current position within the program bytecode.
    //
    // TODO: In theory we can statically analyze the program to estimate the
    // maximum number of possible simultaneous threads more closely -
    // using the total program size is a very pessimistic estimate, which will
    // cause us to allocate significantly more memory than we actually need.
    run_threads = Array(USize).new(@program.size)
    next_threads = Array(USize).new(@program.size)

    try (
      // Start the initial thread at the beginning of the program.
      @_continue!(run_threads, 0)
      input.each_with_index_until -> (input_byte, input_index |
        run_threads.each_until -> (address |
          program_byte = @program[address]!
          case (
          // For _OpAnyByte, consume the byte of input regardless of what it is,
          // then continue with the next byte of the program.
          | _OpAnyByte.u8 == program_byte |
            @_continue!(next_threads, address +! 1)

          // For _OpByteRange, we read the next two bytes in the program,
          // continuing only if the input byte is within that range.
          | _OpByteRange.u8 == program_byte |
            low = @program[address +! 1]!
            high = @program[address +! 2]!
            if (input_byte >= low && input_byte <= high) (
              @_continue!(next_threads, address +! 3)
            )

          // For _OpByte, we read the next byte in the bytecode program,
          // and compare it to the input byte to see if it fails to match.
          | _OpByte.u8 == program_byte |
            if (input_byte == @program[address +! 1]!) (
              @_continue!(next_threads, address +! 2)
            )

          // If the program byte is below the op code range, then it is
          // an implied _OpByte op code with that byte as the expected byte,
          // so we compare it against the input byte same as we did above.
          | _Op.min_op > program_byte |
            if (input_byte == program_byte) (
              @_continue!(next_threads, address +! 1)
            )
          )

          // Stop iterating over the threads when a full match is reached.
          // TODO: use early return instead
          @did_match
        )

        // Swap the next_threads into the run_threads variable,
        // then clear the new next_threads variable to be filled again.
        // TODO: use displacing assignment:
        // run_threads = next_threads <<= run_threads
        // next_threads.clear
        run_threads = next_threads
        next_threads = Array(USize).new(@program.size)

        // Stop iterating over the input when a full match is reached,
        // or when we run out of active threads - whichever comes first.
        early_stop = @did_match || run_threads.is_empty
        early_stop
      )
    )

    @did_match

  :fun ref _continue!(threads Array(USize), address USize)
    // TODO: prevent creating a new thread with gen == gen trick

    // Here we handle control flow opcodes that consume no input.
    // We want to recursively dig through all opcodes that consume no input
    // until we finally enqueue zero or more addresses that point to opcodes
    // that are ready to consume input in the main input-consuming loop.
    program_byte = @program[address]!
    case (
    // _OpJump jumps to the given address by enqueuing that address.
    | _OpJump.u8 == program_byte |
      @_continue!(threads, @program.read_native_u32!(address +! 1).usize)

    // _OpSplit jumps to the both of the given addresses simultaneously
    // by enqueuing them both as threads with the given priority order.
    | _OpSplit.u8 == program_byte |
      @_continue!(threads, @program.read_native_u32!(address +! 1).usize)
      @_continue!(threads, @program.read_native_u32!(address +! 5).usize)

    // _OpSplitMany jumps to the all of the given addresses simultaneously
    // by enqueuing them all as threads with the given priority order.
    | _OpSplitMany.u8 == program_byte |
      next_address = address +! 1
      keep_going = True
      while keep_going (
        continue_address = @program.read_native_u32!(next_address).usize
        // If the continue address is zero, that marks the end of the list.
        if (continue_address == 0) (
          keep_going = False // TODO: use break instead
        |
          @_continue!(threads, continue_address)
          next_address = next_address +! 4
        )
      )

    // If this is an _OpMatch, we've completed a full match.
    // There is no need to continue the program in such a case.
    | _OpMatch.u8 == program_byte |
      @did_match = True

    // If it's an opcode we don't handle here, we put the address on the
    // stack to let it be handled in the input-consuming loop.
    |
      threads << address
    )

    @
