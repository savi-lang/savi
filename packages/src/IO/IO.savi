// TODO: Move everything in this file to a separate "IO" package,
// once the interface is settled and deemed to be safe for non-FFI users.
// TODO: Also move the AsioEvent type into the "IO" package too,
// and rename it to a private name so that it is not accessible on its own,
// and can only be utilized via this IO.CoreEngine abstraction.
// Though maybe that presents problems for the _event_notify interface?
// For that matter, maybe allowing flags and arg there to be non-opaque is bad.

:enum IO.Action
  :const bit_width U8: 8
  :member IO.Action.Opened: 1
  :member IO.Action.OpenFailed: 2
  :member IO.Action.Read: 3
  :member IO.Action.Write: 4
  :member IO.Action.Closed: 5

:trait IO.Engine(ActionType val)
  :fun ref react(event CPointer(AsioEvent), flags U32, arg U32) @
    :yields ActionType for None

:trait tag IO.Actor(ActionType val)
  :fun io @->(IO.Engine(ActionType)) // TODO: somehow private... allow the trait to use this, but make it private to other callers?
  :fun ref _io_react(action ActionType) @

  :: This is a special behaviour that hooks into the AsioEventNotify runtime,
  :: called whenever an event handle we're subscribed to receives an event.
  ::
  :: We expect the _io engine to interpret the event into an action to yield,
  :: and we will forward the yielded action the the _io_react method.
  :be _event_notify(event CPointer(AsioEvent), flags U32, arg U32)
    @io.react(event, flags, arg) -> (action | @_io_react(action))

:class IO.CoreEngine
  :is IO.Engine(IO.Action)
  :is ByteStream.Source
  :is ByteStream.ChunkedSink

  :var _event CPointer(AsioEvent): AsioEvent.none
  :var _fd U32: -1
  :var _os_error: OSError.None
  :var _pending_connect_count U32: 0
  :var _has_closed Bool: False
  :var _is_readable Bool: False
  :var _is_writable Bool: False
  :var _is_send_shutdown Bool: False
  :var _is_recv_shutdown Bool: False

  :fun is_open: @_event.is_not_null && @_has_closed.not
  :fun has_opened: @_event.is_not_null || @_has_closed
  :fun is_waiting_to_open: @has_opened.not
  :fun has_closed: @_has_closed

  :fun is_readable: @_is_readable
  :fun is_writable: @_is_writable

  :fun os_error: @_os_error

  :new

  :new new_tcp_connect!(
    actor AsioEventNotify
    host String
    service String
    from String = ""
  )
    asio_flags =
      if Platform.windows (AsioEvent.read_write | AsioEvent.read_write_oneshot)
    connect_count = LibPonyOs.pony_os_connect_tcp(
      actor, host.cstring, service.cstring, from.cstring, asio_flags
    )
    if (connect_count == 0) error!
    @_pending_connect_count = connect_count

  :new new_from_fd_rw(actor AsioEventNotify, @_fd)
    asio_flags =
      if Platform.windows (AsioEvent.read_write | AsioEvent.read_write_oneshot)
    @_event = AsioEvent.create(actor, @_fd, asio_flags, 0, True)

  :fun ref _clear_state_after_final_dispose
    @_event = AsioEvent.none
    @_fd = -1
    @_has_closed = True
    @_is_readable = False
    @_is_writable = False
    @_is_send_shutdown = True
    @_is_recv_shutdown = True

  :fun ref writev_windows!(data_pairs Array(CPointer(U8)), offset USize) None
    LibPonyOs.pony_os_writev!(@_event, data_pairs.cpointer, data_pairs.size / 2)

  :fun ref writev_posix!(data_pairs Array(CPointer(U8)), offset USize) USize
    LibPonyOs.pony_os_writev!(@_event, data_pairs.cpointer, data_pairs.size / 2)

  :fun non writev_posix_max_chunks USize: LibPonyOs.pony_os_writev_max

  :: Receive bytes into the given read buffer, starting at the given offset.
  :: Raises an error and initiates a hard close if the socket was closed
  :: on the other side of the connection.
  :fun ref emit_bytes_into!(read_buffer Bytes'ref, offset USize) USize
    try (
      // TODO: Safety checking on offset value, maybe using checked subtraction?
      bytes_read = LibPonyOs.pony_os_recv!(
        @_event
        read_buffer.cpointer(offset)
        read_buffer.space - offset
      )
      new_size = offset + bytes_read
      read_buffer.resize_possibly_including_uninitialized_memory(new_size)

      // If we read zero bytes, we know that further reading would block,
      // so we'll set the event handle as non-readable and try again later.
      // This is safe because the asio thread isn't currently subscribed
      // for a read event so will not be writing to the readable flag.
      if (bytes_read == 0) (
        AsioEvent.set_readable(@_event, False)
        @_is_readable = False
        AsioEvent.resubscribe_read(@_event)
      )

      bytes_read
    |
      @_is_readable = False
      error!
    )

  :fun ref _adopt_event!(event CPointer(AsioEvent)) @
    fd = AsioEvent.fd(event)
    os_error = _PonyOs.check_os_error(fd)

    // Check if the above system call failed. If so, we bail out here.
    if (os_error != OSError.None) (
      AsioEvent.unsubscribe(event)
      LibPonyOs.pony_os_socket_close(fd)
      @_os_error = os_error
      error!
    )

    // Adopt the event.
    @_event = event
    @_fd = fd
    @_is_writable = True // TODO: Remove these lines?
    @_is_readable = True // TODO: Remove these lines?
    @

  :fun ref react(event CPointer(AsioEvent), flags U32, arg U32) @
    :yields IO.Action for None
    case (
    // First, if this is a disposable event handle, just dispose of it.
    // We won't yield any actions back to the caller about this,
    // unless it is the event that we own.
    | AsioEvent.is_disposable(flags) |
      AsioEvent.destroy(event)
      if (@_event === event) (
        @_clear_state_after_final_dispose
        yield IO.Action.Closed
      )

    // If we own this event, continue by yielding any relevant actions.
    | @_event === event |
      @_event_notify_continue(flags, arg) -> (action | yield action)

    // If this engine is waiting to open, try adopting this new event to open.
    | @is_waiting_to_open && AsioEvent.is_writable(flags) |
      try (
        @_pending_connect_count -= 1
        @_adopt_event!(event)
        yield IO.Action.Opened
        @_event_notify_continue(flags, arg) -> (action | yield action)
      |
        // If there are no more pending connections, our last one has failed
        // and we have no choice but to admit final failure.
        if (@_pending_connect_count == 0) (
          @_clear_state_after_final_dispose
          yield IO.Action.OpenFailed
        )
      )

    // Otherwise, this is an event that we don't own and don't want to own,
    // so we unsubscribe from it, allowing it to become disposable later,
    // at which point it will finally get cleaned up and freed.
    |
      AsioEvent.unsubscribe(@_event)
    )
    @

  :: Handle incoming events for the event handle that we already own.
  :fun ref _event_notify_continue(flags U32, arg U32)
    :yields IO.Action for None
    if AsioEvent.is_writable(flags) (
      @_is_writable = True
      // TODO: complete writes, pending writes logic from Pony
      yield IO.Action.Write
    )
    if AsioEvent.is_readable(flags) (
      @_is_readable = True
      yield IO.Action.Read
    )
    if @_has_closed @_close
    None

  :: Attempt to close the connection gracefully, after all writes are sent.
  :: New writes arriving after this will be ignored and discarded.
  :: All data currently available to be read from the socket will be read.
  :: However, if the connection is muted, a hard close will be done instead,
  :: closing the socket immediately with no more data being read from it.
  :fun ref close Bool: if Platform.windows (@_close | @hard_close)
  :fun ref _close Bool
    @_has_closed = True

    // Start shutting down the socket if it's ready for that step.
    if (
      @_is_send_shutdown.not
      // TODO:
      // && @_pending_connect_count == 0
      // && @_pending_writev_total == 0
    ) (
      @_is_send_shutdown = True
      if @is_open (
        LibPonyOs.pony_os_socket_shutdown(@_fd)
      |
        @_is_recv_shutdown = True
      )
    )

    // Finish with a hard close if the socket is ready for that step.
    did_close = False
    if (@is_open && @_is_send_shutdown && @_is_recv_shutdown) (
      did_close = @hard_close
    )

    // On windows, hard_close doesn't unsubscribe the socket, because we want
    // to wait for all outstanding IO.CP operations to be completed or cancelled.
    // So, we finish up here in a later call to this function by unsubscribing,
    // after the socket is no longer readable and we have no pending writes.
    if (
      Platform.windows
      && @has_closed && @_is_readable.not // TODO: && @_pending_sent == 0
    ) (
      AsioEvent.unsubscribe(@_event)
    )

    did_close

  :: When an error happens, this function is invoked for a non-graceful close.
  :: Unlike the close function, this one won't wait around to finish reading.
  :: This function is also used as the final step of a graceful shutdown.
  :fun ref hard_close Bool
    if @is_open (
      // TODO:
      // @_pending_writev_total = 0
      // @_pending_writev.clear
      // @_pending_sent = 0

      if Platform.windows.not (
        AsioEvent.unsubscribe(@_event)
        @_is_readable = False
        @_is_writable = False
        AsioEvent.set_readable(@_event, False)
        AsioEvent.set_writable(@_event, False)
      )

      LibPonyOs.pony_os_socket_close(@_fd)
      @_has_closed = True
      @_is_send_shutdown = True
      @_is_recv_shutdown = True

      True
    |
      False
    )
