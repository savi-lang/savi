// TODO: Document.
:trait Random
  // Each random generator is expected to supply an implementation to generate
  // a pseudo-random 64-bit number, and other value types are derived from this.
  :fun ref u64 U64

  // Unsigned integers are derived by bit-shifting down from the original U64.
  // However, some implementations may override these with different approaches.
  //
  // We intentionally cascade each method into the next, so that if for example,
  // the `u32` method is overridden with another approach, then all
  // smaller-width values will derive from `u32` instead of `u64`.
  //
  // In the normal case, with no overrides, we trust LLVM to inline and combine
  // the bit shift operations to remove unnecessary bit shift instructions.
  :fun ref u32 U32: @u64.bit_shr(32).u32
  :fun ref u16 U16: @u32.bit_shr(16).u16
  :fun ref u8 U8: @u16.bit_shr(8).u8

  // Signed integers are derived by generating as unsigned, then converting.
  :fun ref i64 I64: @u64.i64
  :fun ref i32 I32: @u32.i32
  :fun ref i16 I16: @u16.i16
  :fun ref i8 I8: @u8.i8

  // Floating-point numbers are similarly derived by converting unsigned ones.
  :fun ref f64 F64: F64.from_bits(@u64)
  :fun ref f32 F32: F32.from_bits(@u32)

  // Boolean values are derived from the most significant bit of the value.
  :fun ref bool Bool: @u8.bit_and(0x80) != 0

  :: Return a random 32-bit fraction - an F32 in the range [0, 1).
  ::
  :: The possible values will be uniformly spaced at one half-epsilon apart,
  :: because half-epsilon is the largest unit of least precision below 1.0.
  ::
  :: To generate in a range that includes 1 but excludes 0, see frac_32_nonzero.
  :fun ref frac_32 F32
    @u32.bit_shr(F32.exp_bit_width).f32 * F32.half_epsilon

  :: Return a random 32-bit nonzero fraction - an F32 in the range (0, 1].
  ::
  :: The possible values will be uniformly spaced at one half-epsilon apart,
  :: because half-epsilon is the largest unit of least precision below 1.0.
  ::
  :: To generate in a range that includes 0 but excludes 1, see frac_32.
  :fun ref frac_32_nonzero F32
    @frac_32 + F32.half_epsilon

  :: Return a random 64-bit fraction - an F64 in the range [0, 1).
  ::
  :: The possible values will be uniformly spaced at one half-epsilon apart,
  :: because half-epsilon is the largest unit of least precision below 1.0.
  ::
  :: To generate in a range that includes 1 but excludes 0, see frac_64_nonzero.
  :fun ref frac_64 F64
    @u64.bit_shr(F64.exp_bit_width).f64 * F64.half_epsilon

  :: Return a random 64-bit nonzero fraction - an F64 in the range (0, 1].
  ::
  :: The possible values will be uniformly spaced at one half-epsilon apart,
  :: because half-epsilon is the largest unit of least precision below 1.0.
  ::
  :: To generate in a range that includes 0 but excludes 1, see frac_64.
  :fun ref frac_64_nonzero F64
    @frac_64 + F64.half_epsilon

  :: Return a random U64 below the given limit - in the range [0, limit).
  ::
  :: The results will be slightly biased (some numbers have one more sample
  :: in the pool than others), but the bias is very slight if the limit is
  :: much smaller than the maximum representable U64 value, and the bias is
  :: eliminated entirely if the given limit is a power of 2.
  ::
  :: If you need fully unbiased results, use the `unbiased_u64_less_than`
  :: method instead, which discards all samples from the biased zone.
  :fun ref u64_less_than(limit U64) U64
    @u64.wide_multiply(limit).head

  :: Return a random U32 below the given limit - in the range [0, limit).
  ::
  :: The results will be slightly biased (some numbers have one more sample
  :: in the pool than others), but the bias is very slight if the limit is
  :: much smaller than the maximum representable U32 value, and the bias is
  :: eliminated entirely if the given limit is a power of 2.
  ::
  :: If you need fully unbiased results, use the `unbiased_u32_less_than`
  :: method instead, which discards all samples from the biased zone.
  :fun ref u32_less_than(limit U32) U32
    @u32.wide_multiply(limit).head

  :: Return an unbiased random U64 below the given limit, discarding the rare
  :: cases where we get a result from a biased zone of the output.
  ::
  :: This ensures that every integer in the range has an equal probability
  :: of occurring (at least, assuming a perfectly fair underlying generator).
  :: However, performance can degrade slightly due to discarding and retrying.
  ::
  :: To keep maximum performance at the cost of some possibility of bias,
  :: use the `u64_less_than` method instead, which never discards results.
  :fun ref unbiased_u64_less_than(limit U64) U64
    // See https://arxiv.org/pdf/1805.10941.pdf
    random = @
    product = random.u64.wide_multiply(limit)
    // Reject and try again if the tail happens to be in the zone of bias.
    // The loop will continue generating new numbers until we get a good sample.
    if (product.tail < limit) (
      threshold = limit.negate % limit
      while (product.tail < threshold) (
        product = random.u64.wide_multiply(limit)
      )
    )
    product.head

  :: Return an unbiased random U32 below the given limit, discarding the rare
  :: cases where we get a result from a biased zone of the output.
  ::
  :: This ensures that every integer in the range has an equal probability
  :: of occurring (at least, assuming a perfectly fair underlying generator).
  :: However, performance can degrade slightly due to discarding and retrying.
  ::
  :: To keep maximum performance at the cost of some possibility of bias,
  :: use the `u32_less_than` method instead, which never discards results.
  :fun ref unbiased_u32_less_than(limit U32) U32
    // See https://arxiv.org/pdf/1805.10941.pdf
    random = @
    product = random.u32.wide_multiply(limit)
    // Reject and try again if the tail happens to be in the zone of bias.
    // The loop will continue generating new numbers until we get a good sample.
    if (product.tail < limit) (
      threshold = limit.negate % limit
      while (product.tail < threshold) (
        product = random.u32.wide_multiply(limit)
      )
    )
    product.head

  :: Return a random USize below the given limit - in the range [0, limit).
  ::
  :: The results will be slightly biased (some numbers have one more sample
  :: in the pool than others), but the bias is very slight if the limit is
  :: much smaller than the maximum representable U32 value, and the bias is
  :: eliminated entirely if the given limit is a power of 2.
  ::
  :: If you need fully unbiased results, use the `unbiased_u32_less_than`
  :: method instead, which discards all samples from the biased zone.
  :fun ref usize_less_than(limit USize)
    if (USize.bit_width == 32) (
      @u32_less_than(limit.u32).usize
    |
      @u64_less_than(limit.u64).usize
    )

  :: Return an unbiased random USize below the given limit, discarding the rare
  :: cases where we get a result from a biased zone of the output.
  ::
  :: This ensures that every integer in the range has an equal probability
  :: of occurring (at least, assuming a perfectly fair underlying generator).
  :: However, performance can degrade slightly due to discarding and retrying.
  ::
  :: To keep maximum performance at the cost of some possibility of bias,
  :: use the `uSize_less_than` method instead, which never discards results.
  :fun ref unbiased_usize_less_than(limit USize) USize
    if (USize.bit_width == 32) (
      @unbiased_u32_less_than(limit.u32).usize
    |
      @unbiased_u64_less_than(limit.u64).usize
    )