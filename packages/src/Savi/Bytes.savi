:class val Bytes
  :is BinaryReadable
  :is Comparable(Bytes'box)
  :is Indexable(U8)

  :var _size USize
  :var _space USize
  :var _ptr CPointer(U8)'ref
  :new ref from_cpointer(@_ptr, @_size, @_space)
  :new iso iso_from_cpointer(@_ptr, @_size, @_space) // TODO: remove this and use recover instead?
  :new val val_from_cpointer(@_ptr, @_size, @_space) // TODO: remove this and use recover instead?
  :fun hash: @_ptr._hash(@_size)
  :fun size: @_size
  :fun space: @_space
  :fun cpointer(offset = 0) CPointer(U8)'tag: @_ptr._offset(offset)

  :fun ref _ptr_set_null
    @_space = 0
    @_ptr = CPointer(U8)._null

  :fun ref _ptr_allocate(space USize)
    @_space = space.next_pow2.max(space).max(8)
    @_ptr = CPointer(U8)._alloc(@_space)

  :fun ref _ptr_reallocate(space USize)
    @_space = space.next_pow2.max(space).max(8)
    @_ptr = @_ptr._realloc(@_space)

  :new ref (space USize = 0)
    @_size = 0
    if (space > 0) (@_ptr_allocate(space) | @_ptr_set_null)

  :new iso new_iso(space USize = 0) // TODO: use recover instead of this hack
    @_size = 0
    if (space > 0) (@_ptr_allocate(space) | @_ptr_set_null)

  :new val from_array(data Array(U8)'val)
    @_size = data.size
    @_space = data.space
    @_ptr = data.cpointer._unsafe

  :new val from_string(data String)
    @_size = data.size
    @_space = data.space
    @_ptr = data.cpointer._unsafe

  :fun val as_array: Array(U8).val_from_cpointer(@_ptr._unsafe, @_size, @_space)
  :fun val as_string: String.from_bytes(@)

  :fun "=="(other Bytes'box)
    (@_size == other._size) && (@_ptr._compare(other._ptr, @_size) == 0)

  :: Returns True if this Bytes starts with a substring equal to the other.
  :: Otherwise, returns False.
  :fun starts_with(other Bytes'box)
    (@_size >= other.size) && (@_ptr._compare(other._ptr, other.size) == 0)

  :: Returns True if this Bytes ends with a substring equal to the other.
  :: Otherwise, returns False.
  :fun ends_with(other Bytes'box)
    (@_size >= other.size) && (
      @_ptr._offset(@_size - other.size)._compare(other._ptr, other.size) == 0
    )

  :: Returns True if this Bytes at the given offset is equivalent to
  :: the given other Bytes at the given other_offset, for at least as long
  :: as the given number of bytes to be compared.
  :fun is_slice_equal(
    offset USize
    other (Bytes'box | String'box)
    other_offset USize
    num_bytes USize
  )
    (num_bytes <= (@size - offset))
    && (num_bytes <= (other.size - other_offset))
    && (
      ptr = @_ptr._offset(offset)
      other_ptr = other._ptr._offset(other_offset)
      ptr._compare(other_ptr, num_bytes) == 0
    )

  :fun is_empty:     @size == 0
  :fun is_not_empty: @size != 0

  :fun ref clear: @_size = 0, @

  :fun clone @'iso
    copy = @new_iso(@size)
    _ptr_tag CPointer(U8)'tag = @_ptr // TODO: this indirection shouldn't be needed
    copy._clone_from(_ptr_tag, @size)
    copy._size = @size
    --copy // TODO: auto-consume at end of the function?

  :fun ref _clone_from(other_ptr CPointer(U8), size USize)
    other_ptr._unsafe._copy_to(@_ptr, size)

  :fun includes(other): try (@offset_of!(other), True | False)

  :fun offset_of!(other Bytes'box, start_offset USize = 0)
    found Bool = False
    offset = start_offset
    other_first = other[0]! // cache here and error out if the other is empty
    while (!found && offset < @_size) (
      if (@_ptr._get_at(offset) == other_first) (
        found = (@_ptr._offset(offset)._compare(other._ptr, other._size) == 0)
      )
      offset = offset + 1
    )
    if !found error!
    offset - 1

  :: Returns true if the string is null-terminated and safe to pass to an FFI
  :: function that doesn't accept a size argument, expecting a null-terminator.
  ::
  :: This method checks that there is a null byte just after the final position
  :: of populated bytes in the string, but does not check for other null bytes
  :: which may be present earlier in the content of the string.
  ::
  :: Use the cstring method to get a null-terminated version of the string.

  :fun is_null_terminated: (@_space > @_size) && (@_ptr._get_at(@_size) == 0)

  :: Returns a CPointer to a null-terminated version of this string,
  :: copying the string if necessary to get a null-terminated pointer.
  ::
  :: Call the cpointer method instead when you don't need a null terminator
  :: (that is, when the FFI function you are calling has a size argument).

  :fun cstring CPointer(U8)
    ret CPointer(U8)'tag = @_ptr
    if @is_null_terminated (return ret)

    ptr = @_ptr._alloc(@_size + 1)
    @_ptr._copy_to(ptr._unsafe, @_size)
    ptr._assign_at(@_size, 0)
    ret = ptr // TODO: remove this type hint - it shouldn't be needed
    ret

  :: Ensure enough capacity is allocated for the given space, in bytes.
  :: The size (number of actual bytes present in the string) does not change.

  :fun ref reserve(space USize)
    if (@_space < space) @_ptr_reallocate(space)
    @

  :: Expand to the given size, filling the added space with unitialized memory.
  :: The given size will be silently truncated to the maximum space available
  :: within the current allocation if it is greater than the available space.
  :: To avoid truncation, call reserve at some point prior to this call.
  ::
  :: This method is intended to be called after an FFI-based operation which
  :: fills the underlying memory up to the given size, so that the bytes are
  :: actually already initialized before expanding size on the Pony side.
  :: Note that reserve should be called prior to such an FFI operation
  :: to ensure there is enough room in the allocation for the intended bytes.
  ::
  :: For security purposes, please ensure the added bytes are initialized
  :: prior to allowing any operation that can read from this memory.
  :: Otherwise data from previously garbage-collected objects may be seen.
  :: The name of this method is obnoxiously verbose as a kind of warning
  :: to the programmer to carefully scrutinize the way this method is used,
  :: and prefer other patterns of working wherever possible.
  ::
  :: However, please note that this method is at least safe enough to prevent
  :: expanding beyond the allocated space into territory of other allocations,
  :: so this method cannot violate memory safety in terms of address space.

  :fun ref resize_possibly_including_uninitialized_memory(size USize)
    @_size = size.min(@_space)
    @

  :fun "[]!"(index): @byte_at!(index)

  :fun byte_at!(index USize)
    if (@size <= index) error!
    @_ptr._get_at(index)

  :fun _offset_to_index(offset ISize) USize
    if (offset < 0) (offset.usize + @size | offset.usize)

  :: Return a shared portion of this string, covering `from` until `to`,
  :: with negative values in `from` and `to` representing indexes counting
  :: backward from the end of the string.
  ::
  :: Both the original and the new string are immutable, as they share memory.
  :: The operation does not allocate a new string pointer nor copy elements.

  :fun val trim(from ISize = 0, to = ISize.max_value)
    start = @_offset_to_index(from)
    finish = @_offset_to_index(to).min(@size)

    if (start < @_size && start < finish) (
      size = finish - start
      @val_from_cpointer(
        @_ptr._offset(start)
        size
        size
      )
    |
      @val_from_cpointer(@_ptr._null, 0, 0)
    )

  :fun ref trim_in_place(from ISize = 0, to = ISize.max_value)
    start = @_offset_to_index(from)
    finish = @_offset_to_index(to).min(@size)

    if (start < @_size && start < finish) (
      @_size = finish - start
      @_ptr = @_ptr._offset(start)
    |
      @_size = 0
    )
    @

  :fun ref push(byte U8)
    @reserve(@_size + 1)
    @_ptr._assign_at(@_size, byte)
    @_size += 1
    @

  :fun each_with_index(
    from USize = 0
    to = USize.max_value
    stride USize = 1
  )
    to = @_size.min(to)
    index = from
    while (index < to) (
      yield (@_ptr._get_at(index), index)
      index += stride
    )
    None

  :fun reverse_each_with_index(
    from = USize.max_value
    to USize = 0
    stride USize = 1
  )
    try (
      index USize = @_size.min(from) -! 1
      while (index >= to) (
        yield (@_ptr._get_at(index), index)
        index = index -! stride
      )
    )
    None

  :fun ref "<<"(other Bytes'box)
    if (other._size > 0) (
      new_size = @_size + other._size
      @reserve(new_size)
      if other.is_null_terminated (
        other._ptr._copy_to(@_ptr._offset(@_size), other.size + 1)
      |
        other._ptr._copy_to(@_ptr._offset(@_size), other.size)
      )
      @_size = new_size
    )
    @

  :fun ref concat_byte_slice(
    other Bytes'box
    from ISize = 0
    to = ISize.max_value
  )
    start = other._offset_to_index(from)
    finish = other._offset_to_index(to).min(other.size)

    if (start < other._size && start < finish) (
      size = finish - start
      other._ptr._offset(start)._copy_to(@_ptr._offset(@_size), size)
      @_size += size
    )

  :fun ref push_utf8(value U32)
    _UTF8Encoder.encode(value) -> (byte_count, byte_1, byte_2, byte_3, byte_4 |
      i = @_size
      @_size = @_size + byte_count
      @reserve(@_size)
      @_ptr._assign_at(i, byte_1)
      if (byte_count > 1) (
        @_ptr._assign_at(i + 1, byte_2)
        if (byte_count > 2) (
          @_ptr._assign_at(i + 2, byte_3)
          if (byte_count > 3) (
            @_ptr._assign_at(i + 3, byte_4)
          )
        )
      )
    )
    @

  :: Return a new string consisting of the original string copied `n` times.
  :fun "*"(times USize)
    if (times > 0) (
      ptr = @_ptr._alloc(@size * times)
      size USize = 0

      while (times > 0) (times -= 1
        @_ptr._copy_to(ptr._offset(size), @size)
        size += @size
      )

      @val_from_cpointer(ptr, size, size)
    |
      @val_from_cpointer(@_ptr._null, 0, 0)
    )

  :fun val split(split_byte U8) // TODO: a byte shouldn't be the only thing we can split by...
    result Array(Bytes) = []
    @each_split(split_byte) -> (s | result << s)
    result

  :fun val each_split(split_byte U8) // TODO: a byte shouldn't be the only thing we can split by...
    :yields Bytes
    finish USize = 0
    start = finish
    while (finish < @_size) (
      byte = @_ptr._get_at(finish)
      if (byte == split_byte) (
        yield @val_from_cpointer(
          @_ptr._offset(start)
          finish - start
          @_space - start
        )
        finish = finish + 1
        start = finish
      |
        finish = finish + 1
      )
    )
    yield @val_from_cpointer(
      @_ptr._offset(start)
      finish - start
      @_space - start
    )
    @

  :fun "<"(other Bytes'box)
    min_size = @size.min(other.size)
    index USize = 0
    result = False
    try (
      while (index < min_size) (
        a = @_ptr._get_at(index)
        b = other._ptr._get_at(index)
        case (
        | a < b | result = True,  error! // TODO: use break or early return instead of error
        | a > b | result = False, error! // TODO: use break or early return instead of error
        )
        index = index + 1
      )
      result = @size < other.size
    )
    result

  :fun "<="(other Bytes'box)
    min_size = @size.min(other.size)
    index USize = 0
    result = False
    try (
      while (index < min_size) (
        a = @_ptr._get_at(index)
        b = other._ptr._get_at(index)
        case (
        | a < b | result = True,  error! // TODO: use break or early return instead of error
        | a > b | result = False, error! // TODO: use break or early return instead of error
        )
        index = index + 1
      )
      result = @size <= other.size
    )
    result

  :fun slice(from USize, to USize = 0) Bytes'iso
    if (to == 0 || to > @_size) (
      to = @_size
    )
    if (from < to) (
      new_size = to - from
      new_alloc = new_size.next_pow2
      new_ptr = @_ptr._alloc(new_alloc)
      @_ptr._offset(from)._unsafe._copy_to(new_ptr, new_size)
      @iso_from_cpointer(new_ptr, new_size, new_alloc)
    |
      Bytes.new_iso
    )

  :: Discard all bytes after the given offset.
  :fun ref truncate(offset USize)
    offset = offset.min(@_size)
    @_size = offset
    @

  :: Discard all bytes to the left of the given offset.
  :fun ref truncate_left(offset USize)
    offset = offset.min(@_size)
    @_ptr = @_ptr._offset(offset)
    @_size -= offset
    @_space -= offset
    @

  :: Split this byte buffer at the given offset, leaving the right side here
  :: but chopping the left side off to return it as an isolated buffer.
  ::
  :: This method does not copy, and the existing allocation will be shared,
  :: with the two buffers occupying adjacent memory in the same allocation.
  ::
  :: Both buffers remain mutable because they cannot access each other's bytes.
  ::
  :: If the left side later expands its size, it will then reallocate and copy,
  :: because the right side has retained claim over the right-adjacent memory.
  :fun ref chop_left(offset USize) Bytes'iso
    offset = offset.min(@_size)
    chopped = Bytes.iso_from_cpointer(@_ptr, offset, offset)
    @_ptr = @_ptr._offset(offset)
    @_size -= offset
    @_space -= offset
    --chopped

  :: Split this byte buffer at the given offset, leaving the left side here
  :: but chopping the right side off to return it as an isolated buffer.
  ::
  :: This method does not copy, and the existing allocation will be shared,
  :: with the two buffers occupying adjacent memory in the same allocation.
  ::
  :: Both buffers remain mutable because they cannot access each other's bytes.
  ::
  :: If the left side later expands its size, it will then reallocate and copy,
  :: because the right side has retained claim over the right-adjacent memory.
  :fun ref chop_right(offset USize) Bytes'iso
    offset = offset.min(@_size)
    chopped = Bytes.iso_from_cpointer(
      @_ptr._offset(offset)
      @_size - offset
      @_space - offset
    )
    @_size = offset
    @_space = offset
    --chopped

  :fun read_byte!(offset USize) U8
    @byte_at!(offset)

  :: Read a U16 from the bytes at the given offset, with native byte order.
  :: This is not suitable for protocols using a platform-independent byte order.
  :: Raises an error if there aren't enough bytes at that offset to fill a U16.
  :fun read_native_u16!(offset USize) U16
    if ((offset + U16.byte_width.usize) > @_size) error!
    CPointer(U16).from_usize(@_ptr._offset(offset).usize)._unsafe._get_at(0)

  :: Read a U32 from the bytes at the given offset, with native byte order.
  :: This is not suitable for protocols using a platform-independent byte order.
  :: Raises an error if there aren't enough bytes at that offset to fill a U32.
  :fun read_native_u32!(offset USize) U32
    if ((offset + U32.byte_width.usize) > @_size) error!
    CPointer(U32).from_usize(@_ptr._offset(offset).usize)._unsafe._get_at(0)

  :: Write a U32 as bytes starting at the given offset, in native byte order.
  :: This is not suitable for protocols using a platform-independent byte order.
  :: Raises an error if there aren't enough bytes at that offset to fit a U32.
  :: Use push_native_u32 instead if writing past the end is needed.
  :fun ref write_native_u32!(offset USize, number U32)
    if ((offset + U32.byte_width.usize) > @_size) error!
    CPointer(U32).from_usize(@_ptr._offset(offset).usize)._unsafe
      ._assign_at(0, number)
    @

  :: Add a U32 as bytes onto the end of the buffer, in native byte order.
  :: This is not suitable for protocols using a platform-independent byte order.
  :fun ref push_native_u32(number U32)
    @reserve(@_size + U32.byte_width.usize)
    CPointer(U32).from_usize(@_ptr._offset(@_size).usize)._unsafe
      ._assign_at(0, number)
    @_size += U32.byte_width.usize
    @

  :: Read a U64 from the bytes at the given offset, with native byte order.
  :: This is not suitable for protocols using a platform-independent byte order.
  :: Raises an error if there aren't enough bytes at that offset to fill a U64.
  :fun read_native_u64!(offset USize) U64
    if ((offset + U64.byte_width.usize) > @_size) error!
    CPointer(U64).from_usize(@_ptr._offset(offset).usize)._unsafe._get_at(0)

  :: Write a U64 as bytes starting at the given offset, in native byte order.
  :: This is not suitable for protocols using a platform-independent byte order.
  :: Raises an error if there aren't enough bytes at that offset to fit a U64.
  :: Use push_native_u64 instead if writing past the end is needed.
  :fun ref write_native_u64!(offset USize, number U64)
    if ((offset + U64.byte_width.usize) > @_size) error!
    CPointer(U64).from_usize(@_ptr._offset(offset).usize)._unsafe
      ._assign_at(0, number)
    @

  :: Add a U64 as bytes onto the end of the buffer, in native byte order.
  :: This is not suitable for protocols using a platform-independent byte order.
  :fun ref push_native_u64(number U64)
    @reserve(@_size + U64.byte_width.usize)
    CPointer(U64).from_usize(@_ptr._offset(@_size).usize)._unsafe
      ._assign_at(0, number)
    @_size += U64.byte_width.usize
    @

  :fun non join(others Array(Bytes), separator = b"") Bytes'iso
    res = Bytes.new_iso
    others.each_with_index -> (other, index |
      res << other
      if (index != others.size - 1) (res << separator)
    )
    --res
