:trait val Numeric
  :const bit_width U8: 64
  :const is_signed Bool: False
  :const is_floating_point Bool: False
  // TODO: arithmetic method traits with type parameters on Numeric[A] type

  :fun non byte_width: @bit_width / 8
  :fun u8 U8: compiler intrinsic
  :fun u16 U16: compiler intrinsic
  :fun u32 U32: compiler intrinsic
  :fun u64 U64: compiler intrinsic
  :fun usize USize: compiler intrinsic
  :fun i8 I8: compiler intrinsic
  :fun i16 I16: compiler intrinsic
  :fun i32 I32: compiler intrinsic
  :fun i64 I64: compiler intrinsic
  :fun isize ISize: compiler intrinsic
  :fun f32 F32: compiler intrinsic
  :fun f64 F64: compiler intrinsic

:trait val NumericMethods // TODO: don't use :trait for this... `common`?
  :const bit_width U8
  :const is_signed Bool
  :const is_floating_point Bool

  :fun non "[]"(value @'val) @'val: value
  :fun non zero @'val: compiler intrinsic

  :fun "=="(other @'box) Bool: compiler intrinsic
  :fun "!="(other @'box) Bool: compiler intrinsic
  :fun "<"(other @'box) Bool: compiler intrinsic
  :fun "<="(other @'box) Bool: compiler intrinsic
  :fun ">"(other @'box) Bool: compiler intrinsic
  :fun ">="(other @'box) Bool: compiler intrinsic

  :fun val "+"(other @) @: compiler intrinsic
  :fun val "-"(other @) @: compiler intrinsic
  :fun val "*"(other @) @: compiler intrinsic
  :fun val "/"(other @) @: compiler intrinsic
  :fun val "%"(other @) @: compiler intrinsic

  :fun val negate: @zero - @
  :fun val min(other @) @: if (@ < other) (@ | other)
  :fun val max(other @) @: if (@ > other) (@ | other)
  :fun val abs: if (@is_signed && @ < @zero) (@zero - @ | @)

:trait val IntegerMethods // TODO: don't use :trait for this... `common`?
  :const bit_width U8 // TODO: dedup with Numeric
  :const is_signed Bool // TODO: dedup with Numeric
  :fun u64 U64: compiler intrinsic // TODO: dedup with Numeric
  :fun usize USize: compiler intrinsic // TODO: dedup with Numeric

  :fun non min_value @'val: compiler intrinsic
  :fun non max_value @'val: compiler intrinsic

  // These arithmetic methods raise an error in case of overflow/underflow.
  // This can potentially be more efficient in some cases than comparing
  // the two operands first prior to applying the arithmetic operation.
  :fun val "+!"(other @) @: compiler intrinsic
  :fun val "-!"(other @) @: compiler intrinsic
  :fun val "*!"(other @) @: compiler intrinsic

  :fun val bit_and(other @) @: compiler intrinsic
  :fun val bit_or(other @) @: compiler intrinsic
  :fun val bit_xor(other @) @: compiler intrinsic
  :fun val bit_shl(bits U8) @: compiler intrinsic
  :fun val bit_shr(bits U8) @: compiler intrinsic
  :fun val invert @: compiler intrinsic
  :fun val reverse_bits @: compiler intrinsic
  :fun val swap_bytes @: compiler intrinsic
  :fun val leading_zeros U8: compiler intrinsic
  :fun val trailing_zeros U8: compiler intrinsic
  :fun val count_ones U8: compiler intrinsic
  :fun val count_zeros U8: @invert.count_ones
  :fun val next_pow2 @: compiler intrinsic

  :: Multiply avoiding overflow, returning a pair where the first element is
  :: the most significant bits, and the second is the least significant bits
  :: (which is the same modulo max size minus one value that would be returned
  :: from the overflow semantics of normal integer multiplication)
  :fun val wide_multiply(other @) Pair(@, @): compiler intrinsic

  :: Rotate the given number of bits to the "left" (toward most significant).
  :: Bits that are shifted off the left side are copied to the right side.
  :fun val bit_rotl(bits U8) @
    @bit_shl(bits).bit_or(
      @bit_shr(@bit_width - bits)
    )

  :: Rotate the given number of bits to the "right" (toward least significant).
  :: Bits that are shifted off the right side are copied to the left side.
  :fun val bit_rotr(bits U8) @
    @bit_shr(bits).bit_or(
      @bit_shl(@bit_width - bits)
    )

  :fun val native_to_be @
    if (Platform.big_endian) (@ | @swap_bytes)

  :fun val native_to_le @
    if (Platform.little_endian) (@ | @swap_bytes)

  :fun val be_to_native @
    if (Platform.big_endian) (@ | @swap_bytes)

  :fun val le_to_native @
    if (Platform.little_endian) (@ | @swap_bytes)

  :fun hash USize
    if (USize.bit_width == 32) (
      x = @usize
      x = x.invert + x.bit_shl(15)
      x = x.bit_xor(x.bit_shr(12))
      x = x + x.bit_shl(2)
      x = x.bit_xor(x.bit_shr(4))
      x = (x + x.bit_shl(3)) + x.bit_shl(11)
      x = x.bit_xor(x.bit_shr(16))
      x
    |
      @hash64.usize
    )

  :fun hash64 U64
    x = @u64
    x = x.invert + x.bit_shl(21)
    x = x.bit_xor(x.bit_shr(24))
    x = (x + x.bit_shl(3)) + x.bit_shl(8)
    x = x.bit_xor(x.bit_shr(14))
    x = (x + x.bit_shl(2)) + x.bit_shl(4)
    x = x.bit_xor(x.bit_shr(28))
    x = x + x.bit_shl(31)
    x

:trait val Float32Methods
  :fun non from_bits(bits U32) @'val: compiler intrinsic
  :fun val bits U32: compiler intrinsic

  // TODO: These should be :const (should they be capitalized)?
  :fun non nan:          @from_bits(0x7FC0_0000)
  :fun non infinity:     @from_bits(0x7F80_0000)
  :fun non neg_infinity: @from_bits(0xFF80_0000)
  :fun non max_value:    @from_bits(0x7F7F_FFFF)
  :fun non min_value:    @from_bits(0xFF7F_FFFF)

  :: The number of bits representing the exponent.
  :fun non exp_bit_width U8: 8

  :: The number of bits representing the significand (a.k.a. mantissa).
  :: Note that this does not include the implicit/hidden leading bit,
  :: because that implicit bit is not actually in the memory representation.
  :fun non sig_bit_width U8: 23

  :: The difference between 1.0 and the next larger representable number.
  :: This is the unit of least precision in the semi-open range [1.0, 2.0).
  :fun non epsilon: @from_bits(0x3400_0000) // 2 ** -23

  :: The difference between 1.0 and the next smaller representable number.
  :: This is the unit of least precision in the semi-open range [0.5, 1.0).
  :fun non half_epsilon: @from_bits(0x33800000) // 2 ** -24

  :fun val log @: compiler intrinsic
  :fun val log2 @: compiler intrinsic
  :fun val log10 @: compiler intrinsic
  :fun val pow(exp @) @: compiler intrinsic

  :fun val is_positive: @bits.bit_and(0x8000_0000) == 0 // sign bit
  :fun val is_negative: @bits.bit_and(0x8000_0000) != 0 // sign bit

  // Return true if the number is NaN.
  :fun val is_nan
    @bits.bit_and(0x7F80_0000) == 0x7F80_0000 && // exponent
    @bits.bit_and(0x007F_FFFF) != 0              // mantissa

  // Return true if the number is positive or negative infinity.
  :fun val is_infinite
    @bits.bit_and(0x7F80_0000) == 0x7F80_0000 && // exponent
    @bits.bit_and(0x007F_FFFF) == 0              // mantissa

  // Return true if the number is neither NaN nor positive or negative infinity.
  :fun val is_finite
    @bits.bit_and(0x7F80_0000) != 0x7F80_0000 // exponent

:trait val Float64Methods
  :fun non from_bits(bits U64) @'val: compiler intrinsic
  :fun val bits U64: compiler intrinsic

  // TODO: These should be :const (should they be capitalized)?
  :fun non nan:          @from_bits(0x7FF8_0000_0000_0000)
  :fun non infinity:     @from_bits(0x7FF0_0000_0000_0000)
  :fun non neg_infinity: @from_bits(0xFFF0_0000_0000_0000)
  :fun non max_value:    @from_bits(0x7FEF_FFFF_FFFF_FFFF)
  :fun non min_value:    @from_bits(0xFFEF_FFFF_FFFF_FFFF)

  :: The number of bits representing the exponent.
  :fun non exp_bit_width U8: 11

  :: The number of bits representing the significand (a.k.a. mantissa).
  :: Note that this does not include the implicit/hidden leading bit,
  :: because that implicit bit is not actually in the memory representation.
  :fun non sig_bit_width U8: 52

  :: The difference between 1.0 and the next larger representable number.
  :: This is the unit of least precision in the semi-open range [1.0, 2.0).
  :fun non epsilon: @from_bits(0x3cb0000000000000) // 2 ** -52

  :: The difference between 1.0 and the next smaller representable number.
  :: This is the unit of least precision in the semi-open range [0.5, 1.0).
  :fun non half_epsilon: @from_bits(0x3ca0000000000000) // 2 ** -53

  :fun val log @: compiler intrinsic
  :fun val log2 @: compiler intrinsic
  :fun val log10 @: compiler intrinsic
  :fun val pow(y @) @: compiler intrinsic

  :fun val is_positive: @bits.bit_and(0x8000_0000_0000_0000) == 0 // sign bit
  :fun val is_negative: @bits.bit_and(0x8000_0000_0000_0000) != 0 // sign bit

  // Return true if the number is NaN.
  :fun val is_nan
    @bits.bit_and(0x7FF0_0000_0000_0000) == 0x7FF0_0000_0000_0000 && // exponent
    @bits.bit_and(0x000F_FFFF_FFFF_FFFF) != 0                        // mantissa

  // Return true if the number is positive or negative infinity.
  :fun val is_infinite
    @bits.bit_and(0x7FF0_0000_0000_0000) == 0x7FF0_0000_0000_0000 && // exponent
    @bits.bit_and(0x000F_FFFF_FFFF_FFFF) == 0                        // mantissa

  // Return true if the number is neither NaN nor positive or negative infinity.
  :fun val is_finite
    @bits.bit_and(0x7FF0_0000_0000_0000) != 0x7FF0_0000_0000_0000 // exponent

:numeric U8
  :const bit_width U8: 8

:numeric U16
  :const bit_width U8: 16

:numeric U32
  :const bit_width U8: 32

:numeric U64
  :const bit_width U8: 64

:numeric USize
  :const bit_width U8: compiler intrinsic

:numeric I8
  :const bit_width U8: 8
  :const is_signed: True

:numeric I16
  :const bit_width U8: 16
  :const is_signed: True

:numeric I32
  :const bit_width U8: 32
  :const is_signed: True

:numeric I64
  :const bit_width U8: 64
  :const is_signed: True

:numeric ISize
  :const bit_width U8: compiler intrinsic
  :const is_signed: True

:numeric F32
  :const bit_width U8: 32
  :const is_signed: True
  :const is_floating_point: True

:numeric F64
  :const bit_width U8: 64
  :const is_signed: True
  :const is_floating_point: True
