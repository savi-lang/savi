:class val String
  :is Comparable(String'box)

  :var _size USize
  :var _space USize
  :var _ptr CPointer(U8)'ref
  :new ref from_cpointer(@_ptr, @_size, @_space)
  :new iso iso_from_cpointer(@_ptr, @_size, @_space) // TODO: remove this and use recover instead?
  :new val val_from_cpointer(@_ptr, @_size, @_space) // TODO: remove this and use recover instead?
  :fun cpointer CPointer(U8): @_ptr
  :fun hash: @_ptr._hash(@_size)
  :fun size: @_size
  :fun space: @_space

  :fun ref _ptr_set_null
    @_space = 0
    @_ptr = CPointer(U8)._null

  :fun ref _ptr_allocate(space USize)
    @_space = space.next_pow2.max(space).max(8)
    @_ptr = CPointer(U8)._alloc(@_space)

  :fun ref _ptr_reallocate(space USize)
    @_space = space.next_pow2.max(space).max(8)
    @_ptr = @_ptr._realloc(@_space)

  :new ref (space USize = 0)
    @_size = 0
    if (space > 0) (@_ptr_allocate(space) | @_ptr_set_null)

  :new iso new_iso(space USize = 0) // TODO: use recover instead of this hack
    @_size = 0
    if (space > 0) (@_ptr_allocate(space) | @_ptr_set_null)

  :new val from_array(data Array(U8)'val)
    @_size = data.size
    @_space = data.space
    @_ptr = data.cpointer._unsafe

  :new val from_bytes(data Bytes)
    @_size = data.size
    @_space = data.space
    @_ptr = data.cpointer._unsafe

  :fun val as_array: Array(U8).val_from_cpointer(@_ptr._unsafe, @_size, @_space)
  :fun val as_bytes: Bytes.from_string(@)

  :fun "=="(other String'box)
    (@_size == other._size) && (@_ptr._compare(other._ptr, @_size) == 0)

  :: Returns True if this String starts with a substring equal to the other.
  :: Otherwise, returns False.
  :fun starts_with(other String'box)
    (@_size >= other.size) && (@_ptr._compare(other._ptr, other.size) == 0)

  :: Returns True if this String ends with a substring equal to the other.
  :: Otherwise, returns False.
  :fun ends_with(other String'box)
    (@_size >= other.size) && (
      @_ptr._offset(@_size - other.size)._compare(other._ptr, other.size) == 0
    )

  :: Returns True if this String at the given offset is equivalent to
  :: the given other String at the given other_offset, for at least as long
  :: as the given number of bytes to be compared.
  :fun is_byte_slice_equal(
    offset USize
    other Bytes'box
    other_offset USize
    num_bytes USize
  )
    (num_bytes <= (@size - offset))
    && (num_bytes <= (other.size - other_offset))
    && (
      ptr = @_ptr._offset(offset)
      other_ptr = other._ptr._offset(other_offset)
      ptr._compare(other_ptr, num_bytes) == 0
    )

  :fun is_empty:     @size == 0
  :fun is_not_empty: @size != 0

  :fun clone @'iso
    copy = @new_iso(@size)
    _ptr_tag CPointer(U8)'tag = @_ptr // TODO: this indirection shouldn't be needed
    copy._clone_from(_ptr_tag, @size)
    copy._size = @size
    --copy // TODO: auto-consume at end of the function?

  :fun ref _clone_from(other_ptr CPointer(U8), size USize)
    other_ptr._unsafe._copy_to(@_ptr, size)

  :fun includes(other): try (@offset_of!(other), True | False)

  :fun offset_of!(other String'box, start_offset USize = 0)
    found Bool = False
    offset = start_offset
    other_first = other.byte_at!(0) // cache and error out if the other is empty
    while (!found && offset < @_size) (
      if (@_ptr._get_at(offset) == other_first) (
        found = (@_ptr._offset(offset)._compare(other._ptr, other._size) == 0)
      )
      offset = offset + 1
    )
    if !found error!
    offset - 1

  :: Returns true if the string is null-terminated and safe to pass to an FFI
  :: function that doesn't accept a size argument, expecting a null-terminator.
  ::
  :: This method checks that there is a null byte just after the final position
  :: of populated bytes in the string, but does not check for other null bytes
  :: which may be present earlier in the content of the string.
  ::
  :: Use the cstring method to get a null-terminated version of the string.

  :fun is_null_terminated: (@_space > @_size) && (@_ptr._get_at(@_size) == 0)

  :: Returns a CPointer to a null-terminated version of this string,
  :: copying the string if necessary to get a null-terminated pointer.
  ::
  :: Call the cpointer method instead when you don't need a null terminator
  :: (that is, when the FFI function you are calling has a size argument).

  :fun cstring CPointer(U8)
    ret CPointer(U8)'tag = @_ptr
    if @is_null_terminated (return ret)

    ptr = @_ptr._alloc(@_size + 1)
    @_ptr._copy_to(ptr._unsafe, @_size)
    ptr._assign_at(@_size, 0)
    ret = ptr // TODO: remove this type hint - it shouldn't be needed
    ret

  :: Ensure enough capacity is allocated for the given space, in bytes.
  :: The size (number of actual bytes present in the string) does not change.

  :fun ref reserve(space USize)
    if (@_space < space) @_ptr_reallocate(space)
    @

  :fun byte_at!(index USize) U8
    if (@size <= index) error!
    @_ptr._get_at(index)

  :fun "[]!"(index): @char_at!(index)

  :: Return the UTF8-encoded Unicode codepoint starting at the given byte index.
  :: Raises an error if the given index is out of bounds.
  :: Returns 0xFFFD (Unicode "Replacement Character") if the given byte index
  :: is not pointing to the start of a well-formed UTF-8-encoded codepoint.
  :fun char_at!(index USize) U32
    if (@size <= index) error!

    codepoint U32 = 0
    state U8 = 0

    early_stop = @each_byte_until(index, index + 4) -> (byte |
      codepoint = UTF8Decoding.read_byte_into_codepoint(byte, state, codepoint)
      state = UTF8Decoding.next_state(byte, state)

      // Stop iterating when we have accepted an entire codepoint.
      state == 0
    )

    if early_stop (codepoint | 0xFFFD)

  :fun _offset_to_index(offset ISize) USize
    if (offset < 0) (offset.usize + @size | offset.usize)

  :: Return a shared portion of this string, covering `from` until `to`,
  :: with negative values in `from` and `to` representing indexes counting
  :: backward from the end of the string.
  ::
  :: Both the original and the new string are immutable, as they share memory.
  :: The operation does not allocate a new string pointer nor copy elements.

  :fun val trim(from ISize = 0, to = ISize.max_value)
    start = @_offset_to_index(from)
    finish = @_offset_to_index(to).min(@size)

    if (start < @_size && start < finish) (
      @_slice(start, finish)
    |
      @val_from_cpointer(@_ptr._null, 0, 0)
    )

  :fun ref trim_in_place(from ISize = 0, to = ISize.max_value)
    start = @_offset_to_index(from)
    finish = @_offset_to_index(to).min(@size)

    if (start < @_size && start < finish) (
      @_size = finish - start
      @_ptr = @_ptr._offset(start)
    |
      @_size = 0
    )
    @

  :fun ref push_byte(byte U8)
    @reserve(@_size + 1)
    @_ptr._assign_at(@_size, byte)
    @_size += 1
    @

  :fun each_byte(from USize = 0, to = USize.max_value, stride USize = 1)
    to = @_size.min(to)
    index = from
    while (index < to) (
      yield @_ptr._get_at(index)
      index = index + stride
    )
    @

  :fun each_byte_until(from USize = 0, to = USize.max_value, stride USize = 1)
    :yields for Bool
    early_stop = False
    to = @_size.min(to)
    index = from
    while (index < to && !early_stop) (
      early_stop = yield @_ptr._get_at(index)
      index += stride
    )
    early_stop

  :fun each_byte_with_index(from USize = 0, to = USize.max_value, stride USize = 1)
    to = @_size.min(to)
    index = from
    while (index < to) (
      yield (@_ptr._get_at(index), index)
      index = index + stride
    )
    @

  :: Starting from the given byte index and continuing up to the given end,
  :: yield each UTF8-encoded Unicode codepoint, its starting byte index,
  :: and its byte width (the number of bytes that were used to encode it).
  ::
  :: When multibyte codepoints are observed, the yielded byte index will skip
  :: some sequential numbers and the yielded byte width will be greater than 1.
  ::
  :: When invalid UTF8 encoded bytes are observed, (whether because the String
  :: is invalid UTF8, or the starting byte index was pointing to the middle
  :: of a multibyte codepoint rather than its start), the value 0xFFFD,
  :: known as a Unicode "Replacement character" will be yielded for those bytes.
  ::
  :: If the given byte range is outside of the bounds of the actual byte buffer,
  :: then the start and/or end will be silently truncated to the nearest bound.
  ::
  :: If no byte range parameters are given, the entire String will be read.
  :fun each_char_with_index_and_width(from USize = 0, to = USize.max_value)
    codepoint U32 = 0
    state U8 = 0
    to = @_size.min(to)
    index = from
    start_index = index

    while (index < to) (
      byte = @_ptr._get_at(index)
      codepoint = UTF8Decoding.read_byte_into_codepoint(byte, state, codepoint)
      state = UTF8Decoding.next_state(byte, state)
      index = index + 1

      case (
      | state == 0 |
        yield (codepoint, start_index, index - start_index)
        start_index = index
      | UTF8Decoding.is_error_state(state) |
        yield (U32[0xFFFD], start_index, index - start_index)
        start_index = index
        state = 0
      )
    )
    @

  :fun ref "<<"(other String'box)
    if (other._size > 0) (
      new_size = @_size + other._size
      @reserve(new_size)
      if other.is_null_terminated (
        other._ptr._copy_to(@_ptr._offset(@_size), other.size + 1)
      |
        other._ptr._copy_to(@_ptr._offset(@_size), other.size)
      )
      @_size = new_size
    )
    @

  :fun ref concat_byte_slice(
    other String'box
    from ISize = 0
    to = ISize.max_value
  )
    start = other._offset_to_index(from)
    finish = other._offset_to_index(to).min(other.size)

    if (start < other._size && start < finish) (
      size = finish - start
      other._ptr._offset(start)._copy_to(@_ptr._offset(@_size), size)
      @_size += size
    )

  :fun ref push_utf8(value U32)
    _UTF8Encoder.encode(value) -> (byte_count, byte_1, byte_2, byte_3, byte_4 |
      i = @_size
      @_size = @_size + byte_count
      @reserve(@_size)
      @_ptr._assign_at(i, byte_1)
      if (byte_count > 1) (
        @_ptr._assign_at(i + 1, byte_2)
        if (byte_count > 2) (
          @_ptr._assign_at(i + 2, byte_3)
          if (byte_count > 3) (
            @_ptr._assign_at(i + 3, byte_4)
          )
        )
      )
    )
    @

  :: Return a new string consisting of the original string copied `n` times.
  :fun "*"(times USize)
    if (times > 0) (
      ptr = @_ptr._alloc(@size * times)
      size USize = 0

      while (times > 0) (times -= 1
        @_ptr._copy_to(ptr._offset(size), @size)
        size += @size
      )

      @val_from_cpointer(ptr, size, size)
    |
      @val_from_cpointer(@_ptr._null, 0, 0)
    )

  :fun val split(split_byte U8) // TODO: a byte shouldn't be the only thing we can split by...
    result Array(String) = []
    @each_split(split_byte) -> (s | result << s)
    result

  :fun val each_split(split_byte U8) // TODO: a byte shouldn't be the only thing we can split by...
    :yields String
    start USize = 0
    while (start < @_size) (
      try (
        split_pos = @_index_of!(split_byte, start)
        yield @_slice(start, split_pos)
        start = split_pos + 1
      |
        yield @_slice(start, @_size)
        break
      )
    )
    @

  :fun val split2!(split_byte U8) Pair(String)
    pos = @_index_of!(split_byte)
    Pair(String).new(@_slice(0, pos), @_slice(pos + 1, @_size))

  :: Returns the integer index of the first occurence of the given character `char`.
  :fun val _index_of!(char U8, offset USize = 0) USize
    idx = offset
    while (idx < @_size) (
      return idx if (@_ptr._get_at(idx) == char)
      idx += 1
    )
    error!

  :fun val _slice(start USize, finish USize)
    size = finish - start
    @val_from_cpointer(@_ptr._offset(start), size, size)

  :fun "<"(other String'box)
    min_size = @size.min(other.size)
    index USize = 0
    result = False
    try (
      while (index < min_size) (
        a = @_ptr._get_at(index)
        b = other._ptr._get_at(index)
        case (
        | a < b | result = True,  error! // TODO: use break or early return instead of error
        | a > b | result = False, error! // TODO: use break or early return instead of error
        )
        index = index + 1
      )
      result = @size < other.size
    )
    result

  :fun "<="(other String'box)
    min_size = @size.min(other.size)
    index USize = 0
    result = False
    try (
      while (index < min_size) (
        a = @_ptr._get_at(index)
        b = other._ptr._get_at(index)
        case (
        | a < b | result = True,  error! // TODO: use break or early return instead of error
        | a > b | result = False, error! // TODO: use break or early return instead of error
        )
        index = index + 1
      )
      result = @size <= other.size
    )
    result

  :fun parse_i64! // TODO: Use something like Crystal's Char::Reader instead?
    output I64 = 0
    possible_negation I64 = 1
    @each_byte_with_index -> (byte, index |
      case (
      | byte == '+' && index == 0 | // do nothing
      | byte == '-' && index == 0 | possible_negation = -1
      | byte >= '0' && byte <= '9' | output = output * 10 + (byte - '0').i64
      | error!
      )
    )
    output * possible_negation

  :fun substring(from USize, to USize = 0) String'iso
    if (to == 0 || to > @_size) (
      to = @_size
    )
    if (from < to) (
      new_size = to - from
      new_alloc = new_size.next_pow2
      new_ptr = @_ptr._alloc(new_alloc)
      @_ptr._offset(from)._unsafe._copy_to(new_ptr, new_size)
      @iso_from_cpointer(new_ptr, new_size, new_alloc)
    |
      String.new_iso
    )

  :fun non join(others Array(String), separator = "") String'iso
    res = String.new_iso
    others.each_with_index -> (other, index |
      res << other
      if (index != others.size - 1) (res << separator)
    )
    --res

:: Encode the code point into UTF-8. It returns a tuple with the size of the
:: encoded data and then the data.
:module _UTF8Encoder
  :fun encode(value U32)
    :yields (USize, U8, U8, U8, U8)
    case value < (
    | 0x80 |
      yield (1, value.u8, 0, 0, 0)
    | 0x800 |
      yield (2
        value.bit_shr(6).bit_or(0xC0).u8
        value.bit_and(0x3F).bit_or(0x80).u8
        0
        0
      )
    | 0xD800 |
      yield (3
        value.bit_shr(12).bit_or(0xE0).u8
        value.bit_shr(6).bit_and(0x3F).bit_or(0x80).u8
        value.bit_and(0x3F).bit_or(0x80).u8
        0
      )
    | 0xE000 |
      // UTF-16 surrogate pairs are not allowed.
      yield (3, 0xEF, 0xBF, 0xBD, 0)
    | 0x10000 |
      yield (3
        value.bit_shr(12).bit_or(0xE0).u8
        value.bit_shr(6).bit_and(0x3F).bit_or(0x80).u8
        value.bit_and(0x3F).bit_or(0x80).u8
        0
      )
    | 0x110000 |
      yield (4
        value.bit_shr(18).bit_or(0xF0).u8
        value.bit_shr(12).bit_and(0x3F).bit_or(0x80).u8
        value.bit_shr(6).bit_and(0x3F).bit_or(0x80).u8
        value.bit_and(0x3F).bit_or(0x80).u8
      )
    |
      // Code points beyond 0x10FFFF are not allowed.
      yield (3, 0xEF, 0xBF, 0xBD, 0)
    )
