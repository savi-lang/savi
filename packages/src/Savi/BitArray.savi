:class BitArray
  :copies Indexable(Bool) // TODO: should be `:is` instead of `:copies`

  :var _size USize
  :var _space USize
  :var _ptr CPointer(U64)'ref

  :fun _u8_space: @_space.bit_shr(3) // convert from bit space to U8 space
  :fun _u64_space: @_space.bit_shr(6) // convert from bit space to U64 space

  :fun ref _ptr_set_null
    @_space = 0
    @_ptr = CPointer(U64)._null

  :fun ref _ptr_allocate(space USize)
    @_space = space.next_pow2.max(space).max(64)
    @_ptr = CPointer(U64)._alloc(@_u64_space)

  :fun ref _ptr_reallocate(space USize)
    @_space = space.next_pow2.max(space).max(64)
    @_ptr = @_ptr._realloc(@_u64_space)

  :fun _ptr_get_at(index USize) Bool
    data_index = index.bit_shr(6)
    bit_number = index.bit_and(0x3F).u8
    bit_mask = U64[1].bit_shl(bit_number)
    @_ptr._get_at(data_index).bit_and(bit_mask) != 0

  :fun ref _ptr_assign_at(index USize, value Bool)
    data_index = index.bit_shr(6)
    bit_number = index.bit_and(0x3F).u8
    bit_mask = U64[1].bit_shl(bit_number)
    bits = @_ptr._get_at(data_index)
    bits = bits
      .bit_and(bit_mask.invert)
      .bit_or(value.u64.bit_shl(bit_number))
    @_ptr._assign_at(data_index, bits)
    value

  :fun ref _ptr_displace_at(index USize, value Bool)
    data_index = index.bit_shr(6)
    bit_number = index.bit_and(0x3F).u8
    bit_mask = U64[1].bit_shl(bit_number)
    bits = @_ptr._get_at(data_index)
    old_value = bits.bit_and(bit_mask) != 0
    bits = bits
      .bit_and(bit_mask.invert)
      .bit_or(value.u64.bit_shl(bit_number))
    @_ptr._assign_at(data_index, bits)
    old_value

  :new (space USize = 0)
    @_size = 0
    if (space > 0) (@_ptr_allocate(space) | @_ptr_set_null)

  :new iso new_iso(space USize = 0) // TODO: use recover instead of this hack
    @_size = 0
    if (space > 0) (@_ptr_allocate(space) | @_ptr_set_null)

  :fun size: @_size
  :fun space: @_space

  :fun is_empty: @_size == 0
  :fun is_not_empty: @_size != 0
  :fun ref clear: @_size = 0, @

  :fun ref truncate(size): @_size = @_size.min(size)

  :: Reserve enough total space for the given number of bits.
  :: The size (number of actual bits present in the array) does not change.
  :fun ref reserve(space USize)
    if (@_space < space) @_ptr_reallocate(space)
    @

  :: Create a clone of this bit array, containing all of the same bit values.
  :fun clone @'iso
    array = @new_iso(@size)
    _ptr_tag CPointer(U64)'tag = @_ptr // TODO: this indirection shouldn't be needed
    array._clone_from(_ptr_tag, @size)
    array._size = @size
    --array

  :fun ref _clone_from(other_ptr CPointer(U64), size USize)
    other_ptr._unsafe._copy_to(@_ptr, size)

  :fun val as_bytes
    ptr = CPointer(U8).from_usize(@_ptr.usize)
    Bytes.val_from_cpointer(ptr._unsafe, @_u8_space, @_u8_space)

  :fun val as_native_u64_array
    Array(U64).val_from_cpointer(@_ptr._unsafe, @_u64_space, @_u64_space)

  :fun "[]!"(index)
    error! if (@size <= index)
    @_ptr_get_at(index)

  :fun ref "[]=!"(index, value)
    error! if (@size <= index)
    @_ptr_assign_at(index, value)

  :fun ref "[]<<=!"(index, value)
    error! if (@size <= index)
    @_ptr_displace_at(index, value)

  :fun ref "<<"(value): @push(value)
  :fun ref push(value)
    @reserve(@_size + 1)
    @_ptr_assign_at(@_size, value)
    @_size = @_size + 1
    @

  :fun ref pop!
    @_size = @_size -! 1
    @_ptr_get_at(@_size)

  :: Return the first bit in the bit array.
  :: Raises an error if the bit array is empty.
  :fun first!
    error! if (@size == 0)
    @_ptr._get_at(0)

  :: AssigU64 the given value to replace the first bit in the bit array.
  :: Raises an error if the bit array is empty.
  :fun ref "first=!"(value)
    error! if (@size == 0)
    @_ptr._assign_at(0, value)

  :: Return the last bit in the bit array.
  :: Raises an error if the bit array is empty.
  :fun last!
    @_ptr._get_at(@size -! 1)

  :: Assign the given value to replace the last bit in the bit array.
  :: Raises an error if the bit array is empty.
  :fun ref "last=!"(value)
    @_ptr._assign_at(@size -! 1, value)

  :fun "!="(other): (@ == other).is_false // TODO: move this to the Equatable trait?
  :fun "=="(other BitArray'box)
    (@_size == other._size) && (@_ptr._compare(other._ptr, @_size) == 0)

  :fun each_with_index(
    from USize = 0
    to = USize.max_value
    stride USize = 1
  )
    to = @_size.min(to)
    index = from
    while (index < to) (
      // TODO: it should be possible to do fewer underlying pointer loads
      // by batching with an inner loop when the stride is less than 64
      // However, it's unclear how much of a performance boost that would be,
      // so it needs to be tested to see if that's worth the extra complexity.
      yield (@_ptr_get_at(index), index)
      index += stride
    )
    None

  :fun reverse_each_with_index(
    from = USize.max_value
    to USize = 0
    stride USize = 1
  )
    try (
      index USize = @_size.min(from) -! 1
      while (index >= to) (
        // TODO: it should be possible to do fewer underlying pointer loads
        // by batching with an inner loop when the stride is less than 64
        // However, it's unclear how much of a performance boost that would be,
        // so it needs to be tested to see if that's worth the extra complexity.
        yield (@_ptr_get_at(index), index)
        index = index -! stride
      )
    )
    None

  :fun ref swap!(index_1, index_2)
    error! if (@size <= index_1)
    error! if (@size <= index_2)
    @_ptr_swap(index_1, index_2)

  :fun ref _ptr_swap(index_1 USize, index_2 USize)
    value_1 = @_ptr_get_at(index_1)
    value_2 = @_ptr_get_at(index_2)
    @_ptr_assign_at(index_1, --value_2)
    @_ptr_assign_at(index_2, --value_1)
    None

  :: This is a specialized delete method that deletes a bit at the given index
  :: without expensive mass-shifting operations of all later bit indices.
  ::
  :: This is achieved by moving the value of the last bit index into its place.
  ::
  :: Therefore the caller must be aware of this move and take it into account.
  :: Any later operations trying to check the semantic value that was originally
  :: in that last bit index position should now check it at its new position,
  :: which is the bit index that had its value deleted by this operation.
  :fun ref delete_by_moving_last!(index)
    error! if (index >= @_size)

    // The number of bits will decrease by one.
    @_size -= 1

    // If the index we wanted to remove was the last index,
    // there's nothing left to do - it was removed by changing the size.
    return if (index == @_size)

    // Otherwise we need to grab the value from the last index
    // and assign it to the position of the value we are deleting.
    moved_value = @_ptr_get_at(@_size)
    @_ptr_assign_at(index, moved_value)

    None
