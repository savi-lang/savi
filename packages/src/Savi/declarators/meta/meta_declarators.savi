// Here in this file we define the declarators for declaring declarators.
// Hold on to your hat, as it's going to get kind of meta here.
//
// All declarations in Savi are evaluated by a matching declarator,
// and all declarators are declared with a `:declarator` declaration.
//
// Because that's a circular dependency, the declarators in this source file
// need to use a special bootstrapping process to make them evaluatable.
//
// The compiler hard-codes identical "bootstrap" versions of the fundamental
// declarators, so that those can be used to set up these "real" declarators,
// and then the compiler discards the bootstrap ones in favor of the real ones.
//
// We go through this bootstrapping ritual so that the "real" declarators
// can be declared in Savi source code, where they can use standard
// documentation generation mechanisms, and when a user trying to write
// a custom declarator makes a mistake, they'll see a nice error pointing to
// this source file rather than a fake source file like the bootstrap ones use.
//
// Note that not all of the declarators in this file are needed for boostrapping
// the declarator system, so those which are not needed for bootstrapping
// will not have an identical bootstrapping counterpart in the compiler.
//
// Now, without further ado, here are the declarators for declaring declarators:
//
// ---

:: Define a new kind of declaration that can be made in Savi source code.
::
:: Any package can define new custom declarators, which can be used for
:: domain-specific languages, reducing repetition, or general meta-programming.
::
:: Declarations in Savi source code are evaluated by an interpreter that
:: tries to associate each declaration with a matching declarator that is known.
:: The declarator must match the following aspects of the declaration:
::
:: - The name of the declarator must match the first term of the declaration
::   (the word which appears at the start of the line, prefixed by a colon).
::
:: - The declarator must have term acceptors that will match all subsequent
::   terms of the declaration, in the correct order and with the correct types.
::   Some term acceptors may be optional and match without a term being present.
::
:: - If the declarator requires a body, a matching declaration must have a body.
::   If the declarator doesn't allow a body, the declaration must not have one.
::
:: - The declarator must have its "context" requirement satisified.
::   For example, a `:fun` declaration can only appear within the context
::   of a type declaration that occurred earlier in the same source file scope.
::   That is, some declarations set up a context in which later declarations
::   may be conceptually nested, until a non-nested declaration is observed,
::   at which point the context is popped and will not receive more nested ones.
::
:: Once all requirements are satisfied, the declaration has found a matching
:: declarator, and the declarator evaluates the declaration to generate some
:: effect on the package's scope, such as generating new types or methods in it.
:declarator declarator
  :intrinsic
  :begins declarator

  :: The name that must immediately follow the colon in the declaration.
  :term name Name

:: Mark this declarator as being a compiler intrinsic instead of a custom one.
::
:: Custom declarators always define their effects inline, but many built-in
:: declarators have their effects hard-coded into the Savi compiler.
:: Such hard-coded declarators are marked as intrinsic to set them apart.
:declarator intrinsic
  :intrinsic
  :context declarator

:: Mark this declarator as being conceptually nested within a named context.
::
:: A declaration will only match this declarator when it appears in the same
:: source file after another declaration that begins this kind of context,
:: and before other declarations that destroy the context to set up a new one.
::
:: For example, a `:fun` declaration can only appear within the "type" context,
:: so it must appear after another declaration that begins a "type" context.
::
:: If no context declaration is made, a declarator is implicitly assumed to
:: have a required context of "top", which is a special named context that
:: indicates that it needs no particular context and thus it appears at the
:: top level of the nested hierarchy of declarations in a source file.
:declarator context
  :intrinsic
  :context declarator

  :: The name of the context where this kind of declaration must be nested.
  :term name Name

:: Mark this declarator as beginning a new context in a nested hierarchy.
::
:: Declarations that require a context of the same name can then be said to be
:: nested within this one by declaring them immediately afterward.
::
:: Indentation is used for readability of nested declarations, but indentation
:: is not syntactically required for proper evaluation of the nested hierarchy.
::
:: A declaration that matches this declarator will push a new context into
:: the local source file's scope stack in the declaration interpreter, such that
:: it is available for other declarations looking to match that context.
::
:: Any subsequent declaration that matches an outer context instead of this one
:: will implicitly end the context that was begun by this declaration.
::
:: For example, a `:class` declaration can begin a "type" context, and following
:: `:fun` declarations that require the "type" context will be nested within it.
:: But as soon as another `:class` declaration is seen, the fact that the
:: new declaration requires the "top" context instead of the "type" context
:: will implicitly finish the current "type" context and pop it off the stack.
:declarator begins
  :intrinsic
  :context declarator

  :: The name of the new nested context that will be set up by the declaration.
  :term name Name

:: Define a declaration term acceptor that matches just one keyword by name.
::
:: When evaluating a declaration, each term in the declaration must be accepted
:: in order the term acceptors that were defined in the matching declarator.
::
:: This kind of term acceptor matches only if the term is an identifier
:: that exactly matches the name of the keyword.
::
:: This is useful for distinguishing from similar declarators, and for
:: designing more human-readable domain-specific languages.
::
:: If a term is observed that does not exactly match the keyword,
:: this term acceptor will fail and the overall match will fail.
:declarator keyword
  :intrinsic
  :context declarator

  :: The name of the keyword which must appear in the declaration.
  :term keyword Name

:: Define a declaration term acceptor that matches a single term from a list.
::
:: When evaluating a declaration, each term in the declaration must be accepted
:: in order the term acceptors that were defined in the matching declarator.
::
:: This kind of term acceptor matches based on checking if the given term is
:: one of the names in the enumerated list of possible values.
::
:: If a term is observed that is not in the list of possible named values,
:: this term acceptor will fallback to its default term value if present,
:: or, if there is no default term value available, the overall match will fail.
:declarator term
  :intrinsic
  :context declarator
  :begins declarator_term

  :: The name of the term, which can be used to refer to the term value later.
  :term name Name

  :keyword enum

  :: The list of named values which are possible to use for this term.
  :term possible NameList

:: Define a declaration term acceptor that matches a single term by type.
::
:: When evaluating a declaration, each term in the declaration must be accepted
:: in order the term acceptors that were defined in the matching declarator.
::
:: This kind of term acceptor matches based on the syntactical type of the term.
:: There are a limited number of syntactical term types known to the compiler,
:: and the intended type must be referred to by name here.
::
:: If a term is observed that does not match the type of the term acceptor,
:: this term acceptor will fallback to its default term value if present,
:: or, if there is no default term value available, the overall match will fail.
:declarator term
  :intrinsic
  :context declarator
  :begins declarator_term

  :: The name of the term, which can be used to refer to the term value later.
  :term name Name

  :: The type of term to accept, which must be one of the following types:
  :term type enum (
    Term     :: any possible declaration term
    String   :: a string literal
    Name     :: an identifier or string literal, coerced into an identifier
    Type     :: an algebraic type expression
    NameList :: a parenthesized group of Name terms
    TypeOrTypeList :: a Type or parenthesized group of them
    Params         :: a parenthesized group of function parameter designations
    NameMaybeWithParams :: a Name, optionally qualified by a Params group
  )

:: Mark this declaration term acceptor as being optional.
::
:: An optional term acceptor can quietly fail to match an incoming term,
:: without failing the overal match for the declaration.
::
:: When it accepts no term, the term value will be just missing from the data.
:: If a default term value is desired, declare with `:default` instead.
:declarator optional
  :intrinsic
  :context declarator_term

:: Mark this declaration term acceptor as being optional with a default value.
::
:: An optional term acceptor can quietly fail to match an incoming term,
:: without failing the overal match for the declaration.
::
:: When it accepts no term, the given default term value will be in the data.
:: To have the term value just be missing, declare with `:optional` instead.
:declarator default
  :intrinsic
  :context declarator_term

  :: The term value to use when the incoming declaration term doesn't match.
  :term term Term

:: Mark this declarator as able to accept a declaration that has a body.
::
:: Without declaring `:body required` or `:body optional`, the declarator
:: will not successfully match a declaration that has an imperative body on it.
::
:: For example, `:fun` declarations take a body that is used as the body of the
:: function being declared, and `:var` and `:let` declarations take a body that
:: is used as the initial value of the field being declared.
:declarator body
  :intrinsic
  :context declarator

  :: Specifies whether a declaration body will be required or optional.
  :term requirement enum (
    required :: a body must be provided as part of the declaration
    optional :: a body may be provided as part of the declaration
  )
