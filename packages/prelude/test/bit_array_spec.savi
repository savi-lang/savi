:import "spec"

:class BitArraySpec
  :is Spec
  :const describes: "BitArray"

  :it "starts with zero space and a null pointer by default"
    data = BitArray.new
    assert: data.space == 0
    assert: data.size == 0
    assert: data._ptr.is_null

  :it "allocates the next power of two above 64 containing the requested space"
    data = BitArray.new(1)
    assert: data.space == 64
    assert: data.size == 0
    assert: data._ptr.is_not_null

    data = BitArray.new(63)
    assert: data.space == 64
    assert: data.size == 0
    assert: data._ptr.is_not_null

    data = BitArray.new(64)
    assert: data.space == 64
    assert: data.size == 0
    assert: data._ptr.is_not_null

    data = BitArray.new(65)
    assert: data.space == 128
    assert: data.size == 0
    assert: data._ptr.is_not_null

  :it "won't reallocate when reserving space within the current allocation"
    data = BitArray.new(63)
    orig_pointer_address = data._ptr.usize

    data.reserve(64)
    assert: data.space == 64
    assert: data.size == 0
    assert: data._ptr.is_not_null
    assert: data._ptr.usize == orig_pointer_address

    data.reserve(0)
    assert: data.space == 64
    assert: data.size == 0
    assert: data._ptr.is_not_null
    assert: data._ptr.usize == orig_pointer_address

  :it "will reallocate when reserving space beyond the current allocation"
    data = BitArray.new(12)
    orig_pointer_address = data._ptr.usize

    // Go to a much larger size in a different allocator pool,
    // to ensure that we actually get a new pointer address.
    data.reserve(131000)

    assert: data.space == 131072
    assert: data.size == 0
    assert: data._ptr.is_not_null
    assert: data._ptr.usize != orig_pointer_address

  :it "pushes new bits onto the end of the array and reads them back out"
    // Bool values can be given in numeric form (0/1), or named (True/False).
    bits = BitArray.new << 0 << 1 << True << False
    assert: bits[0]! == 0
    assert: bits[1]! == 1
    assert: bits[2]! == 1
    assert: bits[3]! == 0
    assert no_error: bits[3]! = 1
    assert: bits[1]! == 1

  :it "can be converted to immutable Bytes"
    bits val = BitArray.new_iso
      << 1 << 0 << 1 << 1 << 0 << 0 << 0 << 0
      << 0 << 0 << 0 << 0 << 1 << 1 << 1 << 1
      << 1 << 0 << 1 << 1 << 0 << 1 << 0 << 1
      << 0 << 1 << 0 << 1 << 1 << 1 << 0 << 1
      << 1 << 1 << 1 << 1 << 0 << 1 << 1 << 1
      << 0 << 1 << 1 << 1 << 1 << 1 << 0 << 1
      << 1 << 0 << 1 << 1 << 0 << 1 << 0 << 1
      << 0 << 1 << 1 << 1 << 1 << 0 << 1 << 1
      << 1 << 0 << 1 << 1 << 0 << 0 << 0 << 0
      << 0 << 0 << 0 << 0 << 1 << 0 << 1 << 1
      << 1 << 0 << 1 << 1 << 0 << 1 << 0 << 1
      << 0 << 1 << 0 << 1 << 0 << 1 << 0 << 1
      << 0 << 1 << 0 << 1 << 1 << 1 << 1 << 1
      << 0 << 1 << 0 << 1 << 1 << 0 << 1 << 0
      << 1 << 1 << 1 << 1 << 0 << 1 << 1 << 1
      << 0 << 1 << 1 << 1 << 1 << 1 << 0 << 1

    bytes = bits.as_bytes
    assert: bytes.read_native_u64!(0) == 0xDEADBEEFBAADF00D
    assert: bytes.read_native_u64!(8) == 0xBEEF5AFAAAADD00D

  :it "allows bit access only within the existing bounds of the array"
    bits = BitArray.new << 0 << 1 << 1
    assert error: bits[3]!
    assert error: bits[3]! = 1

  :it "supports element displacing assignment"
    bits = BitArray.new << 0 << 1 << 1

    assert: (bits[0]! <<= 1) == 0
    assert: (bits[1]! <<= 0) == 1
    assert: (bits[2]! <<= 1) == 1
    assert error: bits[3]! <<= 0

    assert: bits[0]! == 1
    assert: bits[1]! == 0
    assert: bits[2]! == 1
    assert error: bits[3]!

  :it "can be cleared to an empty size"
    bits = BitArray.new << 0 << 1 << 1
    assert: bits.size == 3
    assert: bits.is_empty.is_false
    assert: bits.is_not_empty

    bits.clear
    assert: bits.size == 0
    assert: bits.is_empty
    assert: bits.is_not_empty.is_false
    assert error: bits[0]!

  :it "yields each bit in the array, along with the index"
    bits = BitArray.new << 0 << 1 << 1
    array_a Array(Bool) = []
    array_b Array(USize) = []
    bits.each_with_index -> (bit, index |
      array_a << bit
      array_b << index
    )
    assert: array_a == [0, 1, 1]
    assert: array_b == [0, 1, 2]

  :it "yields each bit in the array, in reverse, along with the index"
    bits = BitArray.new << 0 << 1 << 1
    array_a Array(Bool) = []
    array_b Array(USize) = []
    bits.reverse_each_with_index -> (bit, index |
      array_a << bit
      array_b << index
    )
    assert: array_b == [2, 1, 0]
    assert: array_a == [1, 1, 0]

  :it "swaps the bits in the array if both indices are in range"
    bits = BitArray.new << 0 << 1 << 0

    assert no_error: bits.swap!(1, 2)
    assert: bits[0]! == 0
    assert: bits[1]! == 0
    assert: bits[2]! == 1

    assert no_error: bits.swap!(2, 0)
    assert: bits[0]! == 1
    assert: bits[1]! == 0
    assert: bits[2]! == 0

    assert error: bits.swap!(1, 3)
    assert: bits[0]! == 1 // no change, due to the error
    assert: bits[1]! == 0 // no change, due to the error
    assert: bits[2]! == 0 // no change, due to the error

    assert error: bits.swap!(3, 0)
    assert: bits[0]! == 1 // no change, due to the error
    assert: bits[1]! == 0 // no change, due to the error
    assert: bits[2]! == 0 // no change, due to the error

  :it "deletes a bit without shifting by moving the last bit into its place"
    bits = BitArray.new << 0 << 1 << 0 << 0 << 1

    assert no_error: bits.delete_by_moving_last!(2)
    assert: bits[0]! == 0
    assert: bits[1]! == 1
    assert: bits[2]! == 1
    assert: bits[3]! == 0
    assert error: bits[4]!

    assert no_error: bits.delete_by_moving_last!(1)
    assert: bits[0]! == 0
    assert: bits[1]! == 0
    assert: bits[2]! == 1
    assert error: bits[3]!

    assert error: bits.delete_by_moving_last!(3)
    assert: bits[0]! == 0 // no change, due to the error
    assert: bits[1]! == 0 // no change, due to the error
    assert: bits[2]! == 1 // no change, due to the error
    assert error: bits[3]!    // no change, due to the error
