:import "spec"

:: A dummy class for use with identity-based equality testing.
:class IndexableSpecOpaqueObject
  :new ref new
  :new iso new_iso

:class IndexableSpec
  :is Spec
  :const describes: "Indexable"

  :it "yields each element"
    array Array(String) = []
    ["foo", "bar", "baz"].each -> (string | array << string)
    assert: array == ["foo", "bar", "baz"]

  :it "yields each element of a subslice"
    array Array(String) = []
    ["a", "b", "c", "d", "e", "f"].each(1, 5) -> (string | array << string)
    assert: array == ["b", "c", "d", "e"]

  :it "yields each element along with the index"
    array_a Array(String) = []
    array_b Array(USize) = []
    ["foo", "bar", "baz"].each_with_index -> (string, index |
      array_a << string
      array_b << index
    )
    assert: array_a == ["foo", "bar", "baz"]
    assert: array_b == [0, 1, 2]

  :it "yields each element, in reverse"
    array Array(String) = []
    ["foo", "bar", "baz"].reverse_each -> (string | array << string)
    assert: array == ["baz", "bar", "foo"]

  :it "yields each element, in reverse, along with the index"
    array_a Array(String) = []
    array_b Array(USize) = []
    ["foo", "bar", "baz"].reverse_each_with_index -> (string, index |
      array_a << string
      array_b << index
    )
    assert: array_b == [2, 1, 0]
    assert:
      array_a == ["baz", "bar", "foo"]

  :it "yields each element, stopping early if the criteria is met"
    array Array(String) = []
    early_stop = ["foo", "bar", "baz"].each_until -> (string |
      array << string
      string == "bar"
    )
    assert: early_stop
    assert: array == ["foo", "bar"]

    array.clear
    early_stop = ["foo", "bar", "baz"].each_until -> (string |
      array << string
      string == "bard"
    )
    assert: early_stop.is_false
    assert: array == ["foo", "bar", "baz"]

  :it "yields each element of a subslice, stopping early if the criteria is met"
    array Array(String) = []
    early_stop = ["a", "b", "c", "d", "e", "f"].each_until(1, 5) -> (string |
      array << string
      string == "d"
    )
    assert: early_stop
    assert: array == ["b", "c", "d"]

    array.clear
    early_stop = ["a", "b", "c", "d", "e", "f"].each_until(1, 5) -> (string |
      array << string
      string == "z"
    )
    assert: early_stop.is_false
    assert: array == ["b", "c", "d", "e"]

  :it "returns True if any element meets the criteria"
    array Array(U8) = [11, 22, 33, 44, 36, 27, 18]
    assert: array.has_any -> (num | num > 30)
    assert: array.has_any -> (num | num > 50).is_false

  :it "returns True if all elements meet the criteria"
    array Array(U8) = [11, 22, 33, 44, 36, 27, 18]
    assert: array.has_all -> (num | num > 10)
    assert: array.has_all -> (num | num > 30).is_false

  :it "finds the first element that meets the criteria"
    array Array(U8) = [11, 22, 33, 44, 36, 27, 18]
    assert: array.find! -> (num | num > 30) == 33
    assert error: array.find! -> (num | num > 50)

  :it "selects those elements that meet the criteria"
    array Array(U8) = [11, 22, 33, 44, 36, 27, 18]
    selected = array.select -> (num | num < 30)
    assert: selected == [11, 22, 27, 18]

  :it "rejects those elements that do not meet the criteria"
    array Array(U8) = [1, 2, 3, 4, 5]
    odds = array.reject -> (num | num % 2 == 0)
    assert: odds == [1, 3, 5]

  :it "rejects nothing from an empty array"
    array Array(U8) = []
    assert: array.reject -> (num | num % 2 == 0) == array

  :it "rejects nothing if criteria is always false"
    array Array(U8) = [1, 2, 3]
    assert: array.reject -> (num | False) == array
