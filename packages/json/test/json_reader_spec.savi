:import "spec"

:class _JsonReaderSpecUser
  :var name String: ""
  :var admin Bool: False
  :fun ref from_json!(read JsonReader)
    read.each_in_object! -> (key |
      case key == (
      | "name"  | try (@name = read.string!)
      | "admin" | try (@admin = read.bool!)
      | read.unexpected_key
      )
    )
    @

:class JsonReaderSpec
  :is Spec
  :const describes: "JsonReader"

  :it "can fill objects with data read from JSON"
    read = JsonReader.new(<<<[
      { "name": "Alice", "admin": true },
      { "name": "Bob" },
      { "name": "Cyril", "admin": false }
    ]>>>)

    users Array(_JsonReaderSpecUser) = []
    try read.each_in_array! -> (index |
      try (
        users << _JsonReaderSpecUser.new.from_json!(read)
      )
    )

    assert: read.errors.is_empty

    assert: users[0]!.name == "Alice"
    assert: users[0]!.admin == True
    assert: users[1]!.name == "Bob"
    assert: users[1]!.admin == False
    assert: users[2]!.name == "Cyril"
    assert: users[2]!.admin == False

  :it "can report nice errors when the data doesn't match expectations"
    read = JsonReader.new(<<<[
      { "bogus": true, "name": "Alice", "admin": true },
      { "name": true },
      { "name": "Cyril", "admin": "huh?" },
      false
    ]>>>)

    users Array(_JsonReaderSpecUser) = []
    try read.each_in_array! -> (index |
      try (
        users << _JsonReaderSpecUser.new.from_json!(read)
      )
    )

    assert: Inspect[read.errors].trim(0, -1) == <<<
      - unexpected key encountered at path: $[0]["bogus"]
      - expected to read a string value at path: $[1]["name"]
      - expected to read a boolean value at path: $[2]["admin"]
      - expected to read an object value at path: $[3]
    >>>

    // Note that the valid data still made it into our data structures!
    assert: users[0]!.name == "Alice"
    assert: users[0]!.admin == True
    assert: users[1]!.name == ""
    assert: users[1]!.admin == False
    assert: users[2]!.name == "Cyril"
    assert: users[2]!.admin == False
